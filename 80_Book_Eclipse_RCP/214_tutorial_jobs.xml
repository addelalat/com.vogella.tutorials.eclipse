<chapter>
== Exercise: Using asynchronous processing
	
=== Simulate delayed access
		
			Change your
			`getTodos(Consumer&lt;List&lt;Todo&gt;&gt; todosConsumer)`
			method in the
			`MyTodoServiceImpl`
			class
			to the following example code. This code simulates a slow server
			access
			with the
			`TimeUnit`
			class.
		
		
[source,java]
----
include::res/snippets/delay.java[]
----
		
		
			Start your application. What happens if you press the
			`Button`
			to fill the JFace table?
		
	
	
=== Use asynchronous processing
		
			You have a
			_Load Data_
			button in your
			`TodoOverviewPart`
			.
			Write a
			custom
			`Job`
			implementation
			to load the data in the background whenever this button
			is pressed.
			Once
			the
			data is loaded, update the
			table
			with the new data.
			Make sure
			that
			this table update happens in the
			main interface
			thread.
		

		The following example code can help. 

		
[source,java]
----
include::res/job/JobSnippets.java[]
----
		

	
	
=== Validating
		NOTE:
			
				If you start your application, it takes longer to start if you
				still
				read the data somewhere synchronously during startup. This is done
				for example if you implemented
				<<exercisecomboviewer>>
				. If you want to avoid this you need to perform this reading also
				asynchronously. We leave this
				change as an optional exercise to the
				reader.
			
		

		
			Use the wizard to create a new
			`Todo`
			object. Press the
			_Load Data_
			button to update the table. The application should be usable and the
			table should update after the delay defined in the
			`ITodoService`
			implementation class.
		
	

	
=== Remove delay
		
			After finishing this exercise and validating that everything
			works correctly, change the delay to one second so avoid delays
			during future exercises.
		
	
</chapter>