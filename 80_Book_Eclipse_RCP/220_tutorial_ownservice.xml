<chapter id="tutorial_e4services_usage">
== Exercise: Define and use an OSGi service

=== Target of this exercise

		
			In this exercise you use the
			OSGi declarative services functionality to
			provide a service. The provided services is for
			the
			`ITodoService`
			interface and is implemented by the existing
			`MyTodoServiceImpl`
			class.
		

	


=== Update the plug-in dependencies
		
			In the
			_MANIFEST.MF_
			file of your
			`com.example.e4.rcp.todo`
			plug-in
			define a dependency to:

			<itemizedlist>
				<listitem>
					
						`com.example.e4.rcp.todo.model`
					
				</listitem>
			</itemizedlist>
		
		
			
			In the
			_MANIFEST.MF_
			file of your
			`com.example.e4.rcp.todo.services`
			plug-in
			define a dependency to:

			<itemizedlist>
				<listitem>
					
						`org.eclipse.osgi.services`
					
				</listitem>
			</itemizedlist>
		
		
	



=== Enable annotation processing and plug-in activation
		
			Ensure that OSGi services can be defined via annotations in the class via
			menu:Window[Preferences > Plug-in Development > DS annotations]
			.
		
		
image::activate_pde_ds_annotations.png" scale="40[Activate DS annotation processing
					,pdfwidth=60%]
		

	


=== Define service

		
			Add the
			`@Component`
			annotation to your class. Eclipse should use this annotation to generate
			the necessary files to make the
			`MyTodoServiceImpl`
			class
			available as OSGi services for the
			`ITodoService.`
			interface.
		
		
[source,java]
----
include::res//osgi/TodoServiceImplOsgiDs.java[]
----
		
	




=== Get the ITodoService injected
		
			Change your
			`TodoOverviewPart`
			class
			so that the
			`ITodoService`
			service implementation
			is
			injected
			into it by using your
			`@PostConstruct`
			method. Print the number of todos on the console as demonstrated in
			the following example.
		

		
[source,java]
----
include::res/service/PostConstruct.java[]
----
		
	


=== Validate your implementation
		
			Start your application via the product and ensure that you see
			the
			number of tasks printed to the console. See
			next section for potentials areas of problem in case this does not work.
		
	



=== Error analysis in case the injection did not work
		
			Ensure you have saved everything (ensure that the Save All
			button is
			inactive).
		
		
			If you get compile errors trying to access your classes, ensure
			that and that you have exported the
			required
			packages as API.
		
		
			If you get an error during start up, ensure that
			you have
			added
			the two new plug-ins to your feature
			you have used
			the product to start your
			application
		
		
			If the
			`ITodoService`
			object cannot be injected ensure that the
			_Activate this plug-in when one of its classes is loaded
			_
			flag for the plug-in has been set in the
			_MANIFEST.MF_
			file of your service plug-in.
		
		
			Also ensure that the
			`com.example.e4.rcp.todo.services`
			and
			`com.example.e4.rcp.todo.model`
			plug-ins are part of your feature project and that you started the
			application via the product file.
		
		
			Based on your annotations Eclipse creates the necessary OSGi DS files at build time. Review the generated files.
			The
			generate component xml
			should look like the following example. This file should also be automatically included into
			your
			_build.properties_
			.
		
		
[source,java]
----
include::res/tutorialservice/component.xml[]
----
		
		
			Eclipse also adds a reference to the
			_component.xml_
			file
			in the
			_MANIFEST.MF_
			file under the Service-Component reference.
		
		
[source,java]
----
include::res/osgi/servicereference.txt[]
----
		

	


=== Reflect on your current service usage design
		
			With this setup you have completely hidden the concrete
			implementation of the service
			from the usage. This design
			is depicted
			in the following screenshot.
		
		
image::tutorial_osgidependencies10.png[Implicit dependencies with OSGi service,pdfwidth=60%]
		
		
			The current service
			implementation does not persist
			the data, as it is
			just a test
			service. You could replace it
			with
			another
			service implementation
			without changing
			your source code or the dependencies
			in
			the consuming plug-ins. The
			only change required to use another service implementation in your
			application is to
			exchange
			the
			corresponding service
			plug-in in your
			product configuration
			file
			(via your
			feature).
		
	

</chapter>
