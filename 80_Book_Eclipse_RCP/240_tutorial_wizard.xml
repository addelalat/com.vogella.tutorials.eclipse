[[tutorial_wizard]]
== Exercise: Create a wizard

=== Create classes for the wizard
		
			In this exercise you create a wizard in your
			`com.example.e4.rcp.todo`
			plug-in which allows you to create a new Todo item.
			This exercise
			demonstrates how you can reuse your part implementation in a wizard.
		
		
			Create the
			`com.example.e4.rcp.todo.wizards`
			package in your application plug-in.
		
		
			Create the following
			`TodoWizardPage1`
			class which is your first wizard page. This page
			reuses the
			`TodoDetailsPart`
			for defining the user interface.
		

		
[source,java]
----
include::res/wizards/TodoWizardPage1.java[]
----
		
		NOTE:
			
				As you create this instance of the
				`TodoDetailsPart`
				class, there is no automatic dependency injection performed by the
				framework. Therefore the above code calls the methods directly to
				construct the user interface.
			
		
		
			Create the following class for the second page
			of the wizard. It
			contains only a
			_Confirm_
			checkbox
			button.
		
		WARNING:
			
				You will get a temporary compile error once you get this class
				because it uses
				the
				`TodoWizard`
				class which you create in the next step.
			
		
		
[source,java]
----
include::res/wizards/TodoWizardPage2.java[]
----
		

		
			Create the
			`TodoWizard`
			class which extends the
			`Wizard`
			class and add
			`TodoWizardPage1`
			and
			`TodoWizardPage2`
			as pages to it.
		

		
[source,java]
----
include::res/wizards/TodoWizard.java[]
----
		

	


=== Adjust part
		
			To capture the changes in the user interface in your
			`Todo`
			object you need to extend your
			`TodoDetailsPart`
			class.
		
		
			Add a
			`ModifyListener`
			to your text fields in your
			`TodoDetailsPart`
			class and write the content of the text fields back to the
			`Todo`
			object if the text fields are modified.
		

		
[source,java]
----
include::res/wizards/ModifyListener.java[]
----
		

		NOTE:
			
				You could also add similar listeners to your
				check button
				and
				`DateTime`
				widget to write changes in these widgets back to the
				`Todo`
				object. We skip this step here because in
				<<databindingpart>>
				you learn an easier way to do this.
			
		
	

=== Adjust handler implementation
		
			Call the wizard from your
			`NewTodoHandler`
			class, which you already added to the menu in an earlier exercise.
		

		
[source,java]
----
include::res/wizards/NewTodoHandler.java[]
----

		
	

=== Validating
		
			Validate that you can create new Todo objects via your wizard. Start
			your
			application
			and create a new
			`Todo`
			via the
			wizard.
		
		Afterwards refresh your table via the "Load Data" button to see
			the entry.
		
		WARNING:
			If you did not implement the modification listeners correctly,
				you may get a new empty in the table.
			
		

		NOTE:
			
				In
				<<part_eventbroker>>
				you learn how to update all components of your
				application
				immediately
				after a change in the data model.
			
		
	
</chapter>
