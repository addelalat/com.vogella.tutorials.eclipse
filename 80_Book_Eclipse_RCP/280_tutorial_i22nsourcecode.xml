<chapter id="tutorial_i22n_source">
	<title>Optional exercise: Internationalization for the source code

[[tutorial_i22n_source_target">
=== Target
		In this exercise you translate the relevant parts of your
			application source code via the Eclipse 4 translation
			service.
		
	

[[tutorial_i22n_plugin">
=== Creating a plug-in to host the translations
		
			Create a new simple plug-in called
			_com.example.e4.rcp.todo.i18n_
			. Add the dependency
			<code>org.eclipse.core.runtime</code>
			to the new plug-in in its
			<filename>MANIFEST.MF</filename>
			file.
		

	




[[tutorial_i22n_source_messageclass">
=== Create a Message class for the source code translations
		
			Create a
			<code>Messages</code>
			class which contains your translation keys. This might look like the
			following (keys are just examples).
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="../examples/i18n/Messages.java" />
			</programlisting>
		
	

[[tutorial_i22n_translation_sourcetext">
=== Create the translations for the source code
		
			Create the
			<filename>OSGI-INF/l10n</filename>
			folder in your
			<code>com.example.e4.rcp.todo.i18n</code>
			plug-in.
		
		<warning>
			The first letter in a lower case "L" followed by the number 10. This is sometimes hard to identify as "l" and
				"1"
				look very similar.
			
		</warning>
		
			Create a
			<filename>bundle.properties</filename>
			file with key/values for the text in your source code. The file might
			look like the following.
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="../examples/i18n/bundle2.properties" />
			</programlisting>
		
		
			Create one additional translation file for another language, e.g., via
			a
			<filename>bundle_de.properties</filename>
			file. Ensure that the translation values are different.
		
		<note>
			
				The translations for the application model as created in
				<xref linkend="tutorial_i22n" />
				cannot be moved to this new plug-in. See
				<xref linkend="tutorial_i22n_note" />
				as reminder.
			
		</note>
	

[[tutorial_i22n_source_buildproperties">
=== Adjust the build.properties file
		
			Add the created property files to your build.properties file of your new plug-in
			it available in an exported
			application.
		
	
[[tutorial_i22n_source_api">
=== Export the translations as API 

		
			Publish the
			<code>com.example.e4.rcp.todo.i18n</code>
			package as API via the
			<filename>MANIFEST.MF</filename>
			file of the translation plug-in.
		

	
[[tutorial_i22n_source_dependencies">
=== Define dependencies to the translation plug-in

		
			Open the
			<filename>MANIFEST.MF</filename>
			file
			of the
			<code>com.example.e4.rcp.todo</code>
			plug-in. Add a dependency to the
			<code>com.example.e4.rcp.todo.i18n</code>
			plug-in.
		

	
[[tutorial_i22n_product">
=== Update the product (via the feature)
		
			Add the
			<code>com.example.e4.rcp.todo.i18n</code>
			plug-in to your feature project. This includes it in
			your
			product.
		
		Start your application via the product configuration file and
			validate that the application still starts and
			works correctly.
		
	

[[tutorial_i22n_source_code">
=== Using @Translation to get the messages injected
		
			Use dependency inject to the translations injected. Prepare your
			<code>TodoOverviewPart</code>
			for a dynamic language switch.
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="../examples/i18n/TodoOverviewPart.java" />
			</programlisting>
		
	


[[tutorial_i22n_test">
=== Test your translation
		
			Repeat the test as described in
			<xref linkend="tutorial_i22n_translation_model_test" />
			but this time ensure that your source code is correctly translated.
		
	



</chapter>
	
	
