<chapter id="tutorial_i22n_source">
== Optional exercise: Internationalization for the source code


=== Target
		In this exercise you translate the relevant parts of your
			application source code via the Eclipse 4 translation
			service.
		
	


=== Creating a plug-in to host the translations
		
			Create a new simple plug-in called
			_com.example.e4.rcp.todo.i18n_
			. Add the dependency
			`org.eclipse.core.runtime`
			to the new plug-in in its
			_MANIFEST.MF_
			file.
		

	





=== Create a Message class for the source code translations
		
			Create a
			`Messages`
			class which contains your translation keys. This might look like the
			following (keys are just examples).
		
		
[source,java]
----
include::res/i18n/Messages.java[]
----
		
	


=== Create the translations for the source code
		
			Create the
			_OSGI-INF/l10n_
			folder in your
			`com.example.e4.rcp.todo.i18n`
			plug-in.
		
		WARNING:
			The first letter in a lower case "L" followed by the number 10. This is sometimes hard to identify as "l" and
				"1"
				look very similar.
			
		
		
			Create a
			_bundle.properties_
			file with key/values for the text in your source code. The file might
			look like the following.
		
		
[source,java]
----
include::res/i18n/bundle2.properties[]
----
		
		
			Create one additional translation file for another language, e.g., via
			a
			_bundle_de.properties_
			file. Ensure that the translation values are different.
		
		NOTE:
			
				The translations for the application model as created in
				<<tutorial_i22n" />
				cannot be moved to this new plug-in. See
				<<tutorial_i22n_note" />
				as reminder.
			
		
	


=== Adjust the build.properties file
		
			Add the created property files to your build.properties file of your new plug-in
			it available in an exported
			application.
		
	

=== Export the translations as API 

		
			Publish the
			`com.example.e4.rcp.todo.i18n`
			package as API via the
			_MANIFEST.MF_
			file of the translation plug-in.
		

	

=== Define dependencies to the translation plug-in

		
			Open the
			_MANIFEST.MF_
			file
			of the
			`com.example.e4.rcp.todo`
			plug-in. Add a dependency to the
			`com.example.e4.rcp.todo.i18n`
			plug-in.
		

	

=== Update the product (via the feature)
		
			Add the
			`com.example.e4.rcp.todo.i18n`
			plug-in to your feature project. This includes it in
			your
			product.
		
		Start your application via the product configuration file and
			validate that the application still starts and
			works correctly.
		
	


=== Using @Translation to get the messages injected
		
			Use dependency inject to the translations injected. Prepare your
			`TodoOverviewPart`
			for a dynamic language switch.
		
		
[source,java]
----
include::res/i18n/TodoOverviewPart.java[]
----
		
	



=== Test your translation
		
			Repeat the test as described in
			<<tutorial_i22n_translation_model_test" />
			but this time ensure that your source code is correctly translated.
		
	



</chapter>
	
	
