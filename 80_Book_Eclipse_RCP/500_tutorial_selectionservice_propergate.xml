<chapter id="tutorial_usingeselectionservice">
== Exercise: Selection service

=== Target of this exercise
		
			In this section you propagate the selection of the
			`TableViewer`
			in the
			`TodoOverviewPart`
			to your
			`TodoDetailsPart`
			.
		
		
			The
			`org.eclipse.e4.ui.services`
			plug-in must be defined as dependency in the
			_MANIFEST.MF_
			file of your application plug-in. You have done this in
			<xref linkend="tutorial_api" />
			.
			Validate that this is the case.
		
	

=== Retrieving the selection service

		
			In your
			`TodoOverviewPart`
			class,
			acquire the
			`ESelectionService`
			service via dependency injection.
		
		
[source,java]
----
include::res/selection/GetSelectionService.java[]
----
		
	


=== Setting the selection in TodoOverviewPart
		
			Use the selection service to set the selection, once the user
			selects an
			entry in the list. The following code demonstrates that.
		

		
[source,java]
----
include::res/selection/ViewerSetSelection.java[]
----
		
	

=== Review TodoDetailsPart
		
			If you followed the exercises in
			<xref linkend="tutorial_api" />
			,
			your
			`TodoDetailsPart`
			class should already be correctly implemented. The relevant part of
			the code is repeated in the following snippet.
		

		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/selection/TodoDetailsPartSelection.java[]
----
		
	

=== Validate selection propagation
		
			Start your application.
			If you select a row in the JFace table, the
			corresponding
			`Todo`
			object is propagated
			via the selection
			service
			to the
			`TodoDetailsPart`
			class.
		
		<warning>

			
				Please keep in mind that ALL injections run before
				`@PostConstruct`
				, e.g., the annotated constructor, the annotated fields and the
				annotated setter methods.
				`@PostConstruct`
				is executed afterwards. Hence the
				`updateUserInterface()`
				method needs to
				check if
				your user
				interface is already available.
			

		
		NOTE:
			
				It might also happen that
				`setTodo()`
				is called before the
				`@PostConstruct`
				method. For example, your part may be in a stack but is not
				selected.
				Eclipse does not construct the object for the part before
				it becomes
				selected by the user. If the selection is set before the
				part is
				constructed, its @Inject method is called before the
				`@PostConstruct`
				method is called.
			
			
				The
				`updateUserInterface()`
				method call at the end of your
				`@PostConstruct`
				method covers this case.
			
		
		TIP:
			
				If you see unwanted updates of Todo items in your table, you did not
				implement the data binding correctly in the
				`TodoOverviewPart`
				class.
				Ensure that
				you call the
				`dispose()`
				method on your instance of the
				`DataBindingContext`
				before creating a new binding. Otherwise the binding between the
				user interface widgets and the old Todo objects stays
				active. A new Todo will
				update the user interface and the user interface binding will update
				all the old Todo objects,  which is not what you want.
			
		

	

</chapter>
