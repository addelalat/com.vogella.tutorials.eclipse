[[tutorial_editorpartservice">
== Exercise: Implement an editor


=== Add the plug-in dependencies
		NOTE:
			
				If you did the optional exercise
				<<tutorial_commandscontextmenu>>
				you should have already the required dependencies in your
				`com.example.e4.rcp.todo`
				plug-in. Skip this step in this case.
			
		
		
			Add the following
			plug-ins as dependency to the
			_MANIFEST.MF_
			file of the
			`com.example.e4.rcp.todo`
			plug-in.
			
				*
					
						`org.eclipse.e4.ui.model.workbench`
					
				
				*
					
						`org.eclipse.e4.ui.workbench.swt`
					
				

			
		
	


=== Convert TodoDetailsPart to an editor
		
			Use the
			`MDirtyable`
			attribute to mark the
			`TodoDetailsPart`
			as dirty once the user changes data via the user interface.
		
		
			The
			following example code shows how to get the attribute and how
			you
			can
			define a listener to your existing data binding
			(which you created
			in
			<<tutorial_databinding>>
			).
		

		
[source,java]
----
include::res/dirty/Dirty.java[]
----
		

		
			Basically we need a flag for evaluating the dirty state, which
			is updated once the a new todo has been set for the master detail
			binding. Note that the dirty state for the dirtable is set inside the
			ISideEffect.
		

		
			Add the following method to your
			`TodoDetailsPart`
			class to save the changed data. This method will be used by the part
			service.
		


		
[source,java]
----
include::res/dirty/Persist.java[]
----
		
	

=== Implement the save handler
		
			Change your
			`SaveAllHandler`
			handler class, so that the part service is used to
			call the
			`@Persist`
			method of all parts which are marked as dirty.
		

		
[source,java]
----
include::res/dirty/SaveAllHandler.java[]
----
		

		
			In
			<<tutorial_usingpartservice_save>>
			you implement that the save handler can only be executed if a dirty
			editor exists.
		
	



=== Validating
		
			Start your application and select an entry in the table of your
			_TodoOverviewPart_
			element.
			Modify the
			selected
			`Todo`
			in the
			_Details_
			part. Ensure that the part is marked as dirty.
		
		
			Select
			menu:File[Save]
			and validate that the editor is not marked as dirty anymore.
		
		Reload the data in the table to ensure that the data was
			correctly saved.
		
		
			Create a new
			`Todo`
			item, with the wizard and ensure that the wizard still works.
		
	


=== Confirmation dialog for modified data
		NOTE:
			This exercise is optional. It is a repetition of the usage of
				dialogs.
			
		
		

		
		
			In your
			`TodoDetailsPart`
			class
			trigger
			a JFace confirmation dialog if the selection in the table
			of
			`TodoOverviewPart`
			changes
			and if
			`TodoDetailsPart`
			contains
			modified data. See
			<<dialogs_jfacemessagedialogstatic>>
			for information how to create a confirmation dialog.
		
		
			The confirmation dialog should allow the user to prevent an update in
			`TodoDetailsPart`
			in case it has unsaved data.
		

	


</chapter>
