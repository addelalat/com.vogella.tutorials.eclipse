<chapter id="tutorial_multipleeditors">
== Optional exercise: Implementing multiple editors

=== Prerequisites
		
			This optional exercise is based on
			<xref linkend="tutorial_commandscontextmenu" />
			as it reuses the context menu of the table you created there. If you
			skipped this exercise, you need to go back and
			perform the exercise
			before going on with this one.
		

	

=== Adding new menu entries
		
			Create a new command called
			_Open Editor_
			, create a new handler for it, pointing to the following new class
			`OpenEditorHandler`
			.
		
		
[source,java]
----
include::res/editor/OpenEditorHandlerFirst.java[]
----
		

		
			Add another entry to the context menu of the table which you have
			created
			and
			registered with the SWT table in
			<xref linkend="tutorial_commandscontextmenu" />
			.
		
		
image::openneweditor10.png" scale="30[Context menu to open a new editor,pdfwidth=60%]
		
	

=== Validating the ID of the part stack
		
			Your editors should be opened in the right lower corner of the part
			stack.
			Ensure that the ID of the part stack in the
			application model
			is
			set to
			`com.example.e4.rcp.todo.partstack.bottom`
			.
		
		
image::openneweditor20.png[Validate PartStack ID,pdfwidth=60%]
		
	


=== Adding a part implementation
		
			Create the following implementation for the part which
			represents the
			editor. It is based on the
			`TodoDetailsPart`
			code but avoids listening to the current active selection.
		

		
[source,java]
----
include::res/editor/EditorPart.java[]
----
		
		
			Create a part descriptor in the application model, where this
			`EditorPart`
			is referenced.
		
		
		
			<mediaobject>
				<imageobject><imagedata fileref="images/editor-part-descriptor.png"></imagedata>
			
		
		TIP:
			
				You could also adjust the
				`TodoDetailsPart`
				code to handle both use cases. The approach to create a new class
				for the multiple editors has been chosen in this
				book to "protect"
				your existing implementation, i.e. if you make an error in this
				exercise, the rest of your
				application should still work fine.
			
		</tip>
		
			This implementation uses the
			`getPersistedState()`
			to retrieve the
			`Todo`
			id which will be passed to it via the handler.
		

	

=== Adjusting handler implementation
		
			Change your handler to open a new editor, if a corresponding
			editor is not already open. If the editor is
			already open, set the
			focus to it.
		

		
[source,java]
----
include::res/editor/OpenEditorHandler.java[]
----
		



	

=== Validating the implementation
		Ensure that you can open multiple instances of your editor with
			your context menu and that an existing editor
			gets focused if you
			re-select it. The result should look similar to the following
			screenshot.
		
		
image::editor_in_action10.png[Editor in action,pdfwidth=60%]
		
		
			Change a
			`Todo`
			in the new editor and save. Reload the data in your table via your
			_Load Data_
			button and ensure
			that the data has changed.
		
	
</chapter>
