<chapter id="tutorial_eventadmin">
	<title>Exercise: Event notifications
[[tutorial_eventadmin1">
=== Creating a plug-in for event constants
		
			Create a new simple plug-in called
			_com.example.e4.rcp.todo.events_
			.
		
		
			Define the following
			<code>MyEventConstants</code>
			interface in this new plug-in. This interface stores the constants
			for the event topics.
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../../Eclipse4EventSystem/examples/events/MyEventConstants.java" />
			</programlisting>
		
		
			Export the
			<code>com.example.e4.rcp.todo.events</code>
			package in the
			<filename>MANIFEST.MF</filename>
			file (via the
			_Runtime_
			tab) in your new plug-in.
		
	
[[tutorial_eventadminfeature">
=== Add the new plug-in to the product via the feature
		
			Add the
			_event_
			plug-in to your feature so that it is available in your product
			configuration file.
		

	

[[tutorial_eventadmin2">
=== Enter the plug-in dependencies
		
			Add
			_com.example.e4.rcp.todo.events_
			as a dependency
			to your
			_com.example.e4.rcp.todo_
			plug-in via its
			<filename>MANIFEST.MF</filename>
			file.
		
		Start your application to validate that you did everything
			correctly.
		
		<warning>
			
				Remember to start your application via the product to update
				the
				runtime configuration. If it fails ensure that you have added
				the
				_*.todo.events_
				plug-in to the feature.
			
		</warning>
	
[[tutorial_eventadmin3">
=== Send out notifications
		
			Ensure that the following two plug-ins are included as
			dependency into
			your
			<code>com.example.e4.rcp.todo</code>
			plug-in.
			<itemizedlist>
				<listitem>
					<code>org.eclipse.e4.core.services</code>
				</listitem>
				<listitem>
					<code>org.eclipse.osgi.services</code>
				</listitem>
			</itemizedlist>

		
		
			Update your
			<code>NewTodoHandler</code>
			and your
			<code>SaveAllHandler</code>
			classes to send out an event to communicate the data change. The
			following
			example code demonstrates that for the
			<code>NewTodoHandler</code>
			class.
		

		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/event/NewTodoHandler.java" />
			</programlisting>
		

	
[[tutorial_eventadmin_listeners">
=== Receive updates in your parts
		
			Register for this
			event in all relevant parts of your
			application. If
			the
			event is received, update your user interface. The following code
			demonstrates that for your
			<code>TodoOverviewPart</code>
			class.
		

		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/event/TodoOverviewPart.java" />
			</programlisting>
		
	
[[tutorial_eventadmin_validate">
=== Validating

		
			Create a new
			<code>Todo</code>
			object via your wizard. The table in
			<code>TodoOverviewPart</code>
			should get updated automatically, e.g., the new entry should be
			visible in the table after you finish the wizard.
		
	
[[tutorial_eventadmin_reviewimplementation">
=== Review the implementation
		
			The current implementation works but is not perfect. Each
			user
			interface component, which modifies
			<code>Todo</code>
			objects,
			needs to send out events.
		
		
			It would be preferable if the
			<code>ITodoService</code>
			implementation could send out these events directly.
		
		
			In
			the
			<xref linkend="contextfunctionschapter" />
			chapter we improve our current solution and move the event sending to
			the implementation class of the
			<code>ITodoService</code>
			service.
		
	

</chapter>
