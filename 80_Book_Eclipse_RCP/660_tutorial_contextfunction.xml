<chapter id="tutorial_contextfunction">
== Exercise: Create a context function

=== Target
		
			OSGi services are created by the OSGi runtime and the OSGi runtime
			does not support the
			`@Inject`
			annotation. In addition OSGi services do not have direct access to
			the
			`IEclipseContext`
			hierarchy.
		
		
			In this exercise you create a context function via OSGi declarative services using OSGi DS annotations. This allows
			you to use dependency
			injection to create
			an instance of the
			`ITodoService`
			service and to persists this instance in the Eclipse context.
			During the creation the event service is injected into
			your service instance; this allows you to send
			events from this service.
		

	

=== Add dependencies to the service plug-in
		
			Ensure that the following framework dependencies are present in your
			`com.example.e4.rcp.todo.services`
			plug-in. Some of them are already part of your
			manifest
			file but the list is complete so that you can use this as a
			reference
			for other implementations.
			<itemizedlist>
				<listitem>
					org.eclipse.core.runtime
				</listitem>
				<listitem>
					org.eclipse.e4.core.services
				</listitem>
				<listitem>
					org.eclipse.e4.core.contexts
				</listitem>
				<listitem>
					org.eclipse.e4.core.di
				</listitem>

				<listitem>
					org.eclipse.e4.ui.model.workbench
				</listitem>
				<listitem>
					org.eclipse.osgi.services
				</listitem>
			</itemizedlist>
		
		
			For this exercise the service plug-in also needs to import the following packages (or plug-ins):
			<itemizedlist>
				<listitem>
					com.example.e4.rcp.todo.model
				</listitem>
				<listitem>
					com.example.e4.rcp.todo.events
				</listitem>

			</itemizedlist>
		


		
			The resulting
			_MANIFEST.MF_
			file
			should look like the following screenshot.
		
		
image::contextfunction02.png[Dependencies for the Context Function,pdfwidth=60%]
		

	


=== Create a class for the context function
		
			Create the following new class in your
			`*.service`
			plug-in.
		
		
[source,java]
----
include::res/contextfunction/TodoServiceContextFunction.java[]
----
		

	


=== Ensure annotation processing and plug-in activation is active
		
			Ensure that OSGi services can be defined via annotations in the class via
			menu:Window[Preferences > Plug-in Development > DS annotations]
			.
		
		
image::activate_pde_ds_annotations.png" scale="40[Activate DS annotation processing
					,pdfwidth=60%]
		

	



=== Deactivate your ITodoService OSGi service
		
			Deactivate your OSGi service for the
			`ITodoService`
			which you have created in
			<xref linkend="tutorial_e4services_usage" />
			. You can do this, by
			To remove this service, deleting the
			annotation from the
			`MyTodoServiceImpl`
			.
		

		NOTE:
			
				You could leave your OSGi service for the
				`ITodoService`
				active. Eclipse evaluates
				context
				functions
				before checking for
				other OSGi
				services. But it is good
				practice to
				remove
				things which
				are not used anymore.
			
		</note>

	

=== Notifications from the ITodoService
		
			Change the
			`MyTodoServiceImpl`
			class to get the
			`IEventBroker`
			injected and to send out events in case of changes in the data model.
		
		
[source,java]
----
include::res/contextfunction/MyTodoServiceImpl.java[]
----
		

	

=== Clean-up your user interface code

		
			In the previous exercise
			you send out
			events directly from your
			`NewTodoHandler`
			. This is considered bad practice as the user interface would be
			responsible for sending out updates for data model
			changes.
		
		
			Now that you move this logic to the implementation of the
			`ITodoService`
			you can remove this code.
			Thus remove all event notification calls
			from
			your plug-in.
			The following code shows the new
			`NewTodoHandler`
			handler implementation.
		
		
[source,java]
----
include::res/contextfunction/NewTodoHandler.java[]
----
		

	


=== Validating
		
			Validate that the user interface still receives all events for model
			changes. For
			example, does the table in the
			`TodoOverviewPart`
			class
			still update when a new
			`Todo`
			is created by the wizard?
		
		
			If you delete a
			`Todo`
			object via your menu, this should also update the table.
		
	


=== Error analysis in case something does not work
		
			The generated component xml file
			file should look similar to the following (except the additional
			whitespace).
		

		
[source,java]
----
include::res/contextfunction/service.xml[]
----
		

		Every service defined by OSGi declarative services must have a
			unique name.
		
		Start your application. If you see the error that your have
			duplicate names, change the name of the new
			service
			to
			avoid a name
			collision with
			your
			existing OSGi service.
		

		
			If the service still fails ensure that the service property is
			correctly entered. See
			<xref linkend="tutorial_contextfunction_servicekey" />
			for details.
		

	

=== Review implementation
		This implementation is better compared to the event notification
			via
			the user interface code. It places the
			responsibility of sending
			out the relevant
			events
			into the corresponding service.
		
		The developer needs only to register for the
			correct events to
			update the relevant user interface controls.
		


	
</chapter>


