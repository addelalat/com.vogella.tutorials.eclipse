
	<title>Source navigation in the Eclipse IDE
[[sourcenavigation_packageexplorer">
=== Package Explorer or Project Explorer
		<indexterm>
			<primary>Package Explorer view</primary>
			<secondary>navigation
			</secondary>
		</indexterm>
		<indexterm>
			<primary>Package Explorer view</primary>
			<secondary>filter resources
			</secondary>
		</indexterm>
		
			The primary way of navigating through your project is the
			_Package Explorer_
			or alternatively the
			_Project Explorer_
			view. You can open nodes in the tree and open a file in an editor
			by
			double-clicking on the corresponding entry in the
			tree hierarchy.
		
		
image::packageexplorer10_display.png" scale="40" />
				</imageobject>
				<textobject>
					<phrase>Package Explorer display,pdfwidth=60%]
		

		
			The drop-down menu in the
			_Package Explorer_
			allows you to filter
			the resources which should be displayed or
			hidden.
		

		
image::packageexplorer20_filter.png" scale="40" />
				</imageobject>
				<textobject>
					<phrase>Filter in the package explorer,pdfwidth=60%]
		

		
image::packageexplorer22_filter.png" scale="40" />
				</imageobject>
				<textobject>
					<phrase>Filter in the package explorer,pdfwidth=60%]
		

	

[[packageexplorerlinkwitheditor">
=== Link Package Explorer with editor
		<indexterm>
			<primary>Package Explorer view</primary>
			<secondary>link with active editor
			</secondary>
		</indexterm>
		
			The
			_Package Explorer_
			view
			allows you to display the associated file from
			the
			currently selected
			editor. For example, if you are working on the
			<code>Foo.java</code>
			file in the Java
			_editor_
			and
			switch to the Java
			_editor_
			of the
			<code>Var.java</code>
			file,
			then the corresponding file will be selected in
			the
			_Package Explorer_
			view.
		

		
			To activate this behavior, press the
			<guibutton>Link with Editor</guibutton>
			button in
			the
			_Package
				explorer
			_
			view
			as depicted in the following screenshot.
		

		
image::editorsyncpackage10.png" scale="40" />
				</imageobject>
				<textobject>
					<phrase>Synchronize the package explorer selectioni with the
						current selected
						editor
					,pdfwidth=60%]
		
	



[[classnavigation">
=== Opening a class
		
			You can navigate between the classes in your project via the
			_Package
				Explorer
			_
			view
			as described before. You can navigate the tree and open a file via
			a double-click.
		
		
			In addition, you can open any class by positioning the cursor
			on
			the
			class
			in
			an editor and pressing
			<keycombo>
				<keycap>F3</keycap>
			</keycombo>
			. Alternatively, you can
			press
			<keycombo>
				<keycap>Ctrl</keycap>
				<keycap>Shift</keycap>
				<keycap>T</keycap>
			</keycombo>
			. This shows the following dialog in which you can enter the
			class name
			to open
			it.
		
		
image::classopen10.png" />
				</imageobject>
				<textobject>
					<phrase>Opening a class</phrase>

				</textobject>
			</mediaobject>
		
		
			You can also search for package names. Each part of the package name
			must end with a
			<parameter>.</parameter>
			(the
			_dot_
			character)
			so that the
			_Open Type Dialog_
			can identify it as a package.
		
		<tip>
			
				You only need to specify part of each
				segment of the package name.
				Assume, for example, that you search for
				the
				<parameter>org.eclipse.swt.widgets.Button</parameter>
				class. To
				find this class, you can use the search term
				<parameter>org.eclipse.swt.widgets.Button</parameter>
				or
				<parameter>o.e.s.w.Button</parameter>
				or
				<parameter>o.Button</parameter>
				.
			
		</tip>

		
image::classopen20.png" />
				</imageobject>
				<textobject>
					<phrase>Opening a class with package name,pdfwidth=60%]
		
		
			The
			_Open Type Dialog_
			also supports
			_CamelCase_
			like
			search, e.g., it matches capital letters in the class name. For
			example, if you would search for the
			<code>OnTouchListener</code>
			class you could use
			<parameter>OTL</parameter>
			or
			<parameter>OToList</parameter>
			as search term.
		

		
image::classopen30.png" />
				</imageobject>
				<textobject>
					<phrase>Opening a class with CamelCase,pdfwidth=60%]
		
		<tip>
			
				To avoid suffix matching, you can add a space after the class name.
				For
				example, you can type
				<parameter>Selection</parameter>
				(there is a space after selection) to match the
				<code>Selection</code>
				class but not the
				<code>SelectionListener</code>
				class. Wildcards like * are also supported.
			
		</tip>
	
[[resourcenavigation_openresourcedialog">
=== Open Resource dialog to open arbitrary files
		<indexterm>
			<primary>Resource</primary>
			<secondary>opening dialog
			</secondary>
		</indexterm>
		<indexterm>
			<primary>Open Resource dialog</primary>
		</indexterm>
		
			You can open any file from your open projects via the
			_Open Resource_
			dialog. You can open this dialog via the
			<keycombo>
				<keycap>Ctrl</keycap>
				<keycap>Shift</keycap>
				<keycap>R</keycap>
			</keycombo>
			shortcut. This dialog allows to enter the file name
			and to open or show it in a selected view. The following
			screenshot demonstrate the usage to open a pom.xml file from your workspace.
		
		
image::openresourceeclipse10.png" scale="40" />
				</imageobject>
				<textobject>
					<phrase>Open resources in Eclipse,pdfwidth=60%]
		

	

[[sourcenavigation_quickoutline">
=== Quick Outline
		<indexterm>
			<primary>Quick Outline</primary>
		</indexterm>
		
			_Quick Outline_
			shows you an structured overview of the file you are editing.
			For example, for a Java class you see its methods with
			the
			option
			to filter.
			The shortcut for opening the
			_Quick Outline_
			is
			<keycombo>
				<keycap>Ctrl</keycap>
				<keycap>O</keycap>
			</keycombo>
			. You can also reach this option, via right-click in an editor via the
			_Quick Outline_
			option.

		

		
			By default,
			_Quick Outline_
			shows only the direct members and fields of the Java class. Press
			<keycombo>
				<keycap>Ctrl</keycap>
				<keycap>O</keycap>
			</keycombo>
			again to show also the inherited members and fields.
		
		
			The default look of the
			_Quick Outline_
			option is similar to the
			_Quick Outline_
			view
			of the
			_Java_
			_perspective_
			.
		
	
[[sourcenavigation_type_hierarchy">
=== Open Type Hierarchy
		<indexterm>
			<primary>Type Hierarchy</primary>
			<secondary>open
			</secondary>
		</indexterm>
		
			The type hierarchy of a class shows you which classes it extends
			and
			which interfaces it implements. You can use
			the type hierarchy to
			navigate to one of these elements.
		
		
			To open the type
			hierarchy of the
			selected class, right-click
			in
			the
			editor and
			select
			_Open Type Hierarchy_
			(Shortcut:
			<keycombo>
				<keycap>F4</keycap>
			</keycombo>
			) or
			_Quick Type Hierarchy_
			(Shortcut:
			<keycombo>
				<keycap>Ctrl</keycap>
				<keycap>T</keycap>
			</keycombo>
			).
		
	
[[sourcenavigation_textsearch">
=== Full text search
		<indexterm>
			<primary>Search dialog</primary>
		</indexterm>
		
			You frequently need to find files containing certain text or other meta data. Via the
			menu:
Search[Search]
			menu (Shortcut:
			<keycombo>
				<keycap>Ctrl</keycap>
				<keycap>H</keycap>
			</keycombo>
			) you can open the search dialog of Eclipse. Use the
			_File Search_
			tab to search for text with the option to use regular expressions and also to replace matching entries.
		
		
image::javasearchdialog30.png" />
				</imageobject>
				<textobject>
					<phrase>Text search,pdfwidth=60%]
		

		
			Eclipse associates file extensions with the default tab. You can
			customize the available search tabs via the
			_Customize_
			button in the Search dialog. Via the
			_Remember the last used page_
			you can configure Eclipse to use your last tab as default.
		


		
image::customizesearch10.png" />
				</imageobject>
				<textobject>
					<phrase>Customize search,pdfwidth=60%]
		

		
image::customizesearch20.png" />
				</imageobject>
				<textobject>
					<phrase>Customize search,pdfwidth=60%]
		

	

[[sourcenavigation_othersearch">
=== Java search and other specialized searches

		
			The Search functionality (
			<keycombo>
				<keycap>Ctrl</keycap>
				<keycap>H</keycap>
			</keycombo>
			) others specialized searches for more complex use cases.
			For example, use the
			_Java Search_
			tab to search for Java elements, e.g.,
			methods.
		
		
image::javasearchdialog10.png" />
				</imageobject>
				<textobject>
					<phrase>Text search,pdfwidth=60%]
		
		
			The
			_Search_
			view
			shows the search results for the selected scope. You can
			double-click
			on a
			search
			entry to navigate to the
			corresponding
			position in the
			editor. The currently selected search result is also indicated via an
			arrow in the left
			border of the editor.
		
		
image::javasearchdialog20.png" />
				</imageobject>
				<textobject>
					<phrase>Text search,pdfwidth=60%]
		

	

[[sourcenavigation_incrementalfind">
=== Inline search in an editor
		<indexterm>
			<primary>Incremental find</primary>
		</indexterm>
		
			You can use the
			<keycombo>
				<keycap>Ctrl</keycap>
				<keycap>J</keycap>
			</keycombo>
			shortcut to activate
			_Incremental Find_
			. This allows you to search in the current active editor for a text
			which is displayed in the status line as depicted
			by the following
			screenshot. Repeat
			<keycombo>
				<keycap>Ctrl</keycap>
				<keycap>J</keycap>
			</keycombo>
			in order to move to the next
			occurrence of the current search term.
		

		
image::incrementalsearch10.png" scale="30" />
				</imageobject>
				<textobject>
					<phrase>Incrementation search,pdfwidth=60%]
		
		The advantage of this search is that no pop-up dialog is opened
			which blocks other elements in the Eclipse IDE.
		

		
			If you have selected an element in the editor, you can use the
			<keycombo>
				<keycap>Ctrl</keycap>
				<keycap>K</keycap>
			</keycombo>
			shortcut to search for the next occurrence of the selected text and
			<keycombo>
				<keycap>Ctrl</keycap>
				<keycap>Shift</keycap>
				<keycap>K</keycap>
			</keycombo>
			for the previous element.
		
	
[[sourcenavigation_annotations">
=== Annotation navigations
		You can also navigate via the annotation buttons, e.g., for
			jumping
			to the next error or warning in your source
			code.
		

		
image::navigation_annotations10.png" scale="40" />
				</imageobject>
				<textobject>
					<phrase>Annotation navigation,pdfwidth=60%]
		
		
			By pressing the buttons you can navigate to the related
			annotations.
			You can also use the keyboard shortcut
			<keycombo>
				<keycap>Ctrl</keycap>
				<keycap>.</keycap>
			</keycombo>
			(Ctrl plus the dot sign)
			for selecting the next annotation or
			<keycombo>
				<keycap>Ctrl</keycap>
				<keycap>,</keycap>
			</keycombo>
			(Ctrl plus the comma sign)
			for selecting the previous annotation.

		
		The following screenshot shows source code with two warnings
			and
			one error and you can navigate between the
			corresponding code via the
			annotation buttons.
		
		
image::annotationsnavigation30.png" scale="40" />
				</imageobject>
				<textobject>
					<phrase>Moving in the source code,pdfwidth=60%]
		
		Which annotations are relevant for navigation can be configured
			via the drop-down menu of the toolbar. This
			selection is highlighted
			in the following screenshot.
		
		
image::navigation_annotations20.png" scale="40" />
				</imageobject>
				<textobject>
					<phrase>Annotation navigation,pdfwidth=60%]
		
	
[[sourcenavigation_mouse">
=== Mouse and keyboard navigation
		
			In a lot of cases you can also use the mouse to navigate to or
			into an
			element if you press the
			<keycombo>
				<keycap>Ctrl</keycap>
			</keycombo>
			key. For example, press the
			<keycombo>
				<keycap>Ctrl</keycap>
			</keycombo>
			key and (left) click with the mouse on the name of a class to jump
			into the class
			declaration.
		
		
			Similar to the left mouse click combined with the
			<keycombo>
				<keycap>Ctrl</keycap>
			</keycombo>
			,
			you can use the
			<keycombo>
				<keycap>F3</keycap>
			</keycombo>
			key to go into a class.
		
	
[[sourcenavigation_breadcrumb">
=== Show in Breadcrumb
		<indexterm>
			<primary>Java editor</primary>
			<secondary>breadcrumb
			</secondary>
		</indexterm>
		<indexterm>
			<primary>Breadcrumb</primary>
		</indexterm>
		
			You can also activate the
			_breadcrumb_
			mode for the Java editor
			which allows you to navigate the source code
			directly from the Java
			editor.
		
		
			You can activate this mode via right-click in the editor and by
			selecting the
			_Show in Breadcrumb_
			entry.
		
		
image::breadcrumb10.png" />
				</imageobject>
				<textobject>
					<phrase>Show in Breadcrumb,pdfwidth=60%]
		
		This allows you to navigate the source code from the editor as
			depicted in the following screenshot.
		
		
image::breadcrumb20.png" />
				</imageobject>
				<textobject>
					<phrase>Breadcrumb view,pdfwidth=60%]
		
		
			To hide it again, right-click on a breadcrump entry and select
			_Hide Breadcrumb_
			.
		

		
image::breadcrumb30.png" />
				</imageobject>
				<textobject>
					<phrase>Breadcrumb view,pdfwidth=60%]
		
	
[[sourcenavigation_shortcuts">
=== Shortcuts
		
			There are a lot of shortcuts available for navigation.
			Please
			check
			the appendix of this $book for these shortcuts or
			open
			menu:Window</guimenu>Preferences[General > Keys]
			to find and redefine shortcuts at
			runtime.
		
	

[[packageexplorer_closeprojects">
=== Closing and opening projects
		<indexterm>
			<primary>Package Explorer view</primary>
			<secondary>close projects
			</secondary>
		</indexterm>
		<indexterm>
			<primary>Package Explorer view</primary>
			<secondary>open projects
			</secondary>
		</indexterm>
		
			Closing projects saves memory in Eclipse and can reduce the build
			time. Eclipse ignores closed
			projects, e.g., all
			searches ignore files from closed projects. Also the
			_Problems_
			view
			does only shows errors of opened projects. This typically helps you
			focus your attention on the project. You can
			close projects via a right-click on it and by selecting the
			_Close Project_
			menu entry.
			Alternatively, if you work on a project, you can close all
			unrelated
			projects via a right-click on it and by
			selecting the
			_Close Unrelated Projects_
			menu entry.
		

		
			To open a
			closed project double-click on it, or right-click it
			and
			select
			_Open Project_
			.
		
		
			You can
			use the filter functionality for the
			_Package Explorer_
			view
			to hide the closed projects.
		

	


