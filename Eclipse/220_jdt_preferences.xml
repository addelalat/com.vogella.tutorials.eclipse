
	<title>Exercise: Configuring the IDE for an improved development experience
[[tutorial_eclipsesetup_configuration">
=== Why adjusting the Eclipse default configuration?
		
			The Eclipse IDE is relatively conservative configured to avoid
			surprises during development. Certain settings in
			the Eclipse IDE allow you to use it
			more
			efficiently. In this exercise you
			make changes to
			the default Eclipse
			IDE
			settings to your personal usability with the
			Eclipse IDE. If you find a setting in this exercise not working for you,
			you
			can always skip
			that setting.
		
	

[[tutorial_eclipsesetup_linkwitheditor">
=== Link Java editor with the Package Explorer view
		
			You can synchronize the currently selected
			Java editor with the
			selection in the
			_Package Explorer_
			view. This gives you a clearer visibility which object you are
			currently
			editing.
		
		
			Enable this by selecting the corresponding button in the
			_Package Explorer_
			view.
		
		
image::linkwitheditor10.png" scale="60" />
				</imageobject>
				<textobject>
					<phrase>Editor,pdfwidth=60%]
		
	


[[preferences_semicolon">
=== Automatic placement of semicolon
		<indexterm>
			<primary>Preferences</primary>
			<secondary>automatic placement of semicolon
			</secondary>
		</indexterm>
		 Eclipse can make typing more efficient by placing semicolons
			at
			the correct position in your source code.
		

		
			In the Preference setting select
			menu:Java[Editor > Typing]
			. In the
			_Automatically insert at correct position_
			selection
			enable
			the
			_Semicolons_
			checkbox.
		

		
			<mediaobject>
				<imageobject>
					<imagedata scale="50" fileref="images/wayofworking10.png" />
				</imageobject>
				<textobject>
					<phrase>Type Assists which allow setting the semicolon to the
						right
						position
					,pdfwidth=60%]
		
		Afterwards, you can type a semicolon in the middle of your code
			and
			Eclipse will position it at the end of the
			current statement.
		
	

[[tips_escape">
=== Auto-escape text pasted into Strings
		<indexterm>
			<primary>Preferences</primary>
			<secondary>auto escape text pasted into Strings
			</secondary>
		</indexterm>
		Eclipse allows you to escape text automatically if it is pasted
			into
			a String literal. For example, you can copy
			HTML code and paste
			it
			into
			a String in your Java source. Eclipse would escape the text
			automatically for you.
		
		
			Activate this setting via
			menu:Window[Preferences > Java > Editor > Typing > In string literals > Escape text when pasting
					into string literal
				]
		
		Now you can paste text that should be escaped. The
			following code
			snippet shows an example for the resulting code
			if you
			paste
			HTML code
			containing a link into a string literal.
		

		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="../examples/escape/Paste1.txt" />
			</programlisting>
		

	

[[tips_brackets">
=== Bracket highlighting
		<indexterm>
			<primary>Preferences</primary>
			<secondary>bracket highlighting
			</secondary>
		</indexterm>
		You can configure Eclipse to highlight the matching brackets of
			a code block in the source code editor.
		

		
image::jdtbrackets10.png" scale="30" />
				</imageobject>
				<textobject>
					<phrase>Highlight the enclosing brackets in JDT,pdfwidth=60%]
		
		Before the change you would not see the enclosing brackets.
			Afterwards, they will be slightly highlighted. This
			helps to see in
			which block you are.
		
		
image::jdtbrackets20.png" />
				</imageobject>
				<textobject>
					<phrase>Without highlight the enclosing brackets in JDT,pdfwidth=60%]
		

		
image::jdtbrackets30.png" />
				</imageobject>
				<textobject>
					<phrase>With highlight the enclosing brackets in JDT,pdfwidth=60%]
		
	

[[tips_autoformatimport">
=== Code cleanup during save via save actions
		<indexterm>
			<primary>Preferences</primary>
			<secondary>save action</secondary>
		</indexterm>
		
			Eclipse can cleanup your code and format it automatically during save (shortcut:
			<keycombo>
				<keycap>Ctrl</keycap>
				<keycap>S</keycap>
			</keycombo>
			).
			You can find
			the corresponding
			settings under
			menu:Window[Preferences</guisubmenu>Java[Editor > Save Actions]
			.
		
		
			Here you can define the actions which should be performed during save and via the
			_Configure..._
			button you can configure the code cleanup actions which should be performed.
		
		
			<mediaobject>
				<imageobject>
					<imagedata scale="50" fileref="images/wayofworking30.png" />
				</imageobject>
				<textobject>
					<phrase>Save Actions,pdfwidth=60%]
		
		
			Import statements are only automatically created if
			where is one valid import. If Eclipse determines more
			than
			one valid
			import, it will not add import statements automatically. In this case
			you still need to right-click in
			your editor and
			select
			menu:Source[Organize Imports]
			(shortcut:
			<keycombo>
				<keycap>Shift</keycap>
				<keycap>Ctrl</keycap>
				<keycap>O</keycap>
			</keycombo>
			).
		
	

[[tutorial_eclipsesetup_launchconfig">
=== Launch configuration
		
			In the Eclipse preferences dialog select the
			_Launch the previously launched application_
			option in the
			menu:Run/Debug[Launching]
			setting.
		
		
image::exercise_lauchprevious11.png" scale="30" />
				</imageobject>
				<textobject>
					<phrase>Launch previous launched application,pdfwidth=60%]
		

	
[[tips_filterimports">
=== Type Filters
		<indexterm>
			<primary>Preferences</primary>
			<secondary>filter import statements
			</secondary>
		</indexterm>
		
			The
			_Save Actions_
			setting
			automatically adds required import statements to your source
			code
			if there is only one possible import.
		
		
			Alternatively, or if there are several possible imports, you can use
			the
			_Organize Imports_

			(shortcut:
			<keycombo>
				<keycap>Ctrl</keycap>
				<keycap>Shift</keycap>
				<keycap>O</keycap>
			</keycombo>
			).
			If
			there are several
			alternatives, Eclipse
			suggests all available
			packages and
			the user has
			to
			select the right
			one.
		
		
			The following shows the available packages for the
			<code>List</code>
			class in the
			_Organize Imports_
			dialog.
		
		
image::importpackages10.png" />
				</imageobject>
				<textobject>
					<phrase>Dialog for selecting the correct import statement,pdfwidth=60%]
		
		
			If you never use certain packages, for example AWT or Swing, you can
			exclude
			these packages from Eclipse via the
			menu:Window[Preferences > Java > Appearance > Type Filters]
			setting.
		
		
			Press the
			<guibutton>Add packages</guibutton>
			button
			to add a specific package or the
			<guibutton>Add...</guibutton>
			button
			to use
			wildcards. The setting in the following screenshot
			excludes all
			AWT packages from the
			possible imports and
			other Java
			search
			functionality
			in Eclipse.
		
		
image::importpackages20.png" />
				</imageobject>
				<textobject>
					<phrase>Filtering packages from the Eclipse import,pdfwidth=60%]
		
		Please note that Eclipse shows (in its default configuration)
			only the packages that are
			used in the current
			workspace. If you want
			to exclude standard Java
			packages, you have to create at least one
			Java
			project.
		
	
[[tips_completion">
=== Completion overwrites and insert guessed method arguments
		
		<indexterm>
			<primary>Preferences</primary>
			<secondary>Completion overwrites and insert guessed method arguments
			</secondary>
		</indexterm>
		Eclipse can override existing method calls, in case you trigger
			a code completion in an existing statement.
			Eclipse can also try to
			guess
			the correct actual
			parameters for a method call.
		

		
image::jdt_completion04.png" scale="30" />
				</imageobject>
				<textobject>
					<phrase>JDT completion,pdfwidth=60%]
		

		
			With the first setting you can override methods in the middle of
			a
			statement via the
			<keycombo>
				<keycap>Ctrl</keycap>
				<keycap>Space</keycap>
			</keycombo>
			code assists shortcut.
		

		
image::jdt_completion08.png" />
				</imageobject>
				<textobject>
					<phrase>Trigger code completion,pdfwidth=60%]
		
		Without this setting you would get the following result, which
			results in a syntax error.
		
		
image::jdt_completion20.png" />
				</imageobject>
				<textobject>
					<phrase>JDT completion,pdfwidth=60%]
		
		With this setting you get the following result.
		
image::jdt_completion10.png" />
				</imageobject>
				<textobject>
					<phrase>Result,pdfwidth=60%]
		

	

[[tips_codecompletionactivationkey">
=== Auto activation key for code completion

		
			The Eclipse IDE is configured to give you automatic code completion
			suggestion only after the . sign. Typically you
			want to have code
			completion on every character. Open again the
			menu:Window[Preferences > Java > Editor > Content Assists]
			preference setting and enter
			.abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVXYZ in the
			_Auto activation trigger for Java_
			.
		
		
image::jdt_contentassists20.png" scale="40" />
				</imageobject>
				<textobject>
					<phrase>Auto activation key for code completion,pdfwidth=60%]
		
	



