

	<title>Persisted model attributes
[[supplementary_elements">
=== Adding additional information on the model elements
		<indexterm>
			<primary>Supplementary data</primary>
		</indexterm>
		
			The
			_Supplementary_
			tab in the application model editor allows you to enter additional
			information
			about the selected
			model element. This data can also be
			modified and accessed via Eclipse API.
		
	

[[supplementary_tags">
=== Tags
		<indexterm>
			<primary>Tags</primary>
		</indexterm>
		
			All model elements can have
			_tags_
			assigned to them.
			These
			tags
			can be used by the Eclipse platform or by
			other code to trigger
			functionality.
		
		
			Tags
			are automatically persisted by the Eclipse runtime between
			application restarts and are
			represented as a
			<code>List</code>
			of type
			<code>String</code>
			.
		
		<tip>
			
				Tags are also available to the CSS Engine as additional class
				selectors.
				For
				example, the currently active part is tagged as
				<parameter>active</parameter>
				at runtime
				and the CSS engine allows to style components
				based on
				this with the
				selector
				<code>.MPartStack.active</code>
				. If you want to use tag as CSS selectors, don't use whitespace in
				them.
			
			
				You can define your own tags and define CSS for this. This is a
				great way to allow custom CSS to be
				integrated into
				the
				model.
			
		</tip>
		
			By default, Eclipse uses some predefined
			<parameter>tags</parameter>
			to determine the state of certain model elements. For example, the
			<parameter>shellMaximized</parameter>
			and
			<parameter>shellMinimized</parameter>
			tag on a
			_Window_
			is used by Eclipse to determine if the
			_Window_
			should be maximized or minimized.
		
		
			The following screenshot shows how to define the
			maximization of a
			_Window_
			model element.
		
		
image::supplementary10.png[Supplementary info for a Window to set it to maximize.,pdfwidth=60%]
		
		
			You find more information about the default tags in
			<xref linkend="recipes_tags" />
			.
		
	

[[supplementary_variables">
=== Variables
		
			You can also define
			_Variables_
			in the
			_Supplementary_
			tab which can be used as
			_context variables_
			. If you use this approach, Eclipse creates keys in the context which
			are marked as modifiable (by descendants).
			See
			<xref linkend="dependencyinjectione4" />
			for the concept of dependency injection
			and see
			<xref linkend="chaptereclipsecontext" />
			to learn more about
			context variables.
		
	

[[supplementary_persistence">
=== Persisted state
		<indexterm>
			<primary>Persisted state</primary>
		</indexterm>
		
			Model elements can have persisted state key/value pairs assigned
			to them. If you
			retrieve the model element, you can get and set this
			persisted state.
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/supplementary/persists.java" />
			</programlisting>
		
		
			Persisted data for model elements is automatically restored by
			the Eclipse
			application between application restarts and allows to
			store key/values pairs based on Strings.
		
		
			Persisted state data can also be used by the Eclipse framework
			to
			define or change the application behavior.
		
	

[[transientdata">
=== Transient data
		<indexterm>
			<primary>Transient data</primary>
		</indexterm>
		
			Each model element can also attach transient data to it.
			This
			transient data is based on a
			<code><![CDATA[Map<String , Object>]]></code>
			structure and can be accessed on the model object via the
			<code>getTransientData()</code>
			method.
		
		
			Transient data is not persisted between application restarts and
			needs to be generated at
			runtime.
		
		
			As transient data is not persisted, it can not be assigned to
			model
			elements via the application model editor, you need to use the
			<code>getTransientData()</code>
			method.
		
	


