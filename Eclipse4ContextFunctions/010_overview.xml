
	<title>Context functions
[[icontextfunction_definition">
=== What are context functions?
		<indexterm>
			<primary>Context function</primary>
		</indexterm>
		
			A
			_context function_
			is an OSGi service which has access to the
			<code>IEclipseContext</code>
			. It
			allows you to lazily create an object for a given key if this key
			is
			not contained in the relevant
			<code>IEclipseContext</code>
			.
		

		
			The context
			function registers itself for a certain key, for
			example a
			class
			name.
			Whenever the Eclipse
			dependency
			injection does not find an
			existing object
			under this key, it calls the
			<code>compute()</code>
			method of the object registered as context function.
		
		
image::contextfunctionoverview10.png[Context function query,pdfwidth=60%]
		

		
			In this
			<code>compute()</code>
			method the context function creates
			the requested
			object. As input you
			receive the local
			<code>IEclipseContext</code>
			in which the injection was invoked and the requested key.
		

		
			It can also
			persist the created object into the
			context so that
			successive calls will return the same generated
			object.
		

	
[[icontextfunction_creation">
=== Creation of a context function
		<indexterm>
			<primary>IContextFunction</primary>
		</indexterm>
		
			Context functions
			are typically contributed as OSGi services. They
			extend the
			<code>ContextFunction</code>
			class from the
			<code>org.eclipse.e4.core.contexts</code>
			package. The Eclipse runtime adds
			context functions
			by default to the
			application context.
		
		
			They register itself as OSGi service for the
			<code>IContextFunction</code>
			interface.
		
		<tip>
			
				Question: Why should you register your service for the
				<code>IContextFunction</code>
				interface
				but extend the
				<code>ContextFunction</code>
				class?
			
			
				Answer:
				If the interface gets another method in a later
				Eclipse
				release
				your
				service continues to work, as the abstract
				class
				<code>ContextFunction</code>
				can provide a default implementation.
			
		</tip>
		
			You need to specify the key the context function is responsible for. This is done via the
			<parameter>service.context.key</parameter>
			property in the service definition.
		
		
			If the key is a class you have to point to the fully qualified class.
			This key can
			be used for dependency
			injection.
			If
			you register a key which is not a class name, a consumer of
			the injection would
			have to use
			the
			<code>@Named</code>
			annotation to specify the key.
		
	
[[icontextfunction_example">
=== Examples for context function registrations
		
			The following example shows the declaration of a
			context function.
			This
			function is available in the application context
			and responsible
			for
			the
			<code>vogella</code>
			key.
		
		
			<programlisting language="xml">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/contextfunctions/component.adoc[]
			</programlisting>
		
		This key can be used for dependency injection as demonstrated in
			the following example.
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/contextfunctions/Inject.java" />
			</programlisting>
		

		The following example demonstrates a possible implementation of
			this context function which used OSGi DS annotations.
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/todo/Todo.java" />
			</programlisting>
		

	
[[icontextfunction_evaluation">
=== When to use context functions?
		
			Using
			context functions
			instead of a OSGi services has the
			advantage
			that these functions
			have
			access to the
			<code>IEclipseContext</code>
			hierarchy. They have access to the context in which the dependency
			injection was called.
		
		
			This allows them to lazily create objects using values from the
			context.
		
		
			Standard OSGi services
			have no direct access to
			the
			<code>IEclipseContext</code>
			.
		

	

[[icontextfunction_publishingtoosgi">
=== Publishing to the OSGi service registry from a context function
		
		
			OSGi services may need to access the objects created by a
			context
			function. In this case you can also publish an
			OSGi service
			from a
			context
			function.
		
		
			The
			following example demonstrates how to publish an
			implementation into
			the
			<code>IEclipseContext</code>
			and to the OSGi service registry.
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text"
					href="./examples/todo/TodoServiceContextFunctionOSGi.java" />
			</programlisting>
		


	


