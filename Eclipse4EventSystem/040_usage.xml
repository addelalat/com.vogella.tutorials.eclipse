<section id="eventsystem_usage">
	<title>Sending and receiving events</title>
	<section id="eventsystem_usagesend">
		<title>Sending</title>
		<indexterm>
			<primary>Event service</primary>
			<secondary>Sending events</secondary>
		</indexterm>
		<para>
			The
			event
			service can be injected via dependency injection.
		</para>

		<para>
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/eventadmin/inject.txt" />
			</programlisting>
		</para>

		<para>
			The following code examples assume that you have a class named
			<wordasword>MyEventConstants</wordasword>
			defined which contains a static final field (constant) for the
			<code>TOPIC_TODO_NEW</code>
			string.
		</para>
		<para>
			The event service collects all events and
			sends them
			to the
			registered components.
			This can be done
			asynchronously or
			synchronously.
		</para>

		<para>
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/eventadmin/asend.java" />
			</programlisting>
		</para>

		<para>
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/eventadmin/ssend.java" />
			</programlisting>
		</para>

		<para>You can now send arbitrary Java objects or primitives through
			the
			event
			bus.
		</para>
	</section>
	<section id="eventsystem_annotations">
		<title>Annotations for receiving events</title>
		<indexterm>
			<primary>Event service</primary>
			<secondary>Annotations</secondary>
		</indexterm>
		<indexterm>
			<primary>Event service</primary>
			<secondary>Receiving events via annotations</secondary>
		</indexterm>
		<indexterm>
			<primary>@UIEventTopic</primary>
		</indexterm>
		<indexterm>
			<primary>@EventTopic</primary>
		</indexterm>
		<para>
			You can use dependency injection to register and respond to
			events.
			If dependency injection is used, the Eclipse framework
			automatically
			removes all
			event subscriptions
			when the model class
			is
			disposed.
		</para>
		<para>
			The
			<code>@EventTopic</code>
			and
			<code>@UIEventTopic</code>
			annotations tag methods and fields that should be notified on event
			changes. The
			<code>@UIEventTopic</code>
			ensures the event notification is
			performed
			in the user interface
			thread.
		</para>

		<para>
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/events/register.java" />
			</programlisting>
		</para>

	</section>
	<section id="eventsystem_listeners">
		<title>Registering listeners for events</title>
		<indexterm>
			<primary>Event service</primary>
			<secondary>Listener</secondary>
		</indexterm>
		<para>
			An object can also register an instance of the
			<code>org.osgi.service.event.EventHandler</code>
			directly with
			the
			<code>IEventBroker</code>
			interface
			via the
			<code>subscribe()</code>
			method. But this subscription has also to be unsubscribed manually
			afterward by using
			the
			<code>unsubscribe()</code>
			method.
		</para>
		<tip>
			<para>Using dependency injection for subscribing should be
				preferred
				compared to the direct subscription as this way the
				framework handles
				the listener registration and de-registration
				automatically for you.
			</para>
		</tip>
		<para>
			While using dependency injection is usually the better approach,
			it is sometimes useful to control when to listening to events. An
			example is the situation, when an event should result in a certain
			behavior only once.
		</para>
		<para>
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/events/LazyLoadingAddon.java" />
			</programlisting>
		</para>
	</section>
	<section id="eventsystem_objectstobesendout">
		<title>Which objects should be send out?</title>
		<para>
			The event system allows sending and receiving objects of an arbitrary
			type.
			In Eclipse applications it is good
			practice to send out events
			with a
			<code>java.util.Map</code>
			type because a similar type is also used by the Eclipse framework for
			sending out events. A
			<code>Map</code>
			class can be configured with properties to contain more data about
			the event.
		</para>
	</section>
	<section id="eventsystem_eventsubscription">
		<title>Subscribing to sub-topics</title>
		<indexterm>
			<primary>Event service</primary>
			<secondary>Sub-topics</secondary>
		</indexterm>
		<para>
			You can subscribe to specific topics or use wildcards to
			subscribe to
			all sub-events. Sub-events are separated by
			<code>/</code>
			. The following example code defines several topics and also the
			<code>TOPIC_TODO_ALLTOPICS</code>
			constant which can be used to register for all sub-events.
		</para>
		<para>
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/events/MyEventConstants.java" />
			</programlisting>
		</para>

	</section>

</section>
