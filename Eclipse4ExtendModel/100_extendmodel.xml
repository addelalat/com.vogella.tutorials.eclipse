
	<title>Exercise: Extend the Eclipse application model
[[e4modelextend_model_target">
=== Target
		
			In this exercise you extend the structure of the Eclipse
			application model with an additional model element.
		
	
[[e4modelextend_model1">
=== Creating a plug-in and add the dependencies
		
			Create a new simple plug-in called
			_com.vogella.e4.appmodel.extensions_
			.
		
		
image::appmodel_projectwizard10.png"
						scale="40" />
				</imageobject>
				<textobject>
					<phrase>Wizard to create a simple plug-in,pdfwidth=60%]
		
		
			Add a dependency to the plug-ins
			<code>org.eclipse.e4.ui.model.workbench</code>
			and
			<code>org.eclipse.e4.core.contexts</code>
			in your new plug-in via its
			<filename>MANIFEST.MF</filename>
			file.
		
	
[[e4modelextend_model2">
=== Create new model
		
			Create a folder called
			<filename class="directory">model</filename>
			and create a new EMF model called
			<filename>UiExtensions.ecore</filename>
			via
			menu:File[New > Other... > Eclipse Modeling Framework > EMF Model]
			.
		
		
image::emf_appmodel10.png[Create the EMF model,pdfwidth=60%]
		
		
image::emf_appmodel20.png[To create the EMF model, select this page of the wizard,pdfwidth=60%]
		
		
			Press the
			<guibutton>Finish</guibutton>
			button.
		
		
			Enter the following properties for this plug-in via the
			_Properties_
			view.
		
		
image::emf_appmodel30.png[Package settings,pdfwidth=60%]
		
	
[[e4modelextend_model3">
=== Define relationships to the Eclipse application model
		
			Right-click on the model and select
			_Load Resource..._
			.
		
		
image::renderermodel10.png"/>
				</imageobject>
			</mediaobject>
		
		
			Click on the button
			<guibutton>Browse Registered Packages</guibutton>
			and select the
			<parameter>*UiModel/application</parameter>
			model from the
			<parameter>org.eclipse.e4.ui.model.workbench</parameter>
			plug-in.
		
		
image::renderermodel30.png[Define connections to an existing model, part 1,pdfwidth=60%]
		
		
image::renderermodel40.png[Define connections to an existing model, part 2,pdfwidth=60%]
		
	

[[e4modelextend_model4">
=== Define your custom model extension
		
			Create a new
			<code>EClass</code>
			model element
			and add the following
			<code>Part</code>
			<parameter>
				ESuper
				Types
			</parameter>
			to it.
		
		
image::renderermodel50.png"/>
				</imageobject>
			</mediaobject>
		
		
			Use
			<property>BrowserPart</property>
			as value for the
			<parameter>Name</parameter>
			attribute.
		
		
			Right-click on the model element and
			add an
			<code>EAttribute</code>
			called uri with type of
			<code>EString</code>
			to it.
		
		
image::renderermodel54.png"/>
				</imageobject>
			</mediaobject>
		
		
			The finished model
			should look like the
			following.
		
		
image::renderermodel60.png"/>
				</imageobject>
			</mediaobject>
		
	
[[e4modelextend_model5">
=== Create the Genmodel
		
			Right-click your
			<filename>.ecore</filename>
			file and select
			menu:File[New > Other... > EMF Generator model]
			.
		
		
			Follow the wizard similar to the following screenshots.
		
		
image::renderermodel62.png"/>
				</imageobject>
			</mediaobject>
		
		
image::renderermodel64.png"/>
				</imageobject>
			</mediaobject>
		
		
image::renderermodel66.png"/>
				</imageobject>
			</mediaobject>
		
		
image::renderermodel70.png"/>
				</imageobject>
			</mediaobject>
		
	

[[e4modelextend_model6">
=== Generate the Java classes
		
			Use your
			<filename>genmodel</filename>
			to create the Java
			code. Right-click on it
			and select
			_Generate Model Code_
			.
		
		
image::applicationmodel_generatecode10.png"
						scale="40" />
				</imageobject>
			</mediaobject>
		
	
[[e4modelextend_model7">
=== Make generated classes available
		
			Export all package via
			the Runtime tab on the
			<filename>MANIFEST.MF</filename>
			file.
		
		<tip>
			
				Please note that the first time you run the model generation, the
				<filename>plugin.xml</filename>
				file is created and the
				<code>org.eclipse.emf.ecore.generated_package</code>
				extension point
				is added to the file.
				This extension point
				describes
				your
				model. It
				is only added if
				the
				<filename>plugin.xml</filename>
				file needs to get created. If you
				later
				adjust settings of your mode,
				i.e., your
				package setting,you have
				to adjust the
				extension point
				manually.
			
			
				<programlisting language="xml">
					<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
						parse="text" href="./examples/renderer/plugin.adoc[]
				</programlisting>
			
		</tip>
		
image::renderermodel80.png" scale="30" />
				</imageobject>
			</mediaobject>
		
		
			Note down the uri from the extension point. You need to
			define this in
			your
			<filename>Application.e4xmi</filename>
			later.
		
	
