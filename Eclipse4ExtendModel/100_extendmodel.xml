== Exercise: Extend the Eclipse application model

=== Target
		
			In this exercise you extend the structure of the Eclipse
			application model with an additional model element.
		
	

=== Creating a plug-in and add the dependencies
		
			Create a new simple plug-in called
			_com.vogella.e4.appmodel.extensions_
			.
		
		
image::appmodel_projectwizard10.png"
						scale="40[Wizard to create a simple plug-in,pdfwidth=60%]
		
		
			Add a dependency to the plug-ins
			`org.eclipse.e4.ui.model.workbench`
			and
			`org.eclipse.e4.core.contexts`
			in your new plug-in via its
			_MANIFEST.MF_
			file.
		
	

=== Create new model
		
			Create a folder called
			<filename class="directory">model_
			and create a new EMF model called
			_UiExtensions.ecore_
			via
			menu:File[New > Other... > Eclipse Modeling Framework > EMF Model]
			.
		
		
image::emf_appmodel10.png[Create the EMF model,pdfwidth=60%]
		
		
image::emf_appmodel20.png[To create the EMF model, select this page of the wizard,pdfwidth=60%]
		
		
			Press the
			_Finish_
			button.
		
		
			Enter the following properties for this plug-in via the
			_Properties_
			view.
		
		
image::emf_appmodel30.png[Package settings,pdfwidth=60%]
		
	

=== Define relationships to the Eclipse application model
		
			Right-click on the model and select
			_Load Resource..._
			.
		
		
image::renderermodel10.png"/>
				</imageobject>
			</mediaobject>
		
		
			Click on the button
			_Browse Registered Packages_
			and select the
			_*UiModel/application_
			model from the
			_org.eclipse.e4.ui.model.workbench_
			plug-in.
		
		
image::renderermodel30.png[Define connections to an existing model, part 1,pdfwidth=60%]
		
		
image::renderermodel40.png[Define connections to an existing model, part 2,pdfwidth=60%]
		
	


=== Define your custom model extension
		
			Create a new
			`EClass`
			model element
			and add the following
			`Part`
			_
				ESuper
				Types
			_
			to it.
		
		
image::renderermodel50.png"/>
				</imageobject>
			</mediaobject>
		
		
			Use
			<property>BrowserPart</property>
			as value for the
			_Name_
			attribute.
		
		
			Right-click on the model element and
			add an
			`EAttribute`
			called uri with type of
			`EString`
			to it.
		
		
image::renderermodel54.png"/>
				</imageobject>
			</mediaobject>
		
		
			The finished model
			should look like the
			following.
		
		
image::renderermodel60.png"/>
				</imageobject>
			</mediaobject>
		
	

=== Create the Genmodel
		
			Right-click your
			_.ecore_
			file and select
			menu:File[New > Other... > EMF Generator model]
			.
		
		
			Follow the wizard similar to the following screenshots.
		
		
image::renderermodel62.png"/>
				</imageobject>
			</mediaobject>
		
		
image::renderermodel64.png"/>
				</imageobject>
			</mediaobject>
		
		
image::renderermodel66.png"/>
				</imageobject>
			</mediaobject>
		
		
image::renderermodel70.png"/>
				</imageobject>
			</mediaobject>
		
	


=== Generate the Java classes
		
			Use your
			_genmodel_
			to create the Java
			code. Right-click on it
			and select
			_Generate Model Code_
			.
		
		
image::applicationmodel_generatecode10.png"
						scale="40" />
				</imageobject>
			</mediaobject>
		
	

=== Make generated classes available
		
			Export all package via
			the Runtime tab on the
			_MANIFEST.MF_
			file.
		
		TIP:
			
				Please note that the first time you run the model generation, the
				_plugin.xml_
				file is created and the
				`org.eclipse.emf.ecore.generated_package`
				extension point
				is added to the file.
				This extension point
				describes
				your
				model. It
				is only added if
				the
				_plugin.xml_
				file needs to get created. If you
				later
				adjust settings of your mode,
				i.e., your
				package setting,you have
				to adjust the
				extension point
				manually.
			
			
				<programlisting language="xml">
					<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
						parse="text" href="./examples/renderer/plugin.adoc[]
				</programlisting>
			
		</tip>
		
image::renderermodel80.png" scale="30" />
				</imageobject>
			</mediaobject>
		
		
			Note down the uri from the extension point. You need to
			define this in
			your
			_Application.e4xmi_
			later.
		
	
