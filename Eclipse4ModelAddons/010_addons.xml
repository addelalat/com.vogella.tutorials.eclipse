<section id="modeladdons" role="wrapper">
	<title>Using model add-ons</title>
	<section id="modeladdons_overview">
		<title>What are model add-ons?</title>
		<indexterm>
			<primary>Model Add-ons</primary>
		</indexterm>
		<indexterm>
			<primary>Add-ons</primary>
		</indexterm>
		<para>
			The application model allows you to create
			model objects called
			<wordasword>add-ons</wordasword>
			. These components
			can
			enhance
			the
			application with
			additional functionality.
		</para>
		<para>
			Add-ons
			add flexibility to the application model. They
			allow you
			to
			extend or change the default Eclipse behavior
			without
			having to
			modify
			existing Eclipse code. You just have to replace the
			related
			model
			component.

		</para>
		<para>
			For example, the default
			drag and drop support
			of parts
			in Eclipse
			is implemented via an
			add-on. Other examples are
			the keybinding or the
			command processing. If this functionality is undesired, you can
			simply remove the component from
			the application model. If you want a
			different behavior, you simply register your own add-on in your
			application model.
		</para>
		<para>
			Add-ons
			point to Java classes via their
			<wordasword>Class URI</wordasword>
			attribute using the
			<code>bundleclass://</code>
			URI convention.
		</para>

	</section>

	<section id="modeladdons_standard">
		<title>Add-ons from the Eclipse framework</title>
		<indexterm>
			<primary>Model add-ons</primary>
			<secondary>Platform add-ons</secondary>
		</indexterm>
		<para>
			Currently the following standard
			add-ons
			are useful for Eclipse
			applications. Their class names give an
			indication
			of
			their
			provided
			functionality.
		</para>
		<para>

			<itemizedlist>
				<listitem>
					<para>
						<code>CommandServiceAddon</code>
					</para>
				</listitem>
				<listitem>
					<para>
						<code>ContextServiceAddon</code>
					</para>
				</listitem>
				<listitem>
					<para>
						<code>BindingServiceAddon</code>
					</para>
				</listitem>
				<listitem>
					<para>
						<code>HandlerProcessingAddon</code>
					</para>
				</listitem>
				<listitem>
					<para>
						<code>CommandProcessingAddon</code>
					</para>
				</listitem>
				<listitem>
					<para>
						<code>ContextProcessingAddon</code>
					</para>
				</listitem>
				<listitem>
					<para>
						<code>BindingProcessingAddon</code>
					</para>
				</listitem>
			</itemizedlist>

		</para>
	</section>
	<section id="modeladdons_swtaddons">
		<title>Additional SWT add-ons</title>
		<indexterm>
			<primary>Model add-ons</primary>
			<secondary>CleanupAddon</secondary>
		</indexterm>
		<indexterm>
			<primary>Model addons</primary>
			<secondary>DnDAddon</secondary>
		</indexterm>
		<indexterm>
			<primary>Model addons</primary>
			<secondary>MinMaxAddon</secondary>
		</indexterm>
		<para>
			Additional
			add-ons
			are available.
			To support drag and drop for
			parts
			you need to add the
			<code>org.eclipse.e4.ui.workbench.addons.swt</code>
			plug-in to your product configuration file. Then you can use the
			<code>DnDAddon</code>
			and the
			<code>CleanupAddon</code>
			classes
			from this bundle as
			add-ons
			in your application model. This
			plug-in
			contains also the
			<code>MinMaxAddon</code>
			class which allows adding the functionality to minimize or maximize your
			application.
		</para>
		<para>
			The
			<code>org.eclipse.e4.ui.workbench.addons.swt</code>
			plug-in contributes these add-ons automatically to your application
			model via a model
			processor at runtime.
		</para>
	</section>

	<section id="modeladdons_lifecycle">
		<title>Relationship to other services</title>
		<para>
			Add-ons
			are created before
			the
			Eclipse rendering framework
			renders
			the model and after
			the
			event
			service has been
			created.
		</para>
		<para>
			This allows
			add-ons
			to alter the user interface that is produced by the
			rendering
			engine.

			For example, the
			<code>MinMaxAddon</code>
			add-on
			changes the tab folders
			created for the part stacks
			to have the min/max buttons in the corner.
		</para>
		<para>
			The Eclipse platform uses events sent via the
			event
			service to
			communicate changes in the application model.
			For
			example, if
			a
			part
			is
			activated, the Eclipse platform sends out an
			event
			for this.
			Add-ons
			can
			subscribe to these events from
			the Eclipse
			platform
			and react
			to
			them.
		</para>
	</section>
</section>