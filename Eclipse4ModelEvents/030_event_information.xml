= Android - Tutorial
:linkcss:
:sectnums:                                                          
:experimental:
:icons:
:imagesdir: ./img
(c) 2009, 2016 vogella GmbH
Version 0.3, 06.07.2016
:docinfodir: ../
:vgwort: 

[abstract]

== Extract event information

=== Available event tags
		
			The
			`UIEvents.EventTags`
			interface define the possible event tags:
		
		
			<mediaobject>
				<imageobject>
					<imagedata fileref="./images/event_tags.png" scale="50[EventTags interface with properties of an Event,pdfwidth=60%]
		
	
	These event tags are explained in the following sections. 
	<section>
=== ATTNAME event tag
		
			The
			<property>ATTNAME</property>
			property of the event is the attribute of the model,
			which has been changed.
		
		
			So if you for instance listen to changes of a model element's label, the
			<property>ATTNAME</property>
			of the event will be
			<varname>label</varname>
			.
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/attname_label.java[]
----
		
		
			<mediaobject>
				<imageobject>
					<imagedata fileref="./images/label_attname.png[Label ATTNAME,pdfwidth=60%]
		
		
			NOTE:
				
					The
					<property>label</property>
					is an XML attribute and can be
					found is the source of your
					_Application.e4xmi_
					file.
				
				
					<programlisting>&lt;children xsi:type="basic:Part" xmi:id="_9CJOwNgYEeKX2Jv3m0M6IA"
						elementId="com.sample.application.part.attname"
						contributionURI="bundleclass://com.sample.application/yourpackage.attname"
						label="ATTNAME sample
						label"/>
					</programlisting>
				
			</note>
		
	
	<section>
=== ELEMENT event tag
		
			The
			<property>ELEMENT</property>
			event tag in general is the model element, which is
			concerned in the event. For an example see
			<xref linkend="active_sample_event" />
		
	
	<section>
=== NEW_VALUE and OLD_VALUE event tags
		
			The
			<property>NEW_VALUE</property>
			and
			<property>OLD_VALUE</property>
			properties
			contain the changed value of the element's attribute.
		
		
			NOTE:
				
					In the old Eclipse 3.x days, you would have registered an
					`IPerspectiveListener`
					for the
					`WorkbenchWindow`
					and
					implement the
					`perspectiveChanged(...)`
					method. But in Eclipse 4
					you'd rather have to think in a DOM(Document Object Model) manner, where
					<emphasis>&lt;ELEMENT ATTNAME="NEW_VALUE"></emphasis>
					are manipulated and
					fired within events.
				
			</note>
		
		A example for using the values of an attribute in the model is a listener for a
			perspective change.
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text"
					href="./examples/perspective_stack_selected_element_event.java[]
----
		
		
			In case you want to listen to a kind of "perspective changed" event, you need to
			listen to the change of the
			<property>selectedElement</property>
			attribute of the
			`MPerspectiveStack`
			and can get the new and old
			`MPerspective`
			from
			`EventTags.NEW_VALUE`
			and
			`EventTags.OLD_VALUE`
			properties.
		
		
			So you actually listen to the changed
			<property>selectedElement</property>
			attribute
			value of the
			`MPerspectiveStack`
			, rather than looking for a "perspective
			change" event.
		
		So it is good to keep the DOM structure of the application model in mind and think of
			the changes, which can
			occur within the application model.
		
	
	<section>
=== TYPE event tag
		
			With the
			<property>TYPE</property>
			event tag you may determine what action has been
			done to the application model.
		
		
			The different types can be found in the
			`UIEvents.EventTypes`
			interface:
		
		
			<mediaobject>
				<imageobject>
					<imagedata fileref="./images/event_types.png[EventTypes interface for changes to the application model,pdfwidth=60%]
		
		With these event types you are able to figure out, whether a model element was added,
			created, moved, removed or
			an attribute was set.
		
		
			The
			`UIEvents`
			class, also offers convenience methods to check for some
			types.
		
		
			<mediaobject>
				<imageobject>
					<imagedata fileref="./images/event_type_convenience.png[Convenience methods for event types.,pdfwidth=60%]
		
		
			The
			`isADD(Event)`
			and
			`isREMOVE(Event)`
			methods apply for both
			single and many, e.g., ADD and ADD_MANY)
		
		
			For an example see
			<xref linkend="position_event_tag" />
		
	

=== POSITION event tag
		
			The
			<property>POSITION</property>
			event tag contains the new position of model
			elements. So this property is only set in case a collection of elements
			is
			concerned.
		
		If you move parts in a MPartStack or between different MPartStacks, you can also
			listen to changes of the
			children of an element container like this:
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/position_event_tag.java[]
----
		
		
			In case you drag and drop a
			`MPart`
			within a
			`MPartStack`
			, the
			`MPart`
			will be removed and afterwards added to the
			`MPartStack`
			.
		
		
			The details can be seen in the
			`UIEventPublisher.formatData()`
			method from the
			`org.eclipse.e4.ui.internal.workbench`
			package, where the position on is only the for move,
			add or remove events.
		
	
	<section>
=== WIDGET event tag
		
			The
			<property>WIDGET</property>
			event tag can be used to get the underlying widget,
			e.g., a
			`Composite`
			, of the model element, which is concerned in the
			event.
		
		
			So you are also able to directly interact with the underlying widget. But in most
			cases this is not necessary, because
			the model elements themselves provide the most of
			the methods to interact with the widget, like
			`setLabel`
			or
			`setVisible`
			methods and so on.
		
	

