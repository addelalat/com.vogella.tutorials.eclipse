
== Constructing the runtime application model

=== User Changes
		
			Changes
			during
			runtime,
			are
			written back
			to the
			model. An example for
			such a change is that the
			user moves a
			part to a
			new container via drag
			and drop.
		
		
			If the RCP application is closed, theses changes are
			recorded and
			saved
			independently in a
			_workbench.xmi_
			file in the
			_.metadata/.plugins/org.eclipse.e4.workbench_
			folder.
		
		<tip>
			
				User changes can be deleted at start of your application via the
				_clearPersistedState_
				parameter as a launch parameter. In most cases this is undesired behavior for an exported application and only used
				during development.
			
		</tip>
	

=== Runtime application model
		
			At runtime the application model of an Eclipse application
			consists of
			different
			components:
			<itemizedlist>
				<listitem>
					Application model - By default defined via the
						Application.e4xmi file
					
				</listitem>
				<listitem>
					Model contributions - Based on fragments and processors
					
				</listitem>
				<listitem>
					User changes - Changes the user did to the user interface
						during his last usage
					
				</listitem>
			</itemizedlist>
		
		
			These different components of the runtime application model need
			to be
			combined.
		

		 The Eclipse platform creates the runtime application model
			based on the initial
			application model
			(Application.e4xmi) and applies
			the model
			contributions
			to it. User
			deltas are applied afterwards. If
			these
			deltas do not
			apply anymore,
			e.g.
			because the base model has
			changed,
			they will be
			skipped.
		
		
			The deltas are applied to the model
			based on
			the
			IDs of the user
			interface
			component.
		
		NOTE:
			
				This behavior can be surprising during development. The
				developer
				adds a new part and this part is not visible after
				startup
				of the
				application because Eclipse assumes that the user closed it
				in an
				earlier session. Use the
				_clearPersistedState_
				parameter to avoid the processing of user changes at startup.
			
		</note>
	

