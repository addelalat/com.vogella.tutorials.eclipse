== Exercise: Contributing via model fragments

=== Target
		In this exercise you create a model fragment to contribute a
			menu
			entry, a command and a
			handler to
			your application model.
		
	


=== Create a new plug-in
		
			Create a simple plug-in project called
			_com.example.e4.rcp.todo.contribute_
			. The following description abbreviates the plug-in name to the
			`contribute`
			plug-in.
		
	

=== Add the dependencies
		
			In the
			`MANIFEST.MF`
			file, add the following plug-ins as dependencies to your
			`contribute`
			plug-in.
			<itemizedlist>
				*
					org.eclipse.core.runtime
				
				*
					org.eclipse.swt
				
				*
					org.eclipse.jface
				
				*
					org.eclipse.e4.core.di
				
				*
					org.eclipse.e4.ui.workbench
				
				*
					org.eclipse.e4.ui.di
				
			
		
	

=== Create a handler class
		
			Create the
			`com.example.e4.rcp.todo.contribute.handlers`
			package and
			the following class.
		
		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/fragments/OpenMapHandler.java[]
----
		
	


=== Create a model fragment
		
			Use the fragment wizard from the e4 tools project to create a new
			model fragment via the following
			menu:
			menu:File[New > Other... > Eclipse 4 > Model > New Model Fragment]
			.
		
		
image::fragmentwizard10.png[Creating fragments with the wizard,pdfwidth=60%]
		
		
			Select the
			`contribute`
			plug-in as the container and use
			_fragment.e4xmi_
			as the name for the file.
		
		
image::fragmentwizard20.png[Creating fragments with the wizard, Part 2,pdfwidth=60%]
		

		
			Press the
			_Finish_
			button.
		
	


=== Validate that the fragment is registered as extension

		
			This wizard which creates the fragment also adds the
			`org.eclipse.e4.workbench.model`
			extension to your
			`contribute`
			plug-in. To review this open the
			_plugin.xml_
			file.
		

		TIP:
			
				If the
				_plugin.xml_
				file is missing, open your
				_MANIFEST.MF_
				file, select the
				_Overview_
				tab and click on the
				_Extensions_
				link. This shows the
				_Extensions_
				tab in the editor and once you add an extension in this tab the
				_plugin.xml_
				file is generated.
			
		
		<warning>
			At the time of this writing the wizard deletes existing content
				in the plugin.xml, if you create a new fragment. This is a bug and
				might already be solved once you read this.
			
		

		
			On the
			_Extensions_
			tab validate that you have an entry similar to the following
			screenshot.
		


		
image::modelfragment_extensionpoint16.png"
						scale="40[Adding the fragment to the extensions,pdfwidth=60%]
		

		TIP:
			
				If entry in the plugin.xml is missing you can create it by clicking
				on the
				_Add..._
				button and by adding add a new extension for the
				`org.eclipse.e4.workbench.model`
				extension point. Afterwards you the right mouse click to add a
				fragment to it.
			
		
		
			The resulting
			plugin.xml
			file should look similar to the following
			code.
		

		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/fragments/plugin.xml[]
----
		
	




=== Adding model elements
		
			Open the
			_fragment.e4xmi_
			file in its editor.
			Select the
			_Model Fragments_
			node and
			press the
			_Add..._
			button.
		
		
image::modelfragment10.png"/>

				
				<textobject>
					<phrase>Adding a model fragment,pdfwidth=60%]
		
		
			Use
			`com.example.e4.rcp.todo.application`
			as the
			_Element ID_
			. This is the ID of the
			_Application_
			model element in
			your
			_Application.e4xmi_
			file.
		
		<warning>
			
				Ensure that
				`com.example.e4.rcp.todo.application`
				is the ID you
				are using for the top node in the
				_Application.e4xmi_
				file. Otherwise
				the
				contribution does not work. This is because the
				Eclipse runtime
				does not find
				the correct model element to contribute
				to.
			
		
		
			You
			also need to
			define
			to which feature
			you will be adding to. For
			_Featurename_
			, specify the value
			_commands_
			.
			Make sure you have the
			_Model Fragment_
			selected and
			use
			the
			_Add..._
			button to add a
			_Command_
			to your model fragment.
		

		
image::modelfragment20.png" scale="35[Adding a model fragment,pdfwidth=60%]
		

		
			Use
			`com.example.e4.rcp.todo.contribute.command.openmap`
			for the
			_ID_
			field and
			`Open Map`
			for the
			_Name_
			field.
		
		
image::fragment30.png" scale="35[Adding a command to the model fragment,pdfwidth=60%]
		
		
			Create a new model fragment for the handler. The
			_Element ID_
			is again your
			application ID, the
			_Featurename_
			is
			`handlers`
			.
		
		
			Add a
			_Handler_
			to this model fragment.
		
		
image::fragment32.png" scale="35[Adding a handler to the model fragment,pdfwidth=60%]
		
		
			Use
			`com.example.e4.rcp.todo.contribute.handler.openmap`
			as ID for the handler.
			Point to the
			_Open Map_
			command and the
			`OpenMapHandler`
			class.
		
		
image::fragment40.png" scale="30[Adding a handler to the model fragment,pdfwidth=60%]
		

		
			Add another
			_Model Fragment_
			to contribute a new menu to your application model. Contribute to
			the
			main menu of your
			_Application.e4xmi_
			.
			If you followed the earlier
			exericses correctly this should be the
			`org.eclipse.ui.main.menu`
			ID. The
			_Featurename_
			is
			`children`
			.
		
		
image::fragment50.png[Adding a fragment for the menu,pdfwidth=60%]
		

		<warning>
			
				Ensure in your
				_Application.e4xmi_
				file that you are using the
				same
				ID
				for your menu in your application.
				The following
				screenshot
				highlights this entry.
			
			
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/fragment52.png"/>
					
					<textobject>
						<phrase>Adding a fragment for the menu</phrase>
					</textobject>
				
			
		
		
			In your
			_fragment.e4xmi_
			file add a
			_Menu_
			with the
			_com.example.e4.rcp.todo.contribute.menu.map_
			ID and a
			_Map_
			label.
		
		
image::fragment60.png[Adding a menu entry,pdfwidth=60%]
		
		
image::fragment62.png[Adding a menu entry,pdfwidth=60%]
		
		
			Add a
			_HandledMenuItem_
			which
			points to
			your new command. The process
			of
			defining these entries
			is
			the same as
			defining menus
			in the
			_Application.e4xmi_
			file. See
			<xref linkend="part_commands" />
			for further information. The created entry should be similar to the
			following screenshot.
		


		
image::fragment70.png"/>

				
				<textobject>
					<phrase>Adding a menu item to the menu,pdfwidth=60%]
		

	



=== Update the product configuration (via the feature)
		
			Add the
			`contribute`
			plug-in to your
			`com.example.e4.rcp.todo.feature`
			feature.
		

		<warning>
			Ensure that you added this new plug-in to your feature and
				saved the changes.
			
		
	


=== Validating

		
			Start your application.
		
		<warning>
			Remember to start via the product to update the launch
				configuration.
			
		

		
			You should
			see the new
			_Map_
			entry in the application menu. If you select
			this entry a message
			dialog
			opens.
		
		
			If the menu entry is not displayed, ensure that your IDs are
			correctly
			entered and that you either use the
			_clearPersistedState_
			flag or clear the workspace data in your
			_Launch configuration_
			.
		

	


=== Exercise: Contributing a part
		NOTE:
			This exercise is optional.
		
		
			Define a new model fragment which
			contributes a
			part
			to an existing
			_PartStack_
			. Use the ID of an existing
			_PartStack_
			and use
			`children`
			as
			_FeatureName_
			.
		

	


