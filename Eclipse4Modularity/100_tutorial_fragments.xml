
	<title>Exercise: Contributing via model fragments
[[contributefragments_target">
=== Target
		In this exercise you create a model fragment to contribute a
			menu
			entry, a command and a
			handler to
			your application model.
		
	

[[contributefragments_project">
=== Create a new plug-in
		
			Create a simple plug-in project called
			_com.example.e4.rcp.todo.contribute_
			. The following description abbreviates the plug-in name to the
			<code>contribute</code>
			plug-in.
		
	
[[contributefragments_dependencies">
=== Add the dependencies
		
			In the
			<code>MANIFEST.MF</code>
			file, add the following plug-ins as dependencies to your
			<code>contribute</code>
			plug-in.
			<itemizedlist>
				<listitem>
					org.eclipse.core.runtime
				</listitem>
				<listitem>
					org.eclipse.swt
				</listitem>
				<listitem>
					org.eclipse.jface
				</listitem>
				<listitem>
					org.eclipse.e4.core.di
				</listitem>
				<listitem>
					org.eclipse.e4.ui.workbench
				</listitem>
				<listitem>
					org.eclipse.e4.ui.di
				</listitem>
			</itemizedlist>
		
	
[[contributefragments_classes">
=== Create a handler class
		
			Create the
			<code>com.example.e4.rcp.todo.contribute.handlers</code>
			package and
			the following class.
		
		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/fragments/OpenMapHandler.java" />
			</programlisting>
		
	

[[contributefragments_model">
=== Create a model fragment
		
			Use the fragment wizard from the e4 tools project to create a new
			model fragment via the following
			menu:
			menu:File[New > Other... > Eclipse 4 > Model > New Model Fragment]
			.
		
		
image::fragmentwizard10.png[Creating fragments with the wizard,pdfwidth=60%]
		
		
			Select the
			<code>contribute</code>
			plug-in as the container and use
			<filename>fragment.e4xmi</filename>
			as the name for the file.
		
		
image::fragmentwizard20.png[Creating fragments with the wizard, Part 2,pdfwidth=60%]
		

		
			Press the
			_Finish_
			button.
		
	

[[contributefragments_extensionpoint">
=== Validate that the fragment is registered as extension

		
			This wizard which creates the fragment also adds the
			<code>org.eclipse.e4.workbench.model</code>
			extension to your
			<code>contribute</code>
			plug-in. To review this open the
			<filename>plugin.xml</filename>
			file.
		

		<tip>
			
				If the
				<filename>plugin.xml</filename>
				file is missing, open your
				<filename>MANIFEST.MF</filename>
				file, select the
				_Overview_
				tab and click on the
				_Extensions_
				link. This shows the
				_Extensions_
				tab in the editor and once you add an extension in this tab the
				<filename>plugin.xml</filename>
				file is generated.
			
		</tip>
		<warning>
			At the time of this writing the wizard deletes existing content
				in the plugin.xml, if you create a new fragment. This is a bug and
				might already be solved once you read this.
			
		</warning>

		
			On the
			_Extensions_
			tab validate that you have an entry similar to the following
			screenshot.
		


		
image::modelfragment_extensionpoint16.png"
						scale="40" />
				</imageobject>
				<textobject>
					<phrase>Adding the fragment to the extensions,pdfwidth=60%]
		

		<tip>
			
				If entry in the plugin.xml is missing you can create it by clicking
				on the
				<guibutton>Add...</guibutton>
				button and by adding add a new extension for the
				<code>org.eclipse.e4.workbench.model</code>
				extension point. Afterwards you the right mouse click to add a
				fragment to it.
			
		</tip>
		
			The resulting
			plugin.xml
			file should look similar to the following
			code.
		

		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/fragments/plugin.adoc[]
			</programlisting>
		
	



[[contributefragments_addingelements">
=== Adding model elements
		
			Open the
			<filename>fragment.e4xmi</filename>
			file in its editor.
			Select the
			_Model Fragments_
			node and
			press the
			<guibutton>Add...</guibutton>
			button.
		
		
image::modelfragment10.png"/>

				</imageobject>
				<textobject>
					<phrase>Adding a model fragment,pdfwidth=60%]
		
		
			Use
			<code>com.example.e4.rcp.todo.application</code>
			as the
			_Element ID_
			. This is the ID of the
			<parameter>Application</parameter>
			model element in
			your
			<filename>Application.e4xmi</filename>
			file.
		
		<warning>
			
				Ensure that
				<code>com.example.e4.rcp.todo.application</code>
				is the ID you
				are using for the top node in the
				<filename>Application.e4xmi</filename>
				file. Otherwise
				the
				contribution does not work. This is because the
				Eclipse runtime
				does not find
				the correct model element to contribute
				to.
			
		</warning>
		
			You
			also need to
			define
			to which feature
			you will be adding to. For
			_Featurename_
			, specify the value
			_commands_
			.
			Make sure you have the
			_Model Fragment_
			selected and
			use
			the
			<guibutton>Add...</guibutton>
			button to add a
			_Command_
			to your model fragment.
		

		
image::modelfragment20.png" scale="35" />

				</imageobject>
				<textobject>
					<phrase>Adding a model fragment,pdfwidth=60%]
		

		
			Use
			<code>com.example.e4.rcp.todo.contribute.command.openmap</code>
			for the
			_ID_
			field and
			<code>Open Map</code>
			for the
			_Name_
			field.
		
		
image::fragment30.png" scale="35" />

				</imageobject>
				<textobject>
					<phrase>Adding a command to the model fragment,pdfwidth=60%]
		
		
			Create a new model fragment for the handler. The
			_Element ID_
			is again your
			application ID, the
			_Featurename_
			is
			<code>handlers</code>
			.
		
		
			Add a
			_Handler_
			to this model fragment.
		
		
image::fragment32.png" scale="35" />

				</imageobject>
				<textobject>
					<phrase>Adding a handler to the model fragment,pdfwidth=60%]
		
		
			Use
			<code>com.example.e4.rcp.todo.contribute.handler.openmap</code>
			as ID for the handler.
			Point to the
			_Open Map_
			command and the
			<code>OpenMapHandler</code>
			class.
		
		
image::fragment40.png" scale="30" />
				</imageobject>
				<textobject>
					<phrase>Adding a handler to the model fragment,pdfwidth=60%]
		

		
			Add another
			_Model Fragment_
			to contribute a new menu to your application model. Contribute to
			the
			main menu of your
			<filename>Application.e4xmi</filename>
			.
			If you followed the earlier
			exericses correctly this should be the
			<code>org.eclipse.ui.main.menu</code>
			ID. The
			_Featurename_
			is
			<code>children</code>
			.
		
		
image::fragment50.png[Adding a fragment for the menu,pdfwidth=60%]
		

		<warning>
			
				Ensure in your
				<filename>Application.e4xmi</filename>
				file that you are using the
				same
				ID
				for your menu in your application.
				The following
				screenshot
				highlights this entry.
			
			
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/fragment52.png"/>
					</imageobject>
					<textobject>
						<phrase>Adding a fragment for the menu</phrase>
					</textobject>
				</mediaobject>
			
		</warning>
		
			In your
			<filename>fragment.e4xmi</filename>
			file add a
			_Menu_
			with the
			<parameter>com.example.e4.rcp.todo.contribute.menu.map</parameter>
			ID and a
			<parameter>Map</parameter>
			label.
		
		
image::fragment60.png[Adding a menu entry,pdfwidth=60%]
		
		
image::fragment62.png[Adding a menu entry,pdfwidth=60%]
		
		
			Add a
			_HandledMenuItem_
			which
			points to
			your new command. The process
			of
			defining these entries
			is
			the same as
			defining menus
			in the
			<filename>Application.e4xmi</filename>
			file. See
			<xref linkend="part_commands" />
			for further information. The created entry should be similar to the
			following screenshot.
		


		
image::fragment70.png"/>

				</imageobject>
				<textobject>
					<phrase>Adding a menu item to the menu,pdfwidth=60%]
		

	


[[contributefragments_product">
=== Update the product configuration (via the feature)
		
			Add the
			<code>contribute</code>
			plug-in to your
			<code>com.example.e4.rcp.todo.feature</code>
			feature.
		

		<warning>
			Ensure that you added this new plug-in to your feature and
				saved the changes.
			
		</warning>
	

[[contributefragments_validate">
=== Validating

		
			Start your application.
		
		<warning>
			Remember to start via the product to update the launch
				configuration.
			
		</warning>

		
			You should
			see the new
			_Map_
			entry in the application menu. If you select
			this entry a message
			dialog
			opens.
		
		
			If the menu entry is not displayed, ensure that your IDs are
			correctly
			entered and that you either use the
			<parameter>clearPersistedState</parameter>
			flag or clear the workspace data in your
			_Launch configuration_
			.
		

	

[[contributefragments_view">
=== Exercise: Contributing a part
		<note>
			This exercise is optional.
		</note>
		
			Define a new model fragment which
			contributes a
			part
			to an existing
			_PartStack_
			. Use the ID of an existing
			_PartStack_
			and use
			<code>children</code>
			as
			_FeatureName_
			.
		

	


