
	<title>Tips
[[tips_legacy">
=== Where do I find the initial application model of the Eclipse
			SDK
		
			In plug-in "org.eclipse.platform". Here you find the file
			"LegacyIDE.e4xmi" which defines the initial window and some add-ons.
			During startup the
			<code>E4Workbench</code>
			class
			from the
			<code>org.eclipse.e4.workbench.ui.internal</code>
			package is started.
		
	

[[model_structure">
=== Meta-model of the application model
		
			The possible structure of the application model is defined by a
			meta-model created with the Eclipse Modeling Framework (EMF). A
			meta-model describes the structure of a data model, e.g., it defines
			which properties a Part has.
		
		
			EMF is a popular general purpose
			modeling
			framework and is the
			basis for
			lots of Eclipse based projects. EMF allows
			to generate Java
			classes from a meta-model.
		
		
			Eclipse
			EMF
			uses
			an
			<filename>.ecore</filename>
			file to define the
			meta-model.
		
		
			The meta-model of the Eclipse 4 applications
			is
			stored in the
			<code>org.eclipse.e4.ui.model.workbench</code>
			plug-in inside the
			<filename class="directory">model</filename>
			folder. The base model definition can be found in
			the
			<filename>UIElements.ecore</filename>
			file. The Eclipse 4 model classes have been
			generated based on this
			model.
		

		
			If you want to investigate this model, you could install the EMF
			tooling via the Eclipse update manager and import the defining
			plug-in into your workspace. To import a plug-in from your current
			Target
			Platform (default is the Eclipse IDE) into your workspace, use
			the
			_Plug-ins_
			view
			, right-click on a plug-in and select
			menu:Import As[Source Project]
			.
		
		
			The
			<filename>Application.e4xmi</filename>
			file, which describes the Eclipse application model, is a persisted
			version of an EMF model.
		

	

[[tipsandtricks_menuid">
=== Determine the command ID in a handler
		In the handler class you can determine the command ID if the
			command was triggered via the user interface. Determining the ID is
			not possible, if it was triggered via the command service. The
			following code snippet shows how to get the command
			ID.
		

		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/command/getid.java" />
			</programlisting>
		
	

[[bindingcontext">
=== BindingContext
		 Eclipse 4 uses predefined BindingContext identifier which are
			based on org.eclipse.jface.contexts.IContextIds.
		
		
			These are
			<code>org.eclipse.ui.contexts.dialog</code>
			for dialogs,
			<code>org.eclipse.ui.contexts.window</code>
			for windows and
			<code>org.eclipse.ui.contexts.dialogAndWindow</code>
			for both.
		

	



[[tips_equinox">
=== DI in OSGi stand-alone environments

		It is possible to use the DI engine in a standard OSGi
			environment
		
		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/osgi/standard.java" />
			</programlisting>
		
	

[[tips_persists">
=== Persists user changes
		
			Via a startup parameter you can control if Eclipse should persists
			model changes. For example you want to save the last position of the
			main application window. This is similar to the
			<code>setSaveAndRestore(true)</code>
			method call in Eclipse 3.x.
		
		

			<table frame='all'>
		=== Sample Table
				<tgroup cols='2' align='left' colsep='1' rowsep='1'>
					<colspec colname='c1' />
					<colspec colname='c2' />
					<thead>
						<row>
							<entry>Parameter</entry>
							<entry>Description</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>-persistState false|true</entry>
							<entry>Default is false, if set to false user changes are not
								recorded.
							</entry>
						</row>
						<row>
							<entry>-clearPersistedState</entry>
							<entry>will delete the recorded delta of the last session.
							</entry>
						</row>
						<row>
							<entry>-deltaRestore true|false</entry>
							<entry>Controls how the deltas are stored. a) Store deltas and
								apply
								them on startup using the Reconciler. This way new
								contribution
								will be shown in your application. b) Serialize the
								complete
								model (this is similar to 3.x saveAndRestore(true))
								and
								deserialize from XMI.
							</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
		
	

[[tips_css_workbench">
=== Styling the Eclipse 4 IDE
		
			The platform style sheets
			are stored in
			the
			<code>org.eclipse.platform</code>
			plug-in .
			This
			plugin_contains
			a
			<filename>/css</filename>
			folder
			which contains
			the style
			sheets for the
			individual
			platforms (os
			based).
		
		
			You can use the ThemeManager to style the Eclipse 4 IDE itself.
			In the
			Eclipse the theme can be selected via
			menu:Window[Preferences > General > Appearance]
			.
		
		
			You can also contribute a new theme
			via a separate plug-in. Create
			a
			plug-in project (no activator required)
			which has a
			dependency
			to
			the
			plug-in
			<code>org.eclipse.e4.ui.css.swt.theme</code>
			.
		
		
			Contribute a new theme to the
			<code>org.eclipse.e4.ui.css.swt.theme</code>
			extension point
			Create a CSS file
			and point
			the theme to this file.
		
		
			Export the plug-in
			(including the CSS
			file) and put it into
			your
			Eclipse
			installation folder into the "dropins" folder you
			should be
			able
			to
			select
			your new theme after restarting the Eclipse
			IDE.
		
	


