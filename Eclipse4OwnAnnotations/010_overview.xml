== Custom annotations

	<indexterm>
		<primary>Annotations</primary>
		<secondary>Custom annotations processors</secondary>
	</indexterm>



=== Custom annotations in Eclipse

		
			The Eclipse platform uses dependency injection as the primary
			programming model. This mechanism is
			extensible with
			custom
			annotations.
			The following code demonstrates how you can define your
			custom
			annotation.
		

		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/DirectTodo.java[]
----
		
	


=== Define an annotation processor via an OSGi service
		

		
			To process these custom annotations
			you can register an
			OSGi
			service for
			the abstract
			`ExtendedObjectSupplier`
			class from the
			`org.eclipse.e4.core.di.suppliers`
			package. In this registration you define via
			the
			<property>dependency.injection.annotation</property>
			property the annotation for which the service is
			responsible.
		


		
			After this registration the
			Eclipse framework
			calls
			this
			annotation
			processor if it encounters
			the configured annotation.
		
		
			The following snippet shows an example
			_DirectTodoSupplier.xml_
			file which registers an
			`ExtendedObjectSupplier`
			for the
			`DirectTodo`
			annotation.
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/DirectTodoSupplier.adoc[]
			</programlisting>
		


		
			The annotation processor registered via the
			_DirectTodoSupplier.xml_
			file returns an object. The
			following
			code
			shows an example for an
			annotation processor which
			returns an instance
			of an
			`java.util.Optional&lt;Todo&gt;`
			class, in case a proper id is passed to the
			`DirectTodo`
			annotation.
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/DirectTodoObjectSupplier.java[]
----
		
	
