
	<title>Exercise: Creating custom annotations
[[customannotations_tutorial_overview">
=== Target
		
			The following exercise demonstrates how to create a custom
			annotation and a processor for it.
		
		
			The
			annotation processor is registered for a custom
			<code>@DirectTodo</code>
			annotation, which is a qualifier and therefore has to be used
			together with
			<code>@Inject</code>
			. The
			<code>@DirectTodo</code>
			annotation can have a id for requesting a Todo with a certain id.
		
	
[[customannotations_tutorial_plugin">
=== Creating a new plug-in 
		
			Create a new simple plug-in project called
			_com.example.e4.rcp.todo.ownannotation_
			.
		
		
			Add the following plug-ins as dependencies to your new plug-in.

			<itemizedlist>
				<listitem>
					
						<code>org.eclipse.e4.core.di</code>
					
				</listitem>
				<listitem>
					
						<code>com.example.e4.rcp.todo.model</code>
					
				</listitem>
			</itemizedlist>
			Also configure that the
			<code>javax.inject</code>
			package should be used.
		
	


[[customannotations_tutorial_annotation">
=== Define and export annotations
		
			Define the following annotation.
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/DirectTodo.java" />
			</programlisting>
		
		
			Export the
			<code>com.example.e4.rcp.todo.ownannotation</code>
			package
			via your
			<filename>MANIFEST.MF</filename>
			file.
		
	

[[customannotations_enable_ds_annotations">
=== Ensure annotation processing and plug-in activation is active
		
			Ensure that OSGi services can be defined via annotations in the class via
			menu:Window[Preferences > Plug-in Development > DS annotations]
			.
		
		
			Ensure that the
			_Activate this plug-in when one of its classes is loaded_
			flag for the service plug-in is set in the
			<filename>MANIFEST.MF</filename>
			file.
			Depending on your setup, this flag
			might
			already be set.
		

	

[[customannotations_tutorial_class">
=== Create service implementation
		
			Create the
			<code>com.example.e4.rcp.todo.ownannotation.internal</code>
			package and the following class. Based on the annotation this will register this class as service for the
			<code>ExtendedObjectSupplier</code>
			abstract class via OSGi declarative services.
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/DirectTodoObjectSupplier.java" />
			</programlisting>
		
		<note>
			
				The
				<code>ExtendedObjectSupplier</code>
				class
				is not yet released as official API. See
				<xref linkend="e4overview_api" />
				.
			
		</note>
	


[[customannotations_tutorial_dependencies">
=== Add the plug-in as dependency
		
			Add your new plug-in as dependency to your
			<code>com.example.e4.rcp.todo</code>
			application plug-in via its
			<filename>MANIFEST.MF</filename>
			file.
		
	
[[customannotations_tutorial_feature">
=== Update the product configuration (via the features)
		
			Include the new plug-in into your feature to make it available
			for your product.
		

	

[[customannotations_tutorial_use">
=== Validate: Use your custom annotation

		
			In order to use your new annotation, add it to a field or
			method
			parameter in one of your parts. For example add the
			following method
			to your
			<code>PlaygroundPart</code>
			class.
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/ParameterDirectTodo.java" />
			</programlisting>
		
		
			Start your application (via the product as you added a new
			plug-in).
			Ensure that you get the Todo with id 1 injected
			based on your
			<code>@DirectTodo</code>
			annotation.
		
	
