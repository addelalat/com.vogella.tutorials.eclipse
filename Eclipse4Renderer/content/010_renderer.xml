
	<title>Renderer Framework
[[renderer_overview">
=== Renderer
		<indexterm>
			<primary>Renderer</primary>
		</indexterm>
		<indexterm>
			<primary>WorkbenchRendererFactory</primary>
		</indexterm>
		
			An Eclipse application is modeled without a hard dependency to a
			specific user interface toolkit. Eclipse allows you
			to define a
			_renderer factory_
			. This
			renderer factory
			determines for every model element the
			responsible
			_renderer object_
			.
		
		
			A renderer object
			is responsible for creating the user
			interface
			objects for
			its
			model
			element, monitoring their
			changes and
			reacting
			to
			these
			changes.
		
		
			By
			default the
			Eclipse platform
			uses the SWT based
			<code>WorkbenchRendererFactory</code>
			as renderer factory.
			The
			<code>org.eclipse.e4.ui.workbench.renderers.swt</code>
			plug-in contains this default implementation.
		


	
[[renderer_factories">
=== Renderer factory and renderer objects
		<indexterm>
			<primary>IRendererFactory</primary>
		</indexterm>
		

			The
			renderer factory determines per model object the
			renderer
			object
			which is responsible for rendering the
			corresponding
			model
			object.
		

		
			Renderer factories implement the
			<code>IRendererFactory</code>
			interface. In the
			<code>getRenderer()</code>
			method it returns a renderer object of type
			<code>AbstractPartRenderer</code>
			.
		

		
			For example, if the model element is an instance of
			<code>MPart</code>
			,
			then an instance of the
			<code>ContributedPartRenderer</code>
			class
			is created by the default Eclipse
			renderer factory. The relevant
			code in the
			<code>WorkbenchRendererFactory</code>
			class is shown below.
		
		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="../examples/renderer/rendererselection.txt" />
			</programlisting>
		

	
[[renderer_context">
=== Context creation of model objects
		
			During the rendering the
			<code>IEclipseContext</code>
			of those model elements which
			extend
			<code>MContext</code>
			(MApplication, MPart, etc) is created and populated.
		
		
			For
			example an object of type
			<code>ContributedPartRenderer</code>
			is the default renderer for a
			<code>MPart</code>
			model element. This object creates a
			<code>Composite</code>
			and injects it into the local context of each part.
		
	
[[renderer_customfactory">
=== Using a custom renderer
		<indexterm>
			<primary>Renderer</primary>
			<secondary>Custom implementation</secondary>
		</indexterm>
		<indexterm>
			<primary>rendererFactoryUri</primary>
		</indexterm>

		
			The Eclipse platform allows you
			to extend or exchange the
			default
			renderer classes. For example you can change the
			stack to use
			tabs at
			the bottom instead of the top.
		
		
			You can also implement renderer for other
			user
			interface
			toolkits
			than
			SWT.
			For
			example you
			could use JavaFX
			or
			Swing
			for
			your
			application.
		
		<tip>
			
				If you switch from SWT to another user interface technology
				your non
				user interface related logic, e.g.,
				services, the
				model
				application,
				etc. can be reused. But you need to
				re-implement
				your user
				interface
				components.
				For example
				a
				part
				written in SWT must be
				re-written in JavaFX to work together with a
				JavaFX Renderer.
			
		</tip>
		
			The custom renderer factory is registered via the
			<code>org.eclipse.core.runtime.products</code>
			extension point. You use an additional property called
			<code>rendererFactoryUri</code>
			to point to the new factory class.
		
	

[[renderer_customfactory_modelspecific">
=== Using a custom renderer for one model element
		
			If you want to replace the renderer for only one model element,
			there
			is a key
			<code>CUSTOM_RENDERER_URI</code>
			which you can add to the persistentData map of a model element. The
			'value' for this key would be the
			URI of the
			renderer you want to
			use.
		

	

