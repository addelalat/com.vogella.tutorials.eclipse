== Exercise: Defining a renderer

=== Target
		The following exercise serves as a simple example for creating a
			custom
			renderer. It implements a custom stack
			renderer which uses "*
			Demo *"
			instead of "*" to mark an editor dirty.
		
	

=== Creating a plug-in

		
			Create a new simple plug-in called
			_com.example.e4.renderer.swt_
			. This plug-in is called the
			`renderer`
			plug-in in the following description.
		
	


=== Enter the dependencies
		
			Add the following plug-ins as dependencies to your
			`renderer`
			plug-in.

			<itemizedlist>
				<listitem>
					
						`org.eclipse.e4.core.contexts`
					
				</listitem>
				<listitem>
					
						`org.eclipse.e4.ui.workbench.renderers.swt`
					
				</listitem>
				<listitem>
					
						`org.eclipse.e4.ui.workbench.swt`
					
				</listitem>
				<listitem>
					
						`org.eclipse.e4.ui.workbench`
					
				</listitem>
				<listitem>
					
						`org.eclipse.e4.core.services`
					
				</listitem>
				<listitem>
					
						`org.eclipse.e4.ui.model.workbench`
					
				</listitem>
				<listitem>
					
						`org.eclipse.swt`
					
				</listitem>

			</itemizedlist>

		
	

=== Create the renderer implementation
		
			In your
			`renderer`
			plug-in create the
			`com.example.e4.renderer.swt`
			package and the following classes. The new stack renderer extends
			the
			stack renderer from the Eclipse platform.
		
		
[source,java]
----
include::res/stack/MyStackRenderer.java[]
----
		
		
[source,java]
----
include::res/stack/MyRendererFactory.java[]
----
		
	

=== Register the renderer

		
			Register your renderer in the
			_plugin.xml_
			file of your
			`com.example.e4.rcp.todo`
			plug-in. For this create a new
			property on the extension for your product. Use
			<property>rendererFactoryUri</property>
			as name and
			`bundleclass://com.example.e4.renderer.swt/com.example.e4.renderer.swt.MyRendererFactory
			`
			as value. This setting is similar to the setting of the
			<property>applicationCSS</property>
			or the
			<property>lifeCycleURI</property>
			property hence you should know how to do this.
		

		
[source,java]
----
include::res/stack/plugin.adoc[]
			</programlisting>
		

	

=== Validating
		
			Start your application and change a
			`Todo`
			in your
			`TodoDetailPart`
			. The dirty indicator should now be different as indicated in the
			following screenshot.
		
		
image::stackrenderer10.png[Stack renderer with alternative dirty implementation,pdfwidth=60%]
		

	



