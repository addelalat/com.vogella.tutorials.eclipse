== Eclipse platform services

=== What are Eclipse platform services?

		

		Services are software
			components (based on an interface or a
			class)
			which provide functionality.
			The
			Eclipse platform defines several
			services.
			The classes which are created based on the application model
			can access these services via
			dependency
			injection.
		

		
			To use an Eclipse service you
			specify
			the service dependency via an
			`@Inject`
			annotation and the Eclipse framework injects this component into
			your
			object.
		
		
			The typical naming convention for Eclipse service interfaces is to
			start
			with an
			_E_
			and end with
			_Service_
			e.g.
			_E*Service_
			.
		
	

=== Overview of the available platform services
		
			The following table gives an overview of the most important available
			platform
			services.

			<table frame='all'>
		=== Platform services
				<tgroup cols='2' align='left' colsep='1' rowsep='1'>
					<colspec colname='c1' colwidth="2*" />
					<colspec colname='c2' colwidth="5*" />
					<thead>
						<row>
							<entry>Service</entry>
							<entry>Description</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>EModelService</entry>
							<entry> Used to search for elements in the
								model,
								create new model
								elements, clone existing
								snippets and
								insert new elements into the
								runtime application
								model.
							</entry>
						</row>
						<row>
							<entry>ESelectionService
							</entry>
							<entry>Used to retrieve and set the
								current active selection in
								the user interface.
							</entry>
						</row>
						<row>
							<entry>ECommandService</entry>
							<entry>Gives access to existing commands and allows you to
								create
								and change commands.
							</entry>
						</row>
						<row>
							<entry>EHandlerService</entry>
							<entry>Allows you to access, change and trigger handlers.</entry>
						</row>
						<row>
							<entry>EPartService</entry>
							<entry>
								Provides API to access and modify parts.
								It also allows you to
								switch perspectives and can be used to trigger that a method
								annotated with
								`@Persist`
								in dirty parts, i.e. if the corresponding part behaves like an editor.
							</entry>
						</row>
						<row>
							<entry>IEventBroker   </entry>
							<entry>Provides functionality to send event data and to register
								for specified events and event topics.
							</entry>
						</row>
						<row>
							<entry>
								EContextService
							</entry>
							<entry>
								Activate and deactivate key bindings defined as
								`BindingContext`
								in the application model. The content
								referred to in this service
								is the
								`BindingContext`
								and not the
								`IEclipseContext`
								.
							</entry>
						</row>
						<row>
							<entry>IThemeEngine
							</entry>
							<entry>Allows to switch the styling of the
								application at runtime.
							</entry>
						</row>
						<row>
							<entry>EMenuService
							</entry>
							<entry>Registers a popup menu (MPopupMenu) for an
								control
							</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
		
		
			Other available services are:
			<itemizedlist>
				*
					
						org.eclipse.e4.core.services.Adapter - An adapter can adapt
						an
						object to the specified type, allowing clients to request
						domain-specific
						behavior for an object. It integrates
						`IAdaptable`
						and
						`IAdapterManager`
						. See the
						http://wiki.eclipse.org/E4/EAS/Adapting_Objects">Adapter wiki
						for details.
					
				
				*
					org.eclipse.e4.core.services.Logger - Provides logging
						functionality
					
				

				*
					
						org.eclipse.jface.window.IShellProvider - allows access to a
						`Shell`
						, depends on SWT.
					
				
			
		


	
	

    <title>How are Eclipse platform services implemented?
    
        Usually services
        have two parts: the interface definition and the
        implementation. How these two
        are linked
        is defined by a
        context function, an
        OSGi service or plain context
        value
        setting (
        `IEclipseContext`
        ). Please note that there can be more than one service
        implementation
        for an interface.
    


