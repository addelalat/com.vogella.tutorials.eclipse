
	<title>Selection service
[[selectedservices_selectionservice_usage">
=== Usage of the selection service
		<indexterm>
			<primary>Selection services</primary>
		</indexterm>
		<indexterm>
			<primary>ESelectionService</primary>
		</indexterm>
		
			The
			<code>ESelectionService</code>
			service allows you to retrieve and set the global
			selection in
			your
			current application window. Other classes in the application model
			can use the
			dependency injection mechanism to retrieve the relevant
			active
			selection
			directly.
		
		
			A
			client
			can get
			the selection service via:
			<code>@Inject ESelectionService</code>
			.
		
		<tip>
			
				The selection is window specific, i.e. stored in the context of the
				<code>MWindow</code>
				model object.
			
		</tip>

	
[[selectedservices_selectionservice_changing">
=== Changing the current selection
		
			You can change the current selection with the
			<code>setSelection()</code>
			method of the
			<code>ESelectionService</code>
			class. This is demonstrated in the following code.
		
		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/servicesoverview/setSelection.java" />
			</programlisting>
		
	
[[selectedservices_selectionservice_getting">
=== Getting the selection
		
			A client can retrieve the last selection for the current window
			directly from the
			<code>ESelectionService</code>
			via the
			<code>getSelection()</code>
			method. The
			<code>getSelection(partId)</code>
			method allows you to retrieve the selection of a specific
			part.

		
		<tip>
			
				The possibility of retrieving the selection of a part is based on
				the
				hierarchy of the
				<code>IEclipseContext</code>
				. With this hierarchy it is possible to store a selection per window
				and also per part.
			
		</tip>
		
			It is preferred that a class which is part of the application model
			uses dependency injection to retrieve
			the selection. The selection is
			stored under the key based on the
			<code>IServiceConstants.ACTIVE_SELECTION</code>
			constant.
			This key can be specified via the
			<code>@Named</code>
			annotation. The Eclipse framework ensures that
			selections are
			only
			injected if they have the fitting type.
		

		
			The usage of the
			<code>@Named</code>
			annotation to retrieve the selection is demonstrated with the
			following method.
		
		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/servicesoverview/getSelection.java" />
			</programlisting>
		

	

