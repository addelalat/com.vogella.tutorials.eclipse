
== Part service and editor like behavior


=== What is the part service?
		

		<indexterm>
			<primary>Perspective</primary>
			<secondary>Switching with the part service</secondary>
		</indexterm>
		
		<indexterm>
			<primary>Parts</primary>
			<secondary>Creating at runtime</secondary>
		</indexterm>
		
			The
			_part service_
			allows you to find and perform actions on
			parts
			in the application
			model.
		

		
			It also allows you to
			switch
			perspectives
			and to create and activate new
			parts
			based on part descriptors
			in the application model.
		
	


=== How to access the part service
		
			Use dependency injection to get access to the part service. For
			example via the
			`@Inject EPartService partService;`
			statement.
		
	


=== Example: Showing and hiding parts
		
			The following example shows how you can find
			parts, hide or show
			them.
			If the
			<parameter>Visible</parameter>
			attribute of the
			part
			was initially set
			to
			`false`
			(not visible), you need to call the
			`setVisible(true)`
			method of the model element
			to ensure that the
			part
			gets displayed.
		

		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/partservice/partService.java" />
			</programlisting>
		
	

=== Example: Switching perspectives
		
			The following example shows how you can switch to another
			perspective with the part service.
		

		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/partservice/SwitchPerspectiveHandler.java" />
			</programlisting>
		
	


=== Using part descriptors
		
		<indexterm>
			<primary>PartDescriptor</primary>
			<see>Part descriptor</see>
		</indexterm>
		
			The
			_part descriptor_
			model element is a template for the creation of a part. 
			By defining a common set of
			attributes via such a blueprint it
			is
			possible to create concrete
			instances of it via the part
			service.
		
		
			Via the
			<parameter>Multiple</parameter>
			of the part descriptor you configure if multiple instances of this
			part can be created or not.
			Such a model element is depicted in the
			following screenshot.
		
		
image::partdescripter_service10.png" scale="35[Adding a PartDescripter to the model,pdfwidth=60%]
		
	


=== Example: Part descriptors and creating parts dynamically
		
			If you define a part descriptor 
			in your application model, you can use the
			`EPartService`
			to create a
			part
			from it.
		
		
			The following screenshot shows the definition of a part descriptor
			in the application model. As the
			<parameter>Multiple</parameter>
			parameter is set, it is possible to create several parts based on
			this template.
		
		
image::partdescripter_service10.png"
						scale="40[Adding a PartDescripter to the model,pdfwidth=60%]
		
		The part service allows you to create a new part based on this
			template. This is demonstrated by the following example code.
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/partservice/OpenPartHandler.java" />
			</programlisting>
		

	




