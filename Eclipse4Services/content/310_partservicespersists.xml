
	<title>Implementing editor like behavior


[[selectedservices_editors">
=== Parts which behave similar to editors
		<indexterm>
			<primary>Editor</primary>
			<secondary>Implementation</secondary>
		</indexterm>

		
			An editor is a part which requires that the user
			triggers a
			save
			operation to persist data changes in the editor. Editors that
			contain
			data, which can be saved, are typically
			called
			_dirty_
			.
		
		
			The
			part service
			allows you to save dirty parts. Every part can
			mark itself as dirty, hence behave like
			an editor.
		



	

[[eclipse4editor_persist">
=== MDirtyable and @Persist
		<indexterm>
			<primary>@Persists</primary>
		</indexterm>
		<indexterm>
			<primary>MDirtyable</primary>
		</indexterm>
		
			A part has the
			<code>MDirtyable</code>
			attribute
			which indicates that it can be marked as dirty. Dirty
			indicates that
			the part contains data which has been changed but not
			yet saved. The
			<code>MDirtyable</code>
			object can get injected into a part.
		
		
			You can use the
			<code>setDirty(boolean)</code>
			method to mark the part as dirty.
		
		
			The following snippet demonstrates how to use the
			<code>MDirtyable</code>
			model property in a part to flag it as dirty after a button was
			pressed.
		

		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/model/dirty.java" />
			</programlisting>
		

		
			The part service allows you to query the dirty parts and to
			call a
			method annotated with
			_@Persist_
			on the dirty parts. This method saves the data of the part and
			sets
			the
			dirty flag back to false if the save operation was
			successful.
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/dirty/persists.java" />
			</programlisting>
		
		<note>
			
				Every part is responsible for saving itself. Hence every
				part which
				behaves like an editor must have one method annotated with
				<code>@Persist</code>
				.
			
		</note>

	
[[selectedservices_save">
=== Use part service to trigger save in editors
		<indexterm>
			<primary>Editor</primary>
			<secondary>Save</secondary>
		</indexterm>
		<indexterm>
			<primary>Part service</primary>
			<secondary>Trigger save in dirty editors</secondary>
		</indexterm>
		
			The part service allows you to trigger the
			<code>@Persist</code>
			method on the dirty parts via the
			<code>saveAll()</code>
			method.
		
		
			The
			<code>EPartService</code>
			searches in each part which is marked as dirty for a method annotated
			with
			<code>@Persist</code>
			. This method is called by the framework and has to save the data
			which the editor holds. If saving the data was successful it should
			call the
			<code>setDirty(false)</code>
			method on the
			<code>MDirtyable</code>
			object.
		

		
			The following example demonstrates that.
		

		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/partservice/SaveHandler.java" />
			</programlisting>
		



	

[[editorinput">
=== MPart and multiple editors
		<indexterm>
			<primary>Editor</primary>
			<secondary>Multiple instances</secondary>
		</indexterm>
		
			You can use the
			_MPart_
			model element to create multiple editors. Every model element can
			get
			persisted data assigned which can be accessed via the
			<code>getPersistedState()</code>
			method.
		
		
			In its
			@PostConstruct method the implementation class can get the
			<code>MPart</code>
			injected and access
			its persisted state. This information can be used
			to configure the editor.
		


	

[[minputpart">
=== MInputPart
		<indexterm>
			<primary>MInputPart</primary>
		</indexterm>
		
			Eclipse used to have the
			<code>MInputPart</code>
			model element. This model element has been deprecated and should not
			be used anymore.
			Use the approach described
			in
			<xref linkend="editorinput" />
			.
		

	



