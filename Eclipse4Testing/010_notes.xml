
	<title>Testing Eclipse 4 application
[[eclipse4testing_overview">
=== General testing
		In general all Java classes in an Eclipse 4 application can be
			tested similarly to other Java applications. This description
			highlights the special Eclipse 4 constructs.
		
	
[[eclipse4testing_fragments">
=== Fragment projects
		<indexterm>
			<primary>Fragment projects</primary>
			<secondary>Tests</secondary>
		</indexterm>
		Tests for Eclipse plug-ins are typically contained in a fragment
			project. This way the tests can access all classes in their host
			plug-in.
		
	
[[eclipse4testing_ui">
=== Testing user interface components
		<indexterm>
			<primary>Testing</primary>
			<secondary>User interface components</secondary>
		</indexterm>
		
			Eclipse classes that are using the application model have no
			hard
			dependency on
			the Eclipse framework. Therefore you can test these
			components directly with JUnit.
		

		
			For example take the following
			part.
		

		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/snippets/TodoOverviewPart.java" />
			</programlisting>
		

		
			This
			part
			can be created via a simple Java Program which has the
			SWT library
			included in its classpath.
		

		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/snippets/TodoOverviewPartTest.java" />
			</programlisting>
		
		The above code can be easily changed to a unit test. Your test
			class can create the class, provide the
			required
			dependencies and
			run
			the tests.
		

	
[[eclipse4testing_di">
=== Testing dependency injection
		<indexterm>
			<primary>Testing</primary>
			<secondary>Using dependency injection in your tests</secondary>
		</indexterm>
		
			You can include the process of dependency injection into the
			test.
			Create your own
			<code>IEclipseContext</code>
			and use the
			<code>ContextInjectionFactory.make()</code>
			method to create the object which should be tested.
		
		
			The following code shows an example of how to create your own
			context
			and construct the object based on this construct. This test
			needs to
			run as
			_JUnit Plug-in_
			test.
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/snippets/CreateContextText.java" />
			</programlisting>
		

	


