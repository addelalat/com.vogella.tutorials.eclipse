<section id="toolbar">
	<title>Tutorial: Commands and toolbars</title>
	<section id="toolbar_overview"> 
		<title>Overview</title>
		<para> You can add commands to the application toolbar and to a view
			toolbar. </para>
	</section>
	<section id="toolbar_applicationtoolbar">
		<title>Application toolbar (coolbar)</title>
		<para>
			Create a new project
			"de.vogella.rcp.intro.commands.toolbar". Use
			the
			"RCP application
			with a view" as a template. Create a command
			"de.vogella.rcp.intro.commands.toolbar.Hello"
			with the default
			handler
			"de.vogella.rcp.intro.commands.toolbar.handler.Hello". This handler
			will open a
			<ulink url="http://www.vogella.com/tutorials/EclipseDialogs/article.html">JFace Dialog</ulink>
			.
		</para>
		<para>
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/toolbar/Hello.java" />
			</programlisting>
		</para>
		<para> Add a
			menucontribution to the "org.eclipse.ui.menus extension"
			point. Set the
			location URI
			to "toolbar:org.eclipse.ui.main.toolbar".
			Add a
			toolbar to your
			menu contribution.</para>
		<para>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/commandcoolbar10.gif" />
					
				</imageobject>
			</mediaobject>
		</para>
		<para> Add the command
			"de.vogella.rcp.intro.commands.toolbar.Hello" to
			the toolbar. Assign a label and an
			icon to it.</para>
		<para>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/commandcoolbar20.gif" />
					
				</imageobject>
			</mediaobject>
		</para>
		<para>Activate the application toolbar via
			ApplicationWorkbenchWindowAdvisor.java and set the
			configurer.setShowCoolBar(true); (</para>
		<para>
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/toolbar/ApplicationWorkbenchWindowAdvisor.java" />
			</programlisting>
		</para>
		<para> The result should look like the following. If you select the
			element in the toolbar an information dialog should open.</para>
		<para>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/commandcoolbar30.gif" />
					
				</imageobject>
			</mediaobject>
		</para>
	</section>
	<section id="toolbar__viewtoolbar">
		<title>Contribution to the View Toolbar</title>
		<para>You can also add a command directly to a view toolbar. For
			this
			we will extend the previous example. Change the class "Perspective" to the following (a stand-alone view
			does not have a own toolbar).</para>
		<para>
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/toolbar/Perspective.java" />
			</programlisting>
		</para>
		<para>Create a new menu contribution to the extension point
			"org.eclipse.ui.menus" with the locationURI:
			"toolbar:de.vogella.rcp.intro.commands.toolbar.view".  ""toolbar:"" tells the system to add it to the toolbar while the
				second argument is the id of your view.
		</para>
		<para> Create then a new command for this menucontribution and set the
			command id to "de.vogella.rcp.intro.commands.toolbar.Hello". Assign
			the label "Say Hello" to it.</para>
		<para>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/commandview10.gif" />
					
				</imageobject>
			</mediaobject>
		</para>
		<para> Run the application to see your new view contribution.</para>
		<para>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/commandview20.gif" />
					
				</imageobject>
			</mediaobject>
		</para>
	</section>
	<section id="commands_toolbardropdown">
		<title>Drop down list</title>
		<para>The following adds a dropdown list to the application
			coolbar.
		</para>
		<para> This creation is a bit strange. You create a helper drop-down
			command to which later the other (real) commands will be assigned to.
		</para>
		<para> Therefore create a command with the id "referenceToMenuId".
			Maintain also the default handler. For example you could reuse
			"de.vogella.rcp.intro.commands.toolbar.handler.Hello".</para>
		<para>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/commanddropdown06.gif" />
					
				</imageobject>
			</mediaobject>
		</para>
		<para> Add a new menucontribution to the "org.eclipse.ui.menus"
			extension point. Set the location URI to
			"toolbar:org.eclipse.ui.main.toolbar". Add a toolbar to this
			extension and a new command to this new toolbar. As the id use
			"referenceToMenuId" give it a label and an icon and change the style
			to "pulldown".</para>
		<para>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/commanddropdown10.gif" />
					
				</imageobject>
			</mediaobject>
		</para>
		<para> Create a new menucontribution and set the locationURI to:
			"menu:referenceToMenuId"</para>
		<para>
			<tip>referenceToMenuId is the ID we used earlier in
				the command.</tip>
		</para>
		<para> Add your exiting command
			"de.vogella.rcp.intro.commands.toolbar.Hello" two times to this menu.
			Use different labels.</para>
		<para>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/commanddropdown20.gif" />
					
				</imageobject>
			</mediaobject>
		</para>
		<para> Run your application, it should now have a drop-down list in
			the application toolbar.</para>
		<para>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/commanddropdown30.gif" />
					
				</imageobject>
			</mediaobject>
		</para>
		<para>
			<tip> Add the command "referenceToMenuId" to your existing view
				toolbar contribution to get the drop-down menu also in your view.
			</tip>
		</para>
	</section>
</section>