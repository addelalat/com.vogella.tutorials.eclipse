
	<title>Update strategy, converters and validators

[[databinding_updatestrategy">
=== UpdateValueStrategy
		<indexterm>
			<primary>UpdateValueStrategy</primary>
		</indexterm>
		
			The
			<code>bindValue()</code>
			method from
			<code>DataBindingContext</code>
			allows you
			to specify
			<code>UpdateValueStrategy</code>
			objects as third and fourth parameters. These objects allow you to
			control
			how and when the values are updated. The
			following values are permitted:

			<table frame='all'>
		=== UpdateValueStrategy
				<tgroup cols='2' align='left' colsep='1' rowsep='1'>
					<colspec colname='c1' colwidth="1*" />
					<colspec colname='c2' colwidth="1*" />
					<thead>
						<row>
							<entry>Value</entry>
							<entry>Description</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>
								<code>UpdateValueStrategy.POLICY_NEVER</code>
							</entry>
							<entry>Policy constant denoting that the source observable's state should not be
								tracked and that the destination
								observable's value should never be updated.
							</entry>
						</row>
						<row>
							<entry>
								<code>UpdateValueStrategy.POLICY_ON_REQUEST</code>
							</entry>
							<entry>
								Policy constant denoting that the source observable's state should not be
								tracked, but that validation,
								conversion and updating the destination observable's value should be performed when
								explicitly requested. You can
								call
								<code>DataBindingContext.updateModels()</code>
								or
								<code>DataBindingContext.updateTargets()</code>
								to update all bindings at once. Or you can call
								<code>Binding.updateTargetToModel()</code>
								or
								<code>Binding.updateModelToTarget()</code>
								to update a
								single binding.
							</entry>
						</row>
						<row>
							<entry>
								<code>UpdateValueStrategy.POLICY_CONVERT</code>
							</entry>
							<entry>Policy constant denoting that the source observable's state should be
								tracked, including validating changes
								except for validateBeforeSet(Object), but that the destination observable's
								value should only be updated on
								request.
							</entry>
						</row>
						<row>
							<entry>
								<code>UpdateValueStrategy.POLICY_UPDATE</code>
							</entry>
							<entry>Policy constant denoting that the source observable's state should be
								tracked, and that
								validation,
								conversion and
								updating the destination observable's value should be performed
								automatically on every
								change of the
								source
								observable value.
							</entry>
						</row>
					</tbody>
				</tgroup>
			</table>

		
		
			If no
			<code>UpdateValueStrategy</code>
			is specified, the
			<code>UpdateValueStrategy.POLICY_UPDATE</code>
			is used by default.
			You can register converters and validators in the
			<code>UpdateValueStrategy</code>
			object.
		

	
[[databinding_converter">
=== Converter
		<indexterm>
			<primary>JFace Data Binding</primary>
			<secondary>Converter</secondary>
		</indexterm>
		
			_Converters_
			allow to convert the values between the observed properties. Converters are defined based on the
			<code>IConverter</code>
			interface.
		
		
			<code>UpdateValueStrategy.setConverter()</code>
			allows to set the converter.
			The
			<code>IConverter.create(Object, Object, Function)</code>
			allows to create a converter using a lambda
			expression. The static
			<code>UpdateValueStrategy.create(IConverter)</code>
			method allows to create
			an update strategy with a converter.
		
		For example, you can convert a String to another object and vice versa.
		
		
			For example, assume you have a
			<code>Person</code>
			object with a
			<code>programmingSkills</code>
			property.
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/beans/Developer.java" />
			</programlisting>
		
		
			The entries of
			<code>programmingSkills</code>
			should be shown in the
			<code>Text</code>
			widget as text separated by comma. Therefore a conversion is necessary.
		
		
			In order to apply these converters an
			<code>UpdateValueStrategy</code>
			for the
			binding needs to be defined and applied.
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/snippets/Converter.java" />
			</programlisting>
		
	

[[databinding_validator">
=== Validator

		<indexterm>
			<primary>JFace Data Binding</primary>
			<secondary>Validator</secondary>
		</indexterm>
		
			A _validator_
			allows you to implement validation of the data before it is propagated
			to
			the other connected property. A class which
			wants to provide this
			functionality must
			implement the
			<code>org.eclipse.core.databinding.validation.IValidator</code>
			interface.
		

		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/snippets/validator.java" />
			</programlisting>
		

		<tip>
			
				The
				<code>WizardPageSupport</code>
				class provides support to connect the result from the given data
				binding
				context to the given wizard page, updating
				the wizard page's
				completion state and its error message accordingly.
			
		</tip>

	

