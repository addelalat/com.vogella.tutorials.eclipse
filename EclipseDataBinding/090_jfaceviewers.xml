== Data Binding for JFace Viewers

=== Binding Viewers
		<indexterm>
			<primary>JFace Data Binding</primary>
			<secondary>Viewer binding</secondary>
		</indexterm>
		
			JFace data binding provides functionality to bind the data of
			JFace
			viewers.
			Data binding for these viewers
			distinguish between changes in the
			collection and
			changes in the
			individual object.
		
		
			In the case that data binding observes a collection, it requires
			a content provider which notifies the viewer,
			once the data in the
			collection changes.
		
		
			The
			`ObservableListContentProvider`
			class
			is a content provider
			which requires a list implementing the
			`IObservableList`
			interface.
			The
			`Properties`
			class allows you to wrap another list with its
			`selfList()`
			method into an
			`IObservableList`
			.
		
		The following snippet demonstrates the usage:

		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/listviewer/snippet.java[]
----
		

	

=== Observing list details

		
			You can also use the
			`ObservableMapLabelProvider`
			class
			to observe changes of the list elements.
		
		
[source,java]
----
include::res/snippets/ObservableMapLabelProvider.txt[]
----
		



	

=== ViewerSupport
		
			`ViewerSupport`
			simplifies the setup for JFace viewers in cases where selected columns
			should be
			displayed. It
			registers changes
			listeners on the collection as
			well as
			on
			the
			individual
			elements.
		

		
			`ViewerSupport`
			creates via the
			`bind()`
			method
			the
			`LabelProvider`
			and
			`ContentProvider`
			for a viewer
			automatically.
		

		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/viewer/viewer.txt[]
----
		

	

=== Master Detail binding
		
			The
			`ViewerProperties`
			class allows you to create
			`IObservableValue`
			for properties of the viewer. For example you can track the current
			selection, e.g., which data object is currently
			selected. This binding
			is called
			_Master Detail_
			binding as you track the selection of a master.
		
		
			To access fields in the selection you can use the
			`PojoProperties`
			or the
			`BeanProperties`
			class. Both provide the
			`value().observeDetail()`
			method chain,
			which allows you to observe a detailed value of an
			`IObservableValue`
			object.
		
		
			For example the following will map the
			<property>summary</property>
			property of the
			`Todo`
			domain object to a
			`Label`
			based on the selection of a
			`ComboViewer`
			.
		

		
[source,java]
----
include::res/snippets/viewerSelection.java[]
----
		


	

=== Chaining properties
		You can chain properties together to simplify observing nested
			properties. The following examples demonstrate
			this usage.
		
		
[source,java]
----
include::res/chain/listchain.java[]
----
		

		
[source,java]
----
include::res/chain/chain.java[]
----
		

	
