
	<title>Extending data binding with custom observables
	<section>
=== Developing custom observables
		
			Sometimes the observables, which are provided by the factories (see
			<xref linkend="databinding_observable_factories" />
			), are not sufficient and you might want to create a custom
			<code>IObservable</code>
			.
		
		
			This implementation can extend the
			<code>AbstractObservable</code>
			class
			or one
			of it's subclasses, like the
			<code>AbstractObservableValue</code>
			class.
		
		For example the following custom widget allows to set a text.
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/custom_observable/CustomWidget.java" />
			</programlisting>
		

		<note>
			
				Since there is no predefined
				<code>IObservable</code>
				for custom widgets, you have to
				implement a custom one.

				While is is possible to use
				<code>PojoProperties</code>
				class
				to create an
				<code>IObservableValue</code>
				by using
				<code>PojoProperties.value("text").observe(customWidget)</code>
				this would not result in an
				<code>ISWTObservableValue</code>
				.
				Only by using an
				<code>ISWTObservable</code>
				classes like
				<code>ControlDecorationSupport</code>
				would work, because only those offer a
				<code>public Widget getWidget();</code>
				method, so that the widget may be
				decorated.
			
		</note>
	
	<section>
=== Directly implement IObservable
		
			The
			<code>CustomWidgetObservableValue</code>
			extends
			<code>AbstractObservableValue</code>
			and also implements the
			<code>ISWTObservableValue</code>
			interface.
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/custom_observable/CustomWidgetObservableValue.java" />
			</programlisting>
		
		This observable can then be used like this:
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text"
					href="./examples/custom_observable/CustomWidgetObservableSamplePart_Observable.java" />
			</programlisting>
		
	
	<section>
=== Implement an IProperty rather than IObservable directly
		
			A better approach is to implement the
			<code>IProperty</code>
			interface, like
			<code>IValueProperty</code>
			,
			<code>IWidgetValueProperty</code>
			and others.
		
		
			So let's implement the solution of the previous section with an
			<code>IProperty</code>
			implementation.
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/custom_observable/CustomWidgetProperty.java" />
			</programlisting>
		
		
			This
			<code>WidgetValueProperty</code>
			can be used like this:
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text"
					href="./examples/custom_observable/CustomWidgetObservableSamplePart_Property.java" />
			</programlisting>
		
	
	<section>
=== Delegates for common properties of different objects
		
			Delegating properties act a bit like a factory for
			<code>IProperty</code>
			objects,
			where the
			<code>IProperty</code>
			is not created directly, but at the moment, when the
			<code>observe</code>
			method is called. For instance a
			<code>DelegatingValueProperty</code>
			creates a
			<code>IValueProperty</code>
			according
			to the object, which should be observed.
		
		
			So you can decision, which
			<code>IValueProperty</code>
			is used, is made at the moment, when the
			<code>observe</code>
			method is actually called.
		
		
			Imagine, we want such a factory for the
			<code>IValueProperty</code>
			classes we created
			in the former sections. Therefore we can derive from
			<code>DelegatingValueProperty</code>
			.
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text"
					href="./examples/custom_observable/VogellaDelegatingValueProperty.java" />
			</programlisting>
		
		
			In order to have a factory like the
			<code>WidgetProperties</code>
			class, we could
			create a
			<code>VogellaProperties</code>
			class.
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/custom_observable/VogellaProperties.java" />
			</programlisting>
		
		
			You might want to have a look at
			the
			<code>WidgetProperties</code>
			, which contains several methods with more sense for
			those delegates.
		
		Here is the code how to use the factory for "vogella" properties and some samples, which fit to the
			intention of the delegates.
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/custom_observable/VogellaPropertiesPart.java" />
			</programlisting>
		
	

