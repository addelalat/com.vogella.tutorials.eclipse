= Android - Tutorial
:linkcss:
:sectnums:                                                          
:experimental:
:icons:
:imagesdir: ./img
(c) 2009, 2016 vogella GmbH
Version 0.3, 06.07.2016
:docinfodir: ../
:vgwort: 

[abstract]

== Eclipse Debug Framework
	<!-- - Used when the launch framework is used in debug mode - Describe debug 
		model and IDebugElements - Communication between the Debug Framework and 
		the VM or interpreter - A thread only has stack frames when it is suspended. -->

=== Prerequisites for this tutorial
		
			This tutorial assumes that you have basic understanding of
			development
			for the Eclipse platform.
			Please see
			http://www.vogella.com/tutorials/EclipseRCP/article.html">Eclipse RCP Tutorial
			or
			http://www.vogella.com/tutorials/EclipsePlugIn/article.html">Eclipse Plug-in Tutorial
			if you need any basic information.
		
		
			In addition to the basics another requirement is the
			<ulink
				url="http://www.vogella.com/tutorials/EclipseLauncherFramework/article.html">Defining custom launcher for the Eclipse IDE
			tutorial, which should be read beforehand.
		
	

=== Eclipse Debug Model
		
			The Eclipse Debug Model is represented by a hierarchy of model
			interfaces, which are visualized by a the
			_Debug_
			and
			_Variables_
			view, which can usually be found in the Debug perspective of the
			Eclipse IDE.
		
		
image::debug_model_ui.png[Debug model in the UI,pdfwidth=60%]
		
		
			Every debug model element is derived from
			`org.eclipse.debug.core.model.IDebugElement`
			interface.
		
		
			<itemizedlist>
				<listitem>
					
						`org.eclipse.debug.core.model.IDebugTarget`
					
					<itemizedlist>
						<listitem>
							
								`org.eclipse.debug.core.model.IThread`
							
							<itemizedlist>
								<listitem>
									
										`org.eclipse.debug.core.model.IStackFrame`
									
									<itemizedlist>
										<listitem>
											
												`org.eclipse.debug.core.model.IVariable`
											
											<itemizedlist>
												<listitem>
													
														`org.eclipse.debug.core.model.IValue`
													
												</listitem>
											</itemizedlist>
										</listitem>
									</itemizedlist>
								</listitem>
							</itemizedlist>
						</listitem>
					</itemizedlist>
				</listitem>
			</itemizedlist>
		
		<note>
			
				The debug framework also offers an abstract
				`org.eclipse.debug.core.model.DebugElement`
				class as default implementation of
				`IDebugElement`
				interface, which should should be used for implementing these custom
				debug model elements.
			
		</note>
	

=== Debug Model Communication
		The Debug Model Communication is based on events, due to the
			asynchronous nature of the communication between the model and the
			interpreter.
		
		
			For example the
			`IDebugTarget`
			implements the
			`org.eclipse.debug.core.model.ISuspendResume`
			interface with method like
			`suspend()`
			and
			`resume()`
			, which are called synchronously, but are immediately returned. So
			the actual result comes back asynchronously by sending an
			`org.eclipse.debug.core.DebugEvent`
			.
		
		
			Also custom events may be fired asynchronously, as long as this
			is
			done in
			different threads so that the UI won't be blocked. But for
			convenience the
			`org.eclipse.debug.core.DebugEvent`
			objects should be used by deriving the debug model elements from
			`org.eclipse.debug.core.model.DebugElement`
			, which offers default implementations for firing
			`DebugEvents`
			.
		
	
	<section>
=== Attach the IDebugTarget to the launch delegate
		
			`IDebugTargets`
			are added to the launch procedure like this:
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/RegisterDebugTarget.java" />
			</programlisting>
		
		
			A general overview concerning the launcher framework can be found
			in
			the
			<ulink
				url="http://www.vogella.com/tutorials/EclipseLauncherFramework/article.html">Defining custom launcher for the Eclipse IDE
			tutorial.
		
	

