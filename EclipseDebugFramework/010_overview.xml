= Android - Tutorial
:linkcss:
:sectnums:                                                          
:experimental:
:icons:
:imagesdir: ./img
(c) 2009, 2016 vogella GmbH
Version 0.3, 06.07.2016
:docinfodir: ../
:vgwort: 

[abstract]
<section id="eclipse_debug_framework_overview">
	<title>Eclipse Debug Framework</title>
	<!-- - Used when the launch framework is used in debug mode - Describe debug 
		model and IDebugElements - Communication between the Debug Framework and 
		the VM or interpreter - A thread only has stack frames when it is suspended. -->
	<section id="eclipse_debug_framework_prerequisites">
		<title>Prerequisites for this tutorial</title>
		<para>
			This tutorial assumes that you have basic understanding of
			development
			for the Eclipse platform.
			Please see
			<ulink url="http://www.vogella.com/tutorials/EclipseRCP/article.html">Eclipse RCP Tutorial</ulink>
			or
			<ulink url="http://www.vogella.com/tutorials/EclipsePlugIn/article.html">Eclipse Plug-in Tutorial</ulink>
			if you need any basic information.
		</para>
		<para>
			In addition to the basics another requirement is the
			<ulink
				url="http://www.vogella.com/tutorials/EclipseLauncherFramework/article.html">Defining custom launcher for the Eclipse IDE</ulink>
			tutorial, which should be read beforehand.
		</para>
	</section>
	<section id="eclipse_debug_model">
		<title>Eclipse Debug Model</title>
		<para>
			The Eclipse Debug Model is represented by a hierarchy of model
			interfaces, which are visualized by a the
			<guilabel>Debug</guilabel>
			and
			<guilabel>Variables</guilabel>
			view, which can usually be found in the Debug perspective of the
			Eclipse IDE.
		</para>
		<para>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/debug_model_ui.png"/>
				</imageobject>
				<textobject>
					<phrase>Debug model in the UI</phrase>
				</textobject>
			</mediaobject>
		</para>
		<para>
			Every debug model element is derived from
			<code>org.eclipse.debug.core.model.IDebugElement</code>
			interface.
		</para>
		<para>
			<itemizedlist>
				<listitem>
					<para>
						<code>org.eclipse.debug.core.model.IDebugTarget</code>
					</para>
					<itemizedlist>
						<listitem>
							<para>
								<code>org.eclipse.debug.core.model.IThread</code>
							</para>
							<itemizedlist>
								<listitem>
									<para>
										<code>org.eclipse.debug.core.model.IStackFrame</code>
									</para>
									<itemizedlist>
										<listitem>
											<para>
												<code>org.eclipse.debug.core.model.IVariable</code>
											</para>
											<itemizedlist>
												<listitem>
													<para>
														<code>org.eclipse.debug.core.model.IValue</code>
													</para>
												</listitem>
											</itemizedlist>
										</listitem>
									</itemizedlist>
								</listitem>
							</itemizedlist>
						</listitem>
					</itemizedlist>
				</listitem>
			</itemizedlist>
		</para>
		<note>
			<para>
				The debug framework also offers an abstract
				<code>org.eclipse.debug.core.model.DebugElement</code>
				class as default implementation of
				<code>IDebugElement</code>
				interface, which should should be used for implementing these custom
				debug model elements.
			</para>
		</note>
	</section>
	<section id="eclipse_debug_operations">
		<title>Debug Model Communication</title>
		<para>The Debug Model Communication is based on events, due to the
			asynchronous nature of the communication between the model and the
			interpreter.
		</para>
		<para>
			For example the
			<code>IDebugTarget</code>
			implements the
			<code>org.eclipse.debug.core.model.ISuspendResume</code>
			interface with method like
			<code>suspend()</code>
			and
			<code>resume()</code>
			, which are called synchronously, but are immediately returned. So
			the actual result comes back asynchronously by sending an
			<code>org.eclipse.debug.core.DebugEvent</code>
			.
		</para>
		<para>
			Also custom events may be fired asynchronously, as long as this
			is
			done in
			different threads so that the UI won't be blocked. But for
			convenience the
			<code>org.eclipse.debug.core.DebugEvent</code>
			objects should be used by deriving the debug model elements from
			<code>org.eclipse.debug.core.model.DebugElement</code>
			, which offers default implementations for firing
			<code>DebugEvents</code>
			.
		</para>
	</section>
	<section>
		<title>Attach the IDebugTarget to the launch delegate</title>
		<para>
			<code>IDebugTargets</code>
			are added to the launch procedure like this:
		</para>
		<para>
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/RegisterDebugTarget.java" />
			</programlisting>
		</para>
		<para>
			A general overview concerning the launcher framework can be found
			in
			the
			<ulink
				url="http://www.vogella.com/tutorials/EclipseLauncherFramework/article.html">Defining custom launcher for the Eclipse IDE</ulink>
			tutorial.
		</para>
	</section>
</section>
