<?xml version="1.0" encoding="UTF-8"?>
<section id="eclipse_debug_framework_breakpoints">
	<title>Breakpoints</title>
	<section id="eclipse_breakpoint_debug_model">
		<title>Eclipse Breakpoint Debug Model</title>
		<para>Breakpoints in general are used to suspend the execution of an
			application at a certain point.
		</para>
		<para>
			In Eclipse breakpoint classes are derived from the
			<code>org.eclipse.debug.core.model.IBreakpoint</code>
			interface. As listed below there are also default implementation for
			breakpoints, as well as more specific breakpoints, e.g.,
			<code>ILineBreakpoint</code>
			, which also informs about a certain position in a document.
		</para>
		<para>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/breakpoint_hierarchy.png"
						scale="40" />
				</imageobject>
				<textobject>
					<phrase>Class hierarchy of IBreakpoint</phrase>
				</textobject>
			</mediaobject>
		</para>
	</section>
	<section id="eclipse_breakpoint_debug_extension_points">
		<title>Registering custom breakpoints</title>
		<para>
			Eclipse provides the
			<parameter>org.eclipse.debug.core.breakpoints</parameter>
			extension point for registering custom
			<code>IBreakpoint</code>
			classes.
		</para>
		<para>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/breakpoint_ext_point.png"
						scale="40" />
				</imageobject>
				<textobject>
					<phrase>IBreakpoint extension point</phrase>
				</textobject>
			</mediaobject>
		</para>
		<para>
			In this definition a
			<parameter>markerType</parameter>
			attribute is used, because breakpoints do have a reference to an
			<code>IMarker</code>
			, which represents the breakpoint in the UI and it is also used for
			the persistence of breakpoints.
		</para>
		<para>
			Therefore the
			<parameter>org.eclipse.core.resources.markers</parameter>
			extension point is used.
		</para>
		<para>
			<programlisting language="xml">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/breakpoint_marker_sample.xml" />
			</programlisting>
		</para>
	</section>
	<section id="eclipse_breakpoint_creation">
		<title>Creating breakpoints in the Eclipse IDE</title>
		<para>
			The easiest approach to create custom breakpoints is to provide an
			implementation of
			<code>org.eclipse.debug.ui.actions.IToggleBreakpointsTarget</code>
			.
		</para>
		<para>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/togglebreakpointstarget_hierarchy.png"
						scale="40" />
				</imageobject>
				<textobject>
					<phrase>IToggleBreakpointsTarget type hierarchy</phrase>
				</textobject>
			</mediaobject>
		</para>
		<para>
			For instance the
			<code>IToggleBreakpointsTargetExtension</code>
			interface provides a
			<code>public boolean canToggleBreakpoints(IWorkbenchPart part,
				ISelection selection)
			</code>
			method and a
			<code>public void toggleBreakpoints(IWorkbenchPart part, ISelection
				selection) throws CoreException;
			</code>
			where a breakpoint can be toggled according to the current
			<code>ISelection</code>
			and/or
			<code>IWorkbenchPart</code>
			.
		</para>
		<para>
			These
			<code>IToggleBreakpointsTarget</code>
			implementations are often provided as an adapter for custom
			<code>IDebugElements</code>
			.
		</para>
		<para>
			<programlisting language="xml">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/togglebreakpoint_adapter.xml" />
			</programlisting>
		</para>
	</section>
	<section id="eclipse_breakpoint_manager">
		<title>Registering breakpoints in the IBreakpointManager</title>
		<para>
			When an
			<code>IBreakpoint</code>
			is created, e.g., by a
			<code>IToggleBreakpointsTarget</code>
			, it must be registered to the workspace's
			<code>IBreakpointManager</code>
			.
		</para>
		<para>
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/RegisterBreakpoint.java" />
			</programlisting>
		</para>
		<para>
			When adding or removing
			<code>IBreakpoints</code>
			from the
			<code>IBreakpointManager</code>
			its
			<code>IBreakpointListener</code>
			will be informed about it and can act upon the added or removed
			breakpoint.
		</para>
		<para>
			An
			<code>IDebugTarget</code>
			is an instance of
			<code>IBreakpointListener</code>
			by default and is therefore in charge to manage changes concerning
			breakpoints.
		</para>
	</section>
</section>
