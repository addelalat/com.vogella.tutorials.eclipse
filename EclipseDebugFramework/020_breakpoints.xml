= Android - Tutorial
:linkcss:
:sectnums:                                                          
:experimental:
:icons:
:imagesdir: ./img
(c) 2009, 2016 vogella GmbH
Version 0.3, 06.07.2016
:docinfodir: ../
:vgwort: 

[abstract]
== Breakpoints

=== Eclipse Breakpoint Debug Model
		Breakpoints in general are used to suspend the execution of an
			application at a certain point.
		
		
			In Eclipse breakpoint classes are derived from the
			`org.eclipse.debug.core.model.IBreakpoint`
			interface. As listed below there are also default implementation for
			breakpoints, as well as more specific breakpoints, e.g.,
			`ILineBreakpoint`
			, which also informs about a certain position in a document.
		
		
image::breakpoint_hierarchy.png"
						scale="40[Class hierarchy of IBreakpoint]
		
	

=== Registering custom breakpoints
		
			Eclipse provides the
			_org.eclipse.debug.core.breakpoints_
			extension point for registering custom
			`IBreakpoint`
			classes.
		
		
image::breakpoint_ext_point.png"
						scale="40[IBreakpoint extension point]
		
		
			In this definition a
			_markerType_
			attribute is used, because breakpoints do have a reference to an
			`IMarker`
			, which represents the breakpoint in the UI and it is also used for
			the persistence of breakpoints.
		
		
			Therefore the
			_org.eclipse.core.resources.markers_
			extension point is used.
		
		
[source,xml]
----
include::res/breakpoint_marker_sample.xml[]
----
		
	

=== Creating breakpoints in the Eclipse IDE
		
			The easiest approach to create custom breakpoints is to provide an
			implementation of
			`org.eclipse.debug.ui.actions.IToggleBreakpointsTarget`
			.
		
		
image::togglebreakpointstarget_hierarchy.png"
						scale="40[IToggleBreakpointsTarget type hierarchy]
		
		
			For instance the
			`IToggleBreakpointsTargetExtension`
			interface provides a
			`public boolean canToggleBreakpoints(IWorkbenchPart part,
				ISelection selection)
			`
			method and a
			`public void toggleBreakpoints(IWorkbenchPart part, ISelection
				selection) throws CoreException;
			`
			where a breakpoint can be toggled according to the current
			`ISelection`
			and/or
			`IWorkbenchPart`
			.
		
		
			These
			`IToggleBreakpointsTarget`
			implementations are often provided as an adapter for custom
			`IDebugElements`
			.
		
		
[source,xml]
----
include::res/togglebreakpoint_adapter.xml[]
----
		
	

=== Registering breakpoints in the IBreakpointManager
		
			When an
			`IBreakpoint`
			is created, e.g., by a
			`IToggleBreakpointsTarget`
			, it must be registered to the workspace's
			`IBreakpointManager`
			.
		
		
[source,java]
----
include::res/RegisterBreakpoint.java[]
----
		
		
			When adding or removing
			`IBreakpoints`
			from the
			`IBreakpointManager`
			its
			`IBreakpointListener`
			will be informed about it and can act upon the added or removed
			breakpoint.
		
		
			An
			`IDebugTarget`
			is an instance of
			`IBreakpointListener`
			by default and is therefore in charge to manage changes concerning
			breakpoints.
		
	

