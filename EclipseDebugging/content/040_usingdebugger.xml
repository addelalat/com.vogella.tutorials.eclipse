== Debugging in Eclipse

=== Setting Breakpoints

		
			To set
			breakpoints in your source code right-click in the small left
			margin in your
			source
			code editor
			and select
			_Toggle Breakpoint_
			. Alternatively you can
			double-click
			on this position.
		

		
image::setbreakpoint10.gif[Setting a breakpoint,pdfwidth=60%]
		
		
			For example in the following screenshot we set a breakpoint on
			the
			line
			`Counter counter = new Counter();`
			.
		
		
image::setbreakpoint12.png[Showing a defined breakpoint,pdfwidth=60%]
		


	

=== Starting the Debugger

		
			To debug your application, select a Java file
			which can be executed,
			right-click on it and select
			menu:Debug As[Java Application]
			.
		

		
image::debugstart10.gif[Start the debugger,pdfwidth=60%]
		
		
			After you have started the application once via the context menu, you
			can
			use the created launch configuration again via the
			_Debug_
			button in the Eclipse toolbar.
		
		
image::debugtoolbar10.png[Debug button,pdfwidth=60%]
		

		
			If you have not defined any breakpoints, this will run your
			program as normal. To debug the program you
			need to define
			breakpoints.
		
		
			If you start the debugger, Eclipse asks
			you
			if you
			want
			to switch to the
			_Debug_
			_perspective_
			once a stop point is reached.
			Answer
			_Yes_
			in the corresponding dialog.
		
		
image::debugstart08.png[,pdfwidth=60%]
		
		
			Afterwards Eclipse opens this
			_perspective_
			, which
			looks
			similar to the following screenshot.

		
		
image::debugstart20.gif[Switch to perspective,pdfwidth=60%]
		
	

=== Controlling the program execution

		Eclipse provides buttons in the toolbar for controlling the
			execution of the program you are debugging. Typically it is easier to
			use the corresponding keys to control this execution.
		

		
			You can use the F5, F6, F7 and F8 key to step through your coding.
			The
			meaning of these keys is explained in the following table.

.Table Title
|===

		=== Debugging key bindings / shortcuts
				<tgroup cols='2' align='left' colsep='1' rowsep='1'>
					<colspec colname='c1' colwidth="1*" />
					<colspec colname='c2' colwidth="4*" />
					
						
|Key
|Description
						
					
					
						
|F5 
|Executes the currently selected line and goes to the next
								line in
								your program. If the selected line is a method call the
								debugger steps into the
								associated
								code.
							
						
						
|F6 
|F6
								steps over the call, i.e. it executes a method
								without
								stepping into it in
								the debugger.
							
						
						
|F7
|F7 steps out to the caller of the
								currently executed
								method.
								This
								finishes the
								execution of the current method and
								returns to
								the
								caller of
								this method.
							
						
						
|F8
|F8 tells the Eclipse debugger to resume the execution of
								the
								program code until is reaches the next breakpoint or
								watchpoint.
							
						

					
				
			|===
		

		
			The
			following picture
			displays
			the buttons and their related
			keyboard
			shortcuts.
		

		
image::debugstart30.gif" scale="80[Debug Shortcuts,pdfwidth=60%]
		
		
			The call stack shows the parts of the program which are currently
			executed and how they relate to each other. The current stack is
			displayed in the
			_Debug_
			view
			.
		
		
image::stack10.gif" scale="50[Showing the stack view,pdfwidth=60%]
		
	



=== Breakpoints view and deactivating breakpoints


		
			The
			_Breakpoints_
			view
			allows you to delete and deactivate
			_stop points_
			, i.e.
			_breakpoints_
			and
			_watchpoints_
			and to modify their properties.
		
		
			To deactivate a breakpoint, remove the corresponding checkbox in the
			_Breakpoints_
			view
			.
			To delete it you can use
			the
			corresponding buttons in the
			view
			toolbar. These options are depicted in the following screenshot.
		
		
image::breakpointview10.png[Breakpoint view,pdfwidth=60%]
		
		
			If you want to deactivate all your breakpoints you
			can
			press the
			_Skip all breakpoints_
			button. If you press it again, your breakpoints are
			reactivated. This
			button is highlighted in the following screenshot.
		
		
image::skipbreakpoints10.gif[De-activating all breakpoints,pdfwidth=60%]
		
	



=== Evaluating variables in the debugger

		
			The
			_Variables_
			view
			displays fields and local variables from
			the
			current executing stack.
			Please note
			you need to run the debugger to see the
			variables in this
			view
			.
		


		
image::variables10.gif" scale="50[Variables View,pdfwidth=60%]
		
		 Use the drop-down menu to display static variables.
		
image::variables20.gif[Drop-down menu for static variables,pdfwidth=60%]
		

		
			Via the drop-down menu of the
			_Variables_
			view
			you can customize the displayed columns.

			For example,
			you can show
			the
			actual type of each variable
			declaration. For this select
			menu:Layout[Select Columns... > Type]
			.
		
		
image::variables30.gif[Showing the actual type of the variables,pdfwidth=60%]
		
	


=== Changing variable assignments in the debugger
	
		
			The
			_Variables_
			view
			allows you to change the values assigned to your variable at runtime.
			This is
			depicted in the following screenshot.
		
		
image::variablesview_change10.png"
						scale="40[Changing the value of a variable,pdfwidth=60%]
		
	

=== Controlling the display of the variables with Detail Formatter
		
			By default the
			_Variables_
			view
			uses the
			`toString()`
			method to determine how to display the variable.
		

		
			You can define a
			_Detail Formatter_
			in which you can use Java code to
			define how a variable is displayed.
		

		

			For example the
			`toString()`
			method in the
			`Counter`
			class
			may show meaningless information, e.g.
			`de.vogella.combug.first.Counter@587c94`
			. To make this output more readable you can right-click on the
			corresponding variable
			and select the
			menu:New Detail Formater</guimenu>
			</menuchoice>
			entry from the context menu.
		

		
image::variables40.gif[New Detail Formater Screenshot,pdfwidth=60%]
		

		
			Afterwards you can use a method of this class to determine the
			output. In this example the
			`getResult()`
			method of this class is used. This setup is depicted in the following
			screenshot.
		

		
image::variables50.gif[Detailled formater example,pdfwidth=60%]
		

	

