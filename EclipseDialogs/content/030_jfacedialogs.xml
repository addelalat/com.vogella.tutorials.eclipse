
== JFace Dialogs
	<indexterm>
		<primary>Dialog</primary>
		<secondary>JFace</secondary>
	</indexterm>

=== Dialogs from JFace
		
			JFace contains several
			frequently used dialogs which are not
			based on the
			native dialogs as
			well as
			a framework for
			building custom
			dialogs.
		
		<note>
			Even though JFace dialogs are not native, they follow the
				native platform semantics for things like the button
				order.
			
		</note>
	


=== Using the static helper methods of the JFace MessageDialog class
		


		
			The
			`MessageDialog`
			class
			provides static methods to open commonly used
			dialogs, for
			example
			an
			information
			or a warning
			dialog. The following
			code demonstrates the
			usage
			of
			these static methods.
		

		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="../examples/jface/messageDialogStandardjava" />
			</programlisting>
		
	

=== Using the JFace MessageDialog class directly

		
			The
			`MessageDialog`
			class also allows the customization of the
			buttons in the dialog.
			The
			following code demonstrates its
			usage.
		

		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="../examples/jface/messageDialog.java" />
			</programlisting>
		

		If you open this dialog, it looks similar to the following
			screenshot.
		

		
image::jface_customdialog10.png[JFace own dialog,pdfwidth=60%]
		
		
			Several of these dialogs return the user selection, e.g.
			the
			`openConfirm()`
			method returns
			true if the user selected the
			_OK_
			button.
			The following example code prompts the user for confirmation
			and handles the result.
		
		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="../examples/jface/MessageDialog1.java" />
			</programlisting>
		
	

=== ErrorDialog
		
		
			The
			`ErrorDialog`
			class can be used
			to display one or more errors to the user. If an
			error
			contains
			additional detailed information then a
			button is
			automatically
			added, which shows or hides this information when
			pressed by the
			user.
		
		
			The following snippet shows a handler class which
			uses this
			dialog.
		

		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="../examples/jface/ShowErrorDialogHandler.java" />
			</programlisting>
		

		If you trigger this handler, the dialog shows the exception
			messages and the detail page contains the stacktrace,
			as depicted in
			the
			following screenshot.
		
		
image::errordialog_jface10.png[ErrorDialog,pdfwidth=60%]
		
	

=== Creating a custom dialog
		
			The
			`org.eclipse.jface.dialogs.Dialog`
			class can be extended to create your own
			dialog implementation. This
			class creates an
			area in which you can place
			controls and add
			an
			_OK_
			and
			_Cancel_
			button (or other custom buttons).
		
		
			Your class needs to implement the
			`createDialogArea()`
			method. This method gets a
			`Composite`
			which expects to get a
			`GridData`
			object assigned as its layout data. Via the
			`super.createDialogArea(parent)`
			method call, you can create a
			`Composite`
			to which you can add your controls. This is demonstrated by the
			following example code.
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="../examples/jface/MyDialog.java" />
			</programlisting>
		
		<tip>
			
				The example code demonstrates how to set the title of your custom
				dialog via the
				`configureShell()`
				method.
			
		</tip>
		If you open this dialog it looks similar to the following
			screenshot.
		
		
image::jface_customdialog02.png[Custom dialog,pdfwidth=60%]
		
	


=== TitleAreaDialog
		
			You can also implement your custom
			dialog
			based on the
			`TitleAreaDialog`
			class.
		
		

			`TitleAreaDialog`
			has a reserved space for providing feedback to the user. You can set
			the text in this space via the
			`setMessage()`
			and
			`setErrorMessage()`
			methods.
		
		
			The following example shows a custom defined
			`TitleAreaDialog`
			.
		

		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="../examples/jface/MyTitleAreaDialog.java" />
			</programlisting>
		
		This dialog is depicted in the following screenshot.
		
image::jface_customdialog20.png[Custom dialog,pdfwidth=60%]
		
		
			The usage of this dialog is demonstrated in the
			following code
			snippet. This code might for example be used in a
			handler.
		
		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="../examples/jface/OpenMyDialog.java" />
			</programlisting>
		
	


