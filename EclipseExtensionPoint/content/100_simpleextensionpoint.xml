
	<title>Exercise: Create and evaluate an extension point
[[tutorialextensionpoint_overview">
=== Target for this exercise
		
			In this exercise you create two new plug-ins. The first one
			contains an extension point and the second
			contributes an
			extension
			to
			this new extension point. This exercise is to demo the creation and
			usage of extension
			points. The result
			is not intended to
			be a realistic
			feature.
		
	
[[tutorialextensionpoint_extensionprovider">
=== Creating a plug-in for the extension point definition
		
			Create a new plug-in project called
			_com.vogella.extensionpoint.definition_
			based on the settings of the following screenshot.
		
		
image::extensionpoint_projectwizard10.png"/>

				</imageobject>
				<textobject>
					<phrase>Project Wizard to create the plug-in which defines the
						extension,pdfwidth=60%]
		
		
image::extensionpoint_projectwizard20.png"/>

				</imageobject>
				<textobject>
					<phrase>Project Wizard to create the plug-in which defines the
						extension,pdfwidth=60%]
		

	

[[tutorialextensionpoint_defineextension">
=== Create an extension point
		
			Open the
			<filename>MANIFEST.MF</filename>
			file
			or the
			<filename>plugin.xml</filename>
			file and select the
			_Extension Points_
			tab.
		
		
image::extensionpoint10.png"/>

				</imageobject>
			</mediaobject>
		
		

			Press the
			<guibutton>Add...</guibutton>
			button.
		
		
			Enter
			"com.vogella.extensionpoint.definition.greeter" as
			_Extension Point ID_
			and
			"Greeter" as
			_Extension Point Name_
			in the dialog. The
			_Extension Point Schema_
			field is automatically
			populated based on your input.
		
		
image::extensionpoint20.png"/>

				</imageobject>
				<textobject>
					<phrase>Define Extension Point,pdfwidth=60%]
		
		
			Press the
			<guibutton>Finish</guibutton>
			button.
			The definition of the extension is generated and the
			schema
			editor
			opens. Switch to the
			_Definition_
			tab.
		
		
image::extensionpoint30.png[Extension Point Schema Editor,pdfwidth=60%]
		
		
			Add attributes
			to the extension point. For that click
			on
			the
			_New Element_
			button. Give the new element the name "client".
		
		
image::extensionpoint40.png[Add Elements to Extension,pdfwidth=60%]
		
		
			Select the "client" element and press
			<guibutton>New Attribute</guibutton>
			. Give the
			new
			element the name "class" and the type "java". Enter
			<code>com.vogella.extensionpoint.definition.IGreeter</code>
			as interface name
		
		
image::extensionpoint50.png" scale="35" />
				</imageobject>
				<textobject>
					<phrase>Add Attribute to Extension,pdfwidth=60%]
		
		
			This interface doesn't exit yet. Press on the
			hyperlink called
			_Implements_
			to
			create it based on the
			following code.
		
		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="../examples/simple/IGreeter.java" />
			</programlisting>
		

		
			Go back to your extension point definition and add a choice to
			the
			extension point. For this select the
			_extension_
			entry, right-click on it and select
			menu:New[Choice]
			.
			This defines how often the extension "client" can
			be provided by
			contributing plug-ins. We will set no restrictions
			(unbound).
		
		
image::extensionpoint70.png"/>

				</imageobject>
			</mediaobject>
		

		
image::extensionpoint80.png"/>

				</imageobject>
			</mediaobject>
		
		
image::extensionpoint90.png"/>

				</imageobject>
			</mediaobject>
		
		
image::extensionpoint92.png"/>

				</imageobject>
			</mediaobject>
		
	
[[tutorialextensionpoint_export">
=== Export the package
		
			Select the
			<filename>MANIFEST.MF</filename>
			file switch to the
			_Runtime_
			tab and
			export
			the
			package which contains the
			<code>IGreeter</code>
			interface.
		
		
image::extensionpoint100.png[Export IGreeter package</phrase>
				</textobject>

			</mediaobject>
		

	
[[tutorialextensionpoint_dependencies">
=== Add dependencies
		
			Add the following dependencies via the
			<filename>MANIFEST.MF</filename>
			file of your new plug-in:

			<itemizedlist>
				<listitem>
					
						<code>org.eclipse.core.runtime</code>
					
				</listitem>
				<listitem>
					
						<code>org.eclipse.e4.core.di</code>
					
				</listitem>
			</itemizedlist>
			.
		
	
[[tutorialextensionpoint_readingextension">
=== Evaluating the registered extensions
		
			The defining plug-in also evaluates the existing extension
			points. In the following example you create a handler
			class which can
			evaluate the existing extensions.
		
		Create the following class.
		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text"
					href="../examples/simple/EvaluateContributionsHandler.java" />
			</programlisting>
		
		
			The code above uses
			the
			<code>ISafeRunnable</code>
			interface. This interface protects the plug-in which defines
			the
			extension point from malfunction extensions. If an
			extension throws an
			<code>Exception</code>
			, it will be caught by
			<code>ISafeRunnable</code>
			and
			the remaining extensions will still get executed.
		

		
			Review the
			<filename>.exsd</filename>
			schema file and
			the
			reference to this file in the
			<filename>plugin.xml</filename>
			file.
		
	
[[tutorialextensionpoint_handler">
=== Create a menu entry and add it to your product
		
			Add a dependency to the
			<code>com.vogella.extensionpoint.definition</code>
			plug-in
			in the
			<filename>MANIFEST.MF</filename>
			file of your application plug-in.
		
		
			Afterwards create a new menu entry called
			_Evaluate extensions_
			and define a command and handler for this menu entry. In the handler
			point to the
			<code>EvaluateContributionsHandler</code>
			class.
		
		Also update your product (via your features) so that the new
			plug-in is part of your application.
		
		<note>
			A better approach would be to add the menu entry via a model
				fragment or a model processor, but I leave that as
				an additional
				exercise to the reader.
			
		</note>
	

[[tutorialextensionpoint_usingextension">
=== Providing an extension
		
			Create a new simple plug-in called
			_com.vogella.extensionpoint.contribution_
			.
		

		
			Open the
			<filename>MANIFEST.MF</filename>
			editor of this new plug-in and select the
			_Dependencies_
			tab.

			Add the
			<code>com.vogella.extensionpoint.definition</code>
			and
			<code>org.eclipse.core.runtime</code>
			plug-ins
			as dependencies. Make sure
			your plug-in has
			the
			_This plug-in is a singleton_
			flag
			set on the
			_Overview_
			tab for your
			<filename>MANIFEST.MF</filename>
			file.
		

		
image::extensionpoint110.png"/>

				</imageobject>
			</mediaobject>
		
		
			Switch to the
			_Extensions_
			tab and select
			<guibutton>Add...</guibutton>
			. Select your custom
			extension point
			and press the
			_Finish_
			button.
		
		
image::extensionpoint120.png"/>

				</imageobject>
			</mediaobject>
		

		Add a client to your extension point via right-click.
		
image::extensionpoint130.png"/>

				</imageobject>
			</mediaobject>
		

		
image::extensionpoint140.png"/>

				</imageobject>
			</mediaobject>
		

		
			Create the
			<code>GreeterGerman</code>
			class
			with the
			following code.
		

		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="../examples/simple/GreeterGerman.java" />
			</programlisting>
		
	
[[tutorialextensionpoint_add">
=== Add the plug-in to your product
		
			Add the
			<code>com.vogella.extensionpoint.definition</code>
			plug-in
			to your product (via your features).
		
	
[[tutorialextensionpoint_validate">
=== Validating
		Start your application via the product configuration file to
			update the plug-ins included in the run
			configuration.
		
		
			In your running application
			select
			your new menu entry.
			The handler
			class write the output of your extensions to the
			_Console_
			view
			of your Eclipse IDE.
		

	

