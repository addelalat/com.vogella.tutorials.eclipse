== Exercise: Working with a local Git repository in Eclipse

=== Target: Using Eclipse Git for a local repository

		 The following section explains how to create a local Git
			repository for
			one
			project with Eclipse. This allows you
			to keep
			track
			of your changes in the project and allows you to
			revert to another
			state at a
			later
			point in time.
		
	


=== Create a new Git repository via Eclipse

		
			Open the
			_Git Repositories_
			view and select the
			_Create a new Git repository and add it to this view_
			option.
		
		
image::egit_gitinit10.png[Git init with Eclipse Git]
		

		
			Select a new directory outside of your workspace. By convention this
			directory should be a subdirectory in the
			_git_
			folder of the users home directory.
		
		
image::egit_gitinit20.png[Git init with Eclipse Git]
		
		
			If you press the
			_Finish_
			button this dialog creates the directory and adds a reference to the
			new Git
			repository
			to the
			_Git Repositories_
			view.
		

		
image::egit_gitinit30.png" scale="50[Git init with Eclipse Git]
		

	


=== Create .gitignore file
		
			You want to configure Git to ignore the generated bin folder with the
			class files. Create for this purpose a
			_.gitignore _
			file in your Git repository
			with the following
			content. Unfortunately Eclipse Git does not allow to create a file
			directly in the repository. You have to do this step via the command line or via your system project explorer.
		

		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/gitignore/gitignore[]
----
		
		
			All files and
			directories which apply to the pattern described
			in this
			file will be
			ignored by
			_Git_
			. In this example all files in the
			<filename class="directory">bin_
			are
			be ignored.
		
		
			You can also create a local
			_.gitignore_
			file by right-clicking on a resource (file or folder)
			and by selecting
			the
			menu:Team[Ignore]
			context menu entry. Excluding individual files can be time consuming.
			Preferably you define a pattern in your
			_.gitignore_
			file in the root directory of the repository.
		
		NOTE:
			
				You can also configure Eclipse to automatically ignore derived
				resources, e.g., class files via the
				menu:
					<guimenu>Window</guimenu>
					<guisubmenu>Preferences</guisubmenu>
					<guisubmenu>Team</guisubmenu>
					<guisubmenu>Git</guisubmenu>
					<guisubmenu>Projects</guisubmenu>
					<guisubmenu>Automatically ignore derived resources ..</guisubmenu>
				</menuchoice>
				setting.
			
		
	


=== Creating an Eclipse project
		
			Create a new Java project called
			_com.vogella.git.first_
			in
			Eclipse. Create the
			`com.vogella.git.first`
			package and the following
			class.
		

		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/gitfirst/GitTest.java[]
----
		
	

=== Put project under version control

		
			To put your new project under version control with Git, right-click
			on your
			project, select
			menu:Team[Share Project > Git]
			.
		

		
			Depending on your installation you may have to select that you
			want to use Git as a
			version control
			system.
		

		
image::gitfirst02.png[Git repository creation wizard - Step 1]
		
		
			On the next dialog select your existing Git repository from the
			drop-down list and press the
			_Finish_
			button.
		
		
image::gitfirst10.png[Git repository creation wizard - Step 1]
		

		
			This moves the project to your Git repository. The Git repository is
			in
			this
			case directly stored in the specified
			folder in a
			<filename class="directory">.git_
			folder. The following screenshot shows the generated directory
			structure. The
			_.git_
			directory contains the Git repository, the other
			directories contain
			the files of the working tree.
		
		
image::gitfirst40.png[Git repository creation result]
		
	



=== Using the Git Staging view for the initial commit
		
			Using the
			_Git Staging_
			view to drag all files into the
			_Staged Changes_
			area, write a meaningful commit message and press the commit button.
		
		
image::gitstaging10.png[Initial commit]
		

	

=== Using the Git Staging view for committing changes

		
			Change the
			`System.out.println`
			message in your
			`GitTest`
			class.
		

		
[source,java]
----
include::res/change/GitTest.java[]
----
		

		
			Also create a new file called
			_Readme.md_
		
		
			In this example you should commit the changes
			of the
			`GitTest`
			class
			but not add and commit the
			_Readme.md_
			file to the Git repository.
		
		
			Using the
			_Git Staging_
			view
			drag only the
			`GitTest`
			class into the
			_Staged Changes_
			area, write a meaningful commit message and press the commit button.
		
		
image::gitstaging30.png[Git Staging View - Add to staging area]
		

		
			This change is now also stored in your local
			_Git_
			repository. The
			_Readme.md_
			file
			is neither staged nor committed to the Git repository.
		
	

=== Commit more files
		
			Commit the
			_Readme.md_
			file. By now you should know that you have to stage the file and
			commit it.
		
	

=== Review your commit history via the History view
		
			Open the
			_History_
			view to browse the commit history of your repository. See
			<<githistoryview" />
			for information how to use this view. Review which files were
			included in
			your individual commits.
		
		
			In the
			_History_
			view click all toggle buttons as shown in the
			screenshot (Link with Editor and Selection, Show
			all
			changes in repository
			containing the
			selected
			resources, Compare Mode, Show all Branches and Tags)
		
		
			<inlinemediaobject>
				<imageobject>
					<imagedata fileref="./images/exericse_historyview20.png[]
				
				<textobject>
					`
					<phrase>History View</phrase>
				</textobject>
			</inlinemediaobject>
		
	

=== Open an older version of a file via the History view

		
			Open the version for the first commit of
			`GitTest`
			via the
			_History_
			view.
		
		
			<inlinemediaobject>
				<imageobject>
					<imagedata fileref="./images/exericse_historyview30.png[History View</phrase>
				</textobject>
			</inlinemediaobject>
		

	


=== Add more projects to your Git repository
		
			You can of course have more than one Eclipse project in your Git repository.
			To validate that, create two more Java
			projects called
			_com.vogella.egit.multi.java1_
			and
			_com.vogella.egit.multi.java2_
			. Create at least one Java class in each project.
		
		
			Afterwards
			select both projects, right-click on
			them and select
			menu:Team[Share Project... > Git]
			. If asked by the Eclipse IDE, select that you want to use
			_Git_
			.
		
		
			Select your Git repository outside
			and add both projects to this repository and press the
			_Finish_
			button.
		
		
			Afterwards validate that the projects have been moved. You can checking your workspace directory and your Git
			repository directory via a file explorer. You see that the
			projects have
			been moved from there original location to the
			Git repository.
		
		The changes have not yet been commit. Now commit all files in the two projects to your Git repository.
		

	


