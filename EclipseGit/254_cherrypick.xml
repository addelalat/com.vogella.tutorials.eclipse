
	<title>Using git cherry-pick
	
		In the
		_History_
		view, you can cherry-pick a commit via the context menu.
	
	A combination of git reset and git cherry-pick allows you to
		move
		the changes done in a commit to anther branch. Assume you have a
		bad
		commit which you would like to
		remove from the history of branch
		followed by a good commit. This
		situation is depicted in the following
		screenshot.
	
	
		<mediaobject>
			<imageobject>
				<imagedata fileref="images/cherrypick10.png"/>
			</imageobject>
			<textobject>
				<phrase>Situation before the cherry pick</phrase>
			</textobject>
		</mediaobject>
	

	For this you would make a hard reset on the commit of
		origin/master.
	

	
		<mediaobject>
			<imageobject>
				<imagedata fileref="images/cherrypick20.png"/>
			</imageobject>
			<textobject>
				<phrase>Situation before the cherry pick</phrase>
			</textobject>
		</mediaobject>
	

	Afterwards you can cherry-pick the good commit.
	
		<mediaobject>
			<imageobject>
				<imagedata fileref="images/cherrypick30.png"/>
			</imageobject>
			<textobject>
				<phrase>Situation before the cherry pick</phrase>
			</textobject>
		</mediaobject>
	
	
		<mediaobject>
			<imageobject>
				<imagedata fileref="images/cherrypick40.png"/>
			</imageobject>
			<textobject>
				<phrase>Situation before the cherry pick</phrase>
			</textobject>
		</mediaobject>
	
	This results in a history without the bad commit. 
	<note>
		
			You can do the same with interactive rebase.
		
	</note>

