<section id="_develop_a_feature_bug_fix">
	<title>Develop a new feature or a bug fix
	In this exercise you will learn how to develop a new feature
		using Git in Eclipse.
	
	<section id="egitexercise_create_a_local_feature_branch">
		<title>Create a local feature branch
		
			The development of a new feature (or bug-fix) should normally only
			depend on
			the submitted state of the project (and
			not depend on pending changes
			that
			might or might not pass the code review). This is why every new feature or
			bug-fix
			should be developed in isolation on its own branch which is
			usually
			created based on the latest state of the master
			branch available on the
			server.
			This is the remote tracking branch
			<emphasis>origin/master</emphasis>
			in your local clone.
		
		
			Go to the
			<guilabel>Git Repositories</guilabel> view.
		
		
			Select the remote tracking branch
			<emphasis>origin/master</emphasis>
			under
			<emphasis>repository &gt; Branches
				&gt; Remote Tracking</emphasis>
			and click
			<emphasis>Create Branch&#8230;</emphasis>
		
		
			<inlinemediaobject>
				<imageobject>
					<imagedata fileref="./images/create-branch.png" scale="60" />
				</imageobject>
				<textobject>
					<phrase>Create branch</phrase>
				</textobject>
			</inlinemediaobject>
		
		In the new branch dialog:
		<itemizedlist>
			<listitem>
				
					enter a name for the local feature branch into the
					<emphasis>Branch Name</emphasis>
					field (this
					is just a local name that is not exposed to anybody else)
				
			</listitem>
			<listitem>
				
					set the
					<emphasis>Pull Strategy</emphasis>
					to
					<emphasis>Rebase</emphasis>
				
			</listitem>
			<listitem>
				
					keep
					<emphasis>Checkout new branch</emphasis>
					selected
				
			</listitem>
			<listitem>
				
					confirm the dialog by clicking on
					<emphasis>Finish</emphasis>
				
			</listitem>
		</itemizedlist>
		
			<inlinemediaobject>
				<imageobject>
					<imagedata fileref="./images/create-branch-dialog.png" scale="60" />
				</imageobject>
				<textobject>
					<phrase>Create new branch</phrase>
				</textobject>
			</inlinemediaobject>
		
		This creates and checks out the new branch.
		
			<inlinemediaobject>
				<imageobject>
					<imagedata fileref="./images/new-branch-checked-out.png" scale="60" />
				</imageobject>
				<textobject>
					<phrase>New branch checked out</phrase>
				</textobject>
			</inlinemediaobject>
		
	</section>
	<section id="_develop_the_feature">
		<title>Develop the feature
		Start editing the source code and implement the
			feature. In this example
			project implement a divide operation.
		
		
			Create a new class
			<emphasis>Divide.java</emphasis>
			in the package
			<emphasis>org.eclipse.example.calc.internal.operations</emphasis>
			that
		
		<itemizedlist>
			<listitem>
				
					implements the interface
					<emphasis>org.eclipse.example.calc.BinaryOperation</emphasis>
					and
				
			</listitem>
			<listitem>
				
					extends the class
					<emphasis>org.eclipse.example.calc.internal.operations.AbstractOperation</emphasis>
				
			</listitem>
		</itemizedlist>
		
			<inlinemediaobject>
				<imageobject>
					<imagedata fileref="./images/divide-class.png" scale="60" />
				</imageobject>
				<textobject>
					<phrase>Divide Class</phrase>
				</textobject>
			</inlinemediaobject>
		
		
			To register the new operation add a corresponding line to
			the
			<emphasis>Calculator.setupDefaultOperations</emphasis>
			.
		
		
			<inlinemediaobject>
				<imageobject>
					<imagedata fileref="./images/register-divide.png" scale="60" />
				</imageobject>
				<textobject>
					<phrase>Register Divide</phrase>
				</textobject>
			</inlinemediaobject>
		
		You may also decide to implement something else like polish the SWT
			or Swing user interface.
		
	</section>
	<section id="_test_your_feature">
		<title>Test your feature
		Run the unit tests to ensure that you did not break anything.
		
		
			<inlinemediaobject>
				<imageobject>
					<imagedata fileref="./images/run-tests.png" scale="50" />
				</imageobject>
				<textobject>
					<phrase>Run Tests</phrase>
				</textobject>
			</inlinemediaobject>
		
	</section>
	<section id="_commit_your_changes_locally">
		<title>Commit your changes locally
		
			Use the commit dialog to store your development in your local repository in your
			current
			branch by committing your
			changes.
		
		
			Select your project in the
			<emphasis>Package Explorer</emphasis>
			and select
			<emphasis>Team &gt; Commit</emphasis>
			or click
			<emphasis>Commit</emphasis>
			in the
			<emphasis>Git Toolbar</emphasis>
		
		
			<inlinemediaobject>
				<imageobject>
					<imagedata fileref="./images/team-commit.png"/>
				</imageobject>
				<textobject>
					<phrase>Commit</phrase>
				</textobject>
			</inlinemediaobject>
		
		
			In the
			<emphasis>Commit Changes</emphasis>
			dialog:
		
		<itemizedlist>
			<listitem>
				
					Enter a commit message explaining why the change was done
				
			</listitem>
			<listitem>
				
					Verify that
					<emphasis>Author</emphasis>
					and
					<emphasis>Committer</emphasis>
					contain both your full name and your
					correct e-mail address in the following format:
					<code>John
						Doe &lt;john.doe@example.org&gt;
					</code>
				
			</listitem>
		</itemizedlist>
		<note>
			
				If author and committer are not preset correctly you need to change
				the
				Git configuration parameters
				<emphasis>user.name</emphasis>
				and/or
				<emphasis>user.email</emphasis>
				. In this case
				cancel the dialog and open
				<emphasis>Preferences &gt; Team &gt; Git &gt; Configuration &gt;
					User
					Settings
				</emphasis>
				and correct the values for
				<emphasis>user.name</emphasis>
				and
				<emphasis>user.email</emphasis>
				.
			
		</note>
		<itemizedlist>
			<listitem>
				
					Select all files that you want to commit
				
			</listitem>
			<listitem>
				
					Click
					<emphasis>Commit</emphasis>
					. As result your changes are committed in your
					<emphasis role="strong">local</emphasis>
					repository
				
			</listitem>
		</itemizedlist>
		
			<inlinemediaobject>
				<imageobject>
					<imagedata fileref="./images/commit-dialog.png"/>
				</imageobject>
				<textobject>
					<phrase>Commit dialog</phrase>
				</textobject>
			</inlinemediaobject>
		
	</section>
</section>