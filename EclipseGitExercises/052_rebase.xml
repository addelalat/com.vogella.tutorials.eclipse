<section id="rebaseexercise">
	<title>Rebase
	<section id="rebase">
		<title>Rebasing a branch onto another
		Now do a rebase of the conflicting commit instead of a merge.
		
		<itemizedlist>
			<listitem>
				
					In the History View, select
					<emphasis>Rebase on Top of</emphasis>
					on the second feature
					branch (the first one is checked out):
				
				
					<inlinemediaobject>
						<imageobject>
							<imagedata fileref="./images/rebase.png"/>
						</imageobject>
						<textobject>
							<phrase>Rebase</phrase>
						</textobject>
					</inlinemediaobject>
				
			</listitem>
			<listitem>
				
					The rebase stops because of a conflict. You see a dialog:
				
				
					<inlinemediaobject>
						<imageobject>
							<imagedata fileref="./images/rebase-with-conflicts.png"/>
						</imageobject>
						<textobject>
							<phrase>Rebase with Conflicts</phrase>
						</textobject>
					</inlinemediaobject>
				
			</listitem>
			<listitem>
				
					Click
					<emphasis>OK</emphasis>
					to start the merge tool.
				
			</listitem>
			<listitem>
				
					Click
					<emphasis>OK</emphasis>
					to start conflict resolution (using pre-merged option).
				
				
					<inlinemediaobject>
						<imageobject>
							<imagedata fileref="./images/merge-mode.png"/>
						</imageobject>
						<textobject>
							<phrase>Merge Mode</phrase>
						</textobject>
					</inlinemediaobject>
				
				
					<inlinemediaobject>
						<imageobject>
							<imagedata fileref="./images/merge-tool-2.png"/>
						</imageobject>
						<textobject>
							<phrase>Merge Tool</phrase>
						</textobject>
					</inlinemediaobject>
				
			</listitem>
			<listitem>
				
					Edit the left side until you are happy with the change and save
				
				
					<inlinemediaobject>
						<imageobject>
							<imagedata fileref="./images/merge-tool-resolved-conflict-2.png"/>
						</imageobject>
						<textobject>
							<phrase>Merge Tool with resolved conflict</phrase>
						</textobject>
					</inlinemediaobject>
				
			</listitem>
			<listitem>
				
					Now select
					<emphasis>Team &gt; Add</emphasis>
					on the files which had conflicts. You can
					also use the Git Staging View to do this in one step by drag and
					drop
				
			</listitem>
			<listitem>
				
					In the Repositories View select your repository and click
					<emphasis>Rebase &gt; Continue</emphasis>
				
				
					<inlinemediaobject>
						<imageobject>
							<imagedata fileref="./images/rebase-continue.png"/>
						</imageobject>
						<textobject>
							<phrase>Rebase Continue</phrase>
						</textobject>
					</inlinemediaobject>
				
			</listitem>
			<listitem>
				
					Now the version graph should look like this:
				
				
					<inlinemediaobject>
						<imageobject>
							<imagedata fileref="./images/history-view-5.png"/>
						</imageobject>
						<textobject>
							<phrase>History View</phrase>
						</textobject>
					</inlinemediaobject>
				
				
					Note that there is a reference
					<emphasis>ORIG_HEAD</emphasis>
					pointing to the commit
					which was checked out before the rebase operation. You may revert the
					rebase operation with
					reset as described above.
				
			</listitem>
		</itemizedlist>
		<tip>
			
				You may hide the additional references such as
				<emphasis>ORIG_HEAD</emphasis>
				and
				<emphasis>FETCH_HEAD</emphasis>
				from the History View by disabling
				<emphasis>Show</emphasis>
				&gt;
				<emphasis>Additional
					Refs
				</emphasis>
				in the drop-down menu.
			
			
				<inlinemediaobject>
					<imageobject>
						<imagedata fileref="./images/show-additional-refs.png"/>
					</imageobject>
					<textobject>
						<phrase>Show Additional Refs</phrase>
					</textobject>
				</inlinemediaobject>
			
		</tip>
	</section>

	<section id="rebase_interactiverebase_edit">
		<title>Using interactive rebase to edit the commit message
		
			Reword on of your commit messages via a right-click on it in the
			<guilabel>History</guilabel>
			view and select
			<menuchoice>
				<guimenu>Modify</guimenu>
				<guisubmenu>Reword</guisubmenu>
			</menuchoice>
			to change the commit message.
			commit message.
		
	</section>
	<section id="rebase_interactiverebase_squash">
		<title>Squash two commits
		Do another commit by adding a comment in the code to your last change. Commit this change via a new commit.
		
		
			You realize that you wanted to combine the last two commits. Use the
			<guilabel>History</guilabel>
			view to combine them.
			You can squash several commits by selecting them in the
			<guilabel>History</guilabel>
			view and by using the
			<menuchoice>
				<guimenu>Modify</guimenu>
				<guisubmenu>Squash</guisubmenu>
			</menuchoice>
			menu entry from the context menu.
		

		
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/rebase_interactive_squaschcommits10.png"/>
				</imageobject>
				<textobject>
					<phrase>Squash a commit</phrase>
				</textobject>
			</mediaobject>
		
	</section>

	<section id="rebase_interactiverebase_remove">
		<title>Remove a commit
		
			Do two more commits, A followed by B. You want to remove the commit A from your history. Use the interactive
			rebase
			as
			described in
			<xref linkend="interactiverebase_interactiverebaseview" />
			to perform this operation.
		
	</section>


</section>