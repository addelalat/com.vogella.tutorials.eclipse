== Change a series of commits
	In this exercise you learn how you can rewrite the local
		history
		before you share it with others. After you have
		committed locally you
		can still change all commits in your local feature branch.
	</simpara>

=== Preparation
		
			Follow the exercise
			merge-rebase-and-resolving-conflicts.html[
				Merge, Rebase and Resolving Conflicts
			
			. After the rebase you end up
			with a branch which is two commits ahead of the remote branch
			_origin/master_
			, it&#8217;s the local
			_master_
			branch in the screenshot
			below. Now you realize that you want to change the first commit and
			keep the second one on top
			of the changed commit.
		</simpara>
		
			<inlinemediaobject>
				<imageobject>
					<imagedata fileref="./images/history-view-8.png[]
				
				<textobject>
					<phrase>History View</phrase>
				</textobject>
			</inlinemediaobject>
		</simpara>
	

=== Change the first commit
		
			*
				
					Create a new branch that points to the commit you want to change,
					in
					the screenshot below it&#8217;s the
					_Add multiply operation_
					commit. Use
					_Create Branch_
					to create a new branch, e.g. named
					_newMaster_
					.
				</simpara>
				
					<inlinemediaobject>
						<imageobject>
							<imagedata fileref="./images/history-view-9.png"/>
						
						<textobject>
							<phrase>History View</phrase>
						</textobject>
					</inlinemediaobject>
				</simpara>
				
					<inlinemediaobject>
						<imageobject>
							<imagedata fileref="./images/history-view-10.png[]
						
						<textobject>
							<phrase>History View</phrase>
						</textobject>
					</inlinemediaobject>
				</simpara>
			
			*
				
					Edit the files in the workspace, e.g. add a class comment for the
					_Multiply_
					class.
				</simpara>
			
			*
				
					Now create a new commit with the combined changes of your first
					commit and your current changes:
				</simpara>
				
					*
						
							Select your project in the Package Explorer and select
							_Team &gt; Commit_
							or click
							_Commit_
							in the Git Toolbar.
						</simpara>
					
					*
						
							Press the
							_Amend_
							button as shown below:
						</simpara>
						
							<inlinemediaobject>
								<imageobject>
									<imagedata fileref="./images/commit-changes-with-amend-2.png[]
								
								<textobject>
									<phrase>Commit Changes with Amend</phrase>
								</textobject>
							</inlinemediaobject>
						</simpara>
					
					*
						
							Click the Commit button
						</simpara>
					
				
			
			*
				
					Now your history should look like this:
				</simpara>
				
					<inlinemediaobject>
						<imageobject>
							<imagedata fileref="./images/history-view-11.png[]
						
						<textobject>
							<phrase>History View</phrase>
						</textobject>
					</inlinemediaobject>
				</simpara>
				Note that the first version of your changed commit is still
					there, but
					your branch points now to the new one.
					Git always creates new commits
					when you rewrite history, it does not change old ones (from time to
					time it removes
					commits which are not reachable by a reference,
					e.g.
					a branch or a tag).
				</simpara>
			
		
	

=== Cherry-pick the rest
		
			*
				
					Select
					_Cherry Pick_
					on the other commit. This will add the
					difference of this commit compared to its parent on top of your new
					commit.
				</simpara>
				
					<inlinemediaobject>
						<imageobject>
							<imagedata fileref="./images/cherry-pick.png"/>
						
						<textobject>
							<phrase>Cherry Pick</phrase>
						</textobject>
					</inlinemediaobject>
				</simpara>
			
			*
				
					You may have to resolve conflicts
				</simpara>
				
					<inlinemediaobject>
						<imageobject>
							<imagedata fileref="./images/cherry-pick-conflicts.png"/>
						
						<textobject>
							<phrase>Cherry Pick Conflicts</phrase>
						</textobject>
					</inlinemediaobject>
				</simpara>
				
					In that case, edit the conflicting files, add the changes and
					commit
					like in the exercise
					merge-rebase-and-resolving-conflicts.html[
						Merge, Rebase and Resolving Conflicts
					
					.
				</simpara>
			
			*
				
					The result should look like this:
				</simpara>
				
					<inlinemediaobject>
						<imageobject>
							<imagedata fileref="./images/history-view-12.png[]
						
						<textobject>
							<phrase>History View</phrase>
						</textobject>
					</inlinemediaobject>
				</simpara>
			
		
		
			If you want to change more than one commit in a series git offers the
			powerful tool
			_git rebase --interactive_
			. This is not yet available in
			EGit, but can be used from the Git commandline.
		</simpara>
	

