<section id="_push_to_the_forked_repository">
	<title>Push to the forked repository
	In this exercise you learn how to push commits from your local repository
		to a remote repository. You will
		reuse
		your already cloned repository and add
		the fork as another remote repository.
	
	<note>
		Another way to achieve the goal would be
			to create a new clone of the forked repository. However, having
			everything in one
			repository has many advantages. For example, in eclipse you can then easily
			checkout versions of your
			projects from the two remote repositories
		
	</note>
	<section id="_add_a_new_remote">
		<title>Add a new remote
		
			Git allows that you have more than one remote repository for a local repository.
			In the
			local repository you can
			address each remote repository by a shortcut.
			This shortcut is simply called
			<emphasis>remote</emphasis>
			. For such a remote several properties can be
			specified, e.g. URL, branches to fetch or branches to push. When you
			cloned your repository, Bit already created
			a default remote called
			<emphasis>origin</emphasis>
			. You now create a second remote for your fork at Github.
		
		You will need the URL. Copy it to the clipboard from Github.
		
			<inlinemediaobject>
				<imageobject>
					<imagedata fileref="./images/copyurl.png" scale="50" />
				</imageobject>
				<textobject>
					<phrase>Copy URL from Github</phrase>
				</textobject>
			</inlinemediaobject>
		
		
			In the Git Repositories view, select
			<emphasis>Create Remote</emphasis>
			on the
			<emphasis>Remotes</emphasis>
			node of your clone.
		
		
			<inlinemediaobject>
				<imageobject>
					<imagedata fileref="./images/createremote.png" scale="50" />
				</imageobject>
				<textobject>
					<phrase>Create Remote</phrase>
				</textobject>
			</inlinemediaobject>
		
		
			In the next dialog, enter a name and select the
			<guilabel>Configure fetch</guilabel>
			radiobutton.
		
		
			<inlinemediaobject>
				<imageobject>
					<imagedata fileref="./images/remote_github.png" scale="50" />
				</imageobject>
				<textobject>
					<phrase>Configure Remote</phrase>
				</textobject>
			</inlinemediaobject>
		
		
			Now press the button
			<emphasis>Change</emphasis>
			next to the URL field.
		
		
			<inlinemediaobject>
				<imageobject>
					<imagedata fileref="./images/githubconfigurefetch.png" scale="50" />
				</imageobject>
				<textobject>
					<phrase>Configure Fetch</phrase>
				</textobject>
			</inlinemediaobject>
		
		The URL will be automatically taken from the clipboard in the next dialog.
		
			<inlinemediaobject>
				<imageobject>
					<imagedata fileref="./images/githubdestination.png" scale="50" />
				</imageobject>
				<textobject>
					<phrase>Fetch URL</phrase>
				</textobject>
			</inlinemediaobject>
		
		
			Press the Finish button. In order to test if everything worked well you can fetch from your new remote.
		
		
			<inlinemediaobject>
				<imageobject>
					<imagedata fileref="./images/github_fetch.png" scale="50" />
				</imageobject>
				<textobject>
					<phrase>Fetch from Github</phrase>
				</textobject>
			</inlinemediaobject>
		
		
			Even if there is no new commit in the remote repository, the fetch command dcreates the branch
			<emphasis>github/master</emphasis>
			which points to the same commit as the master branch at the remote tracking branch. This is a so-called
			remote-tracking-branch.
		
		
			<inlinemediaobject>
				<imageobject>
					<imagedata fileref="./images/github_fetch_result.png" scale="50" />
				</imageobject>
				<textobject>
					<phrase>Github fetch result</phrase>
				</textobject>
			</inlinemediaobject>
		
	</section>
	<section id="_create_a_new_commit_in_a_new_branch">
		<title>Create a new commit in a new branch
		
			Create a new commit in your local repository. You should create the local branch based on the new remote, see
			screenshot below.
			When you do this, the Git push operation will pushes this branch to the new remote repository per
			default.
		
		
			<inlinemediaobject>
				<imageobject>
					<imagedata fileref="./images/createbranchgithub.png" scale="60" />
				</imageobject>
				<textobject>
					<phrase>Local branch</phrase>
				</textobject>
			</inlinemediaobject>
		
	</section>
	<section id="_push_to_remote">
		<title>Push to remote
		
			Select
			<emphasis>Push to Upstream</emphasis>
			in the Git Repositories view or
			<menuchoice>
				<guimenu>Team</guimenu>
				<guisubmenu>Push to Upstream</guisubmenu>
			</menuchoice>
			in the Package Explorer or Project Explorer.
			Now Github needs your username and password. Note that you could clone
			and fetch without
			authentication,
			but in order to push, you need valid user credentials.
		
		
			<inlinemediaobject>
				<imageobject>
					<imagedata fileref="./images/push_github_login.png" scale="50" />
				</imageobject>
				<textobject>
					<phrase>Push login</phrase>
				</textobject>
			</inlinemediaobject>
		
		Once you have successfully pushed, you see the following result dialog:
		
			<inlinemediaobject>
				<imageobject>
					<imagedata fileref="./images/github_pushresult.png" scale="50" />
				</imageobject>
				<textobject>
					<phrase>Push result</phrase>
				</textobject>
			</inlinemediaobject>
		
		By default, Eclipse pushes the currently checked out branch to the branch with the same name in the remote.
			Note that Git created a new remote tracking branch:
		
		
			<inlinemediaobject>
				<imageobject>
					<imagedata fileref="./images/github_remote_tracking.png" scale="50" />
				</imageobject>
				<textobject>
					<phrase>Remote tracking branch</phrase>
				</textobject>
			</inlinemediaobject>
		
	</section>
</section>
