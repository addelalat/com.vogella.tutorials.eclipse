
	<title>Eclipse 4 internationalization
[[eclipse4_i18n1">
=== Translation with POJOs
		<indexterm>
			<primary>Translation service</primary>
		</indexterm>
		
		
		To define your translations you simply define a Java object with
			several public fields of type String.
		

		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/eclipse4/Message.java" />
			</programlisting>
		

		
			The fields of such a Java object are initialized when an instance is
			injected via the
			<code>@Translation</code>
			annotation. The
			<code>org.eclipse.e4.core.services</code>
			plug-in contains the annotations which are used for translations.
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/eclipse4/Usage.java" />
			</programlisting>
		
		To find the property files for the key/value pairs, if searches
			for property files based on the rules described
			in the next
			section.
		
	
[[eclipse4_i18_searchprocess">
=== Search process for translation files

		
			The default translation service searches for property files with the
			translations in the following order.
			<orderedlist>
				<listitem>
					
						Check the @Message annotation in the Messages class for the
						correct location. This annotation allows defining the
						location of
						the file, see
						<xref linkend="eclipse4_i18_messagesannotation" />
						. If not present, go to the next
						step.
					
				</listitem>
				<listitem>
					Check if a property file with a corresponding name is
						available relatively to the Message
						class. If not
						present, go to
						the
						next
						step.
					
				</listitem>
				<listitem>
					
						Check if a property file is configured via the
						OSGi-ResourceBundle
						header in the MANIFEST.MF file. resource bundle.
						If this
						entry is
						not present check the OSGI-INF/l10n
						folder otherwise use the
						entered location.
						Such a property file
						is called OSGi resource
						bundle (see
						<xref linkend="i18n_osgi" />
						).
					
				</listitem>
			</orderedlist>
		

	[[eclipse4_i18_messagesannotation">
	=== Using the optional @Message annotation
			
				The optional
				<code>@Message</code>
				annotation
				can be used to define
				the location of the
				resource bundle.
				It allows also to define how and if translations
				should be cached by
				the Eclipse platform.
				See the Javadoc of the
				<code>@Message</code>
				annotation for more information on this topic.
			

		

	[[eclipse4_i18_postconstruct">
	=== Using the optional @PostConstruct in message POJOs
			
				It is possible to initialize fields via the
				<code>@PostConstruct</code>
				method in a message object as demonstrated in the following snippet.
			
			
				<programlisting language="java">
					<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
						parse="text" href="../examples/eclipse4/MessagePlaceholder.java" />
				</programlisting>
			
			<note>
				
					<code>@PostConstruct</code>
					does not support parameter
					injection in the context of a message
					object.
				
			</note>

		

	
[[eclipse4_i18n2">
=== Dynamic language switch
		
			The currently active
			locale, e.g., "de" or "en", is represented by an
			object of type
			<code>Locale</code>
			.
			The Eclipse runtime supports a dynamic switch of this locale at
			runtime.
		
		<note>
			
				The type of the
				<code>TranslationService.LOCALE</code>
				key was changed from String to Locale in Eclipse 4.4.2.
			
		</note>


		
			To support a dynamic locale switch the
			application must be
			able
			to react
			on
			changes in the messages. This requires that
			the widgets are
			declared
			as public
			fields and that a method
			exists which updates them. This is
			called the
			_Eclipse Translation Pattern_
			.
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/eclipse4/TranslationPart.java" />
			</programlisting>
		
		
			To change the active
			locale at runtime use the
			<code>ILocaleChangeService</code>
			service. This is demonstrated by the following class which could be
			used as part of a tool control.
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/eclipse4/SwitchLanguageToolControl.java" />
			</programlisting>
		

		To get notified you can use dependency injection.

		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/eclipse4/Notification.java" />
			</programlisting>
		

	

[[eclipse4_MessageRegistry">
=== Using the BaseMessageRegistry&lt;M&gt; to track language
			changes
		
		
			Instead of implementing a method to receive the
			<code>Message</code>
			object on locale change in a part, like
			<code>@Inject public void translate(@Translation Messages messages)
			</code>
			, a
			<code>BaseMessageRegistry&lt;M&gt;</code>
			can be implemented.
		
		
			The
			<code>BaseMessageRegistry&lt;M&gt;</code>
			contains methods to register controls, which are supposed to be
			translated. So basically the
			<code>BaseMessageRegistry&lt;M&gt;</code>
			will be informed about new
			<code>Message</code>
			objects and applies the new values to its registered controls.
		
		
			The
			<code>BaseMessageRegistry&lt;M&gt;</code>
			itself gets the
			<code>Message</code>
			object injected.
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/eclipse4/MessagesRegistry.java" />
			</programlisting>
		
		
			Because the
			<code>MessagesRegistry</code>
			class is annoted with
			<code>@Creatable</code>
			, it is instanciated by the framework and can directly be injected into
			the
			<code>postConstruct</code>
			method.
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text"
					href="../examples/eclipse4/MessagesRegistryExamplePartWithoutJava8.java" />
			</programlisting>
		
		By using Java 8 registering controls looks better and is even
			shorter.
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text"
					href="../examples/eclipse4/MessagesRegistryExamplePartWithJava8.java" />
			</programlisting>
		
	

