== Tutorial: JFace Table Viewer

=== Overview of the example
		
			We will build an
			Eclipse RCP application
			which
			displays data of
			persons in a JFace table. Each person is
			displayed in one individual
			row.
			This tutorial the basic setup of a
			JFace Table.
		
		The final application will look like this.
		
image::jfacetable10.gif[]

				
			
		
	


=== Project creation and data model
		
			Create a new RCP Project
			`de.vogella.jface.tableviewer`
			using the
			"RCP application with a
			view"
			as a template. Create a package
			"de.vogella.jface.tableviewer.model"
			and the following
			class "Person".
		
		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/model/Person.java[]
----
		
		
			The Person
			`class`
			represents the data model for this example.
			It has
			also
			`PropertyChange`
			support, which is not
			necessary for this
			example
			but is nice if you
			would later extend this example with
			Eclipse Data Binding support.
		
		
			Create the
			`ModelProvider`
			class which is a in-memory
			representation
			of your data. This class is
			defined as a Singleton.
		
		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/model/ModelProvider.java[]
----
		
	



=== Define the viewer
		
			Change the
			`View`
			class to the following.
		
		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/view/View.java[]
----
		
		
			The
			`createColumns`
			method
			creates the table columns, headers, sets the size of the
			columns and
			makes the columns re-sizable.
		
		NOTE:
			

				The
				`createTableViewerColumn()`
				method
				has three parameters. The third is currently not used,
				but we
				will use
				it in the
				<ulink
					url="http://www.vogella.com/tutorials/EclipseJFaceTableAdvanced/article.html"> advanced tutorial
				.
			
		
		
			TIP:
				Please note that we use icons for the married Status. If the
				_icons_
				folder
				does
				not exists in your project, create it.
				<ulink
					url="http://www.vogella.com/tutorials/EclipseJFaceTable/download/checkedpics.zip">
					Download the
					icons
				and
				place the
				two
				icons in
				the
				folder icons. Alternatively you can only
				use
				the
				`setText()`
				method.
			
		
	

=== Run
		
			Run the example. The application should display a non-working
			search
			field and a table.
		
	

