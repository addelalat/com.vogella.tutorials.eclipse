
	<title>JFace Table Features
[[jfacetable_editor">
=== Column editing support
		
			To make a column in a table
			editable, you need an object
			of type
			<code>EditingSupport</code>.
		
		
			The following code shows an example of an
			<code>EditingSupport</code>
			implementation.
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/editing/FirstNameEditingSupport.java" />
			</programlisting>
		
		
			The
			<code>EditingSupport</code>
			implementation defines how the content can be changed.
			The
			<code>getCellEditor()</code>
			method
			returns an object of type
			<code>CellEditor</code>.
			This object
			creates the controls to change the data.
		
		
			The
			<code>canEdit()</code>
			method defines if the cell can be edited. The
			<code>getValue()</code>
			method receives the current object and returns the
			value which should
			be
			edited.
		
		
			The method
			<code>setValue()</code>
			in
			<code>EditingSupport</code>
			receives the changed value based on the user input. In this method
			you assign the
			value to your data object.
		
		
			JFace provides the following default implementations for cell
			editors:
			<itemizedlist>
				<listitem>
					
						<code>TextCellEditor</code>
					
				</listitem>
				<listitem>
					
						<code>ColorCellEditor</code>
					
				</listitem>
				<listitem>
					
						<code>CheckboxCellEditor</code>
					
				</listitem>
				<listitem>
					
						<code>DialogCellEditor</code>
					
				</listitem>
				<listitem>
					
						<code>ComboBoxViewerCellEditor</code>
					
				</listitem>
			</itemizedlist>
		

		
			You can assign the instance of
			<code>EditingSupport</code>
			to your
			<code>TableColumn</code>
			via the
			<code>setEditingSupport()</code>
			method
			of your
			<code>TableViewerColumn</code>
			object.
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/snippets/Editing.java" />
			</programlisting>
		
		
			From an application design perspective, editing within a table
			can be
			cumbersome for the user. If the end user has to edit a lot of
			data,
			you should also offer a dialog, wizard or
			part
			to edit the data.
		
	

[[jfacetable_filter">
=== Filtering data
		
			A JFace viewer supports filtering of data via the
			<code>setFilters()</code>
			or
			<code>addFilter()</code>
			methods. These methods expect
			<code>ViewerFilter</code>
			objects
			as arguments.
		
		
			For each registered
			<code>ViewerFilter</code>
			object
			the
			<code>select()</code>
			method is called. The method returns
			<code>true</code>
			if the data should be shown and
			<code>false</code>
			if it should be filtered.
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/filter/PersonFilter.java" />
			</programlisting>
		
		
			All filters are checked
			whenever the input of the
			viewer
			changes, or
			whenever its
			<code>refresh()</code>
			method is called.
		
		
			If more than one filter is defined for a
			viewer,
			all filters must
			return <code>true</code>
			to display the
			data.
		
	

[[jfacetable_comparator">
=== Sorting data with ViewerComparator
		
			JFace supports sorting of the viewer content via the
			<code>setComparator()</code>
			method on the viewer object. This method expects a
			<code>ViewerComparator</code>
			object. By default, it will sort based on the
			<code>toString()</code>
			method of the objects in the viewer.
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/snippets/compare.java" />
			</programlisting>
		
	

[[jfacetable_tablecolumnlayout">
=== TableColumnLayout
		
			With the
			<code>TableColumnLayout</code>
			class you can define the width of the columns in the table. This can
			be done based on a fixed or percentage value.
		
		
			Using
			<code>TableColumnLayout</code>
			requires a
			<code>Composite</code>
			which only contains the table widget. This
			<code>Composite</code>
			gets the
			<code>TableColumnLayout</code>
			assigned.
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/layout/LayoutSetup.java" />
			</programlisting>
		
		
			The
			<code>TableColumnLayout</code>
			requires that you define a fixed or relative size for all columns.
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/layout/LayoutColumn.java" />
			</programlisting>
		
	

[[jfacetable_styledlabelprovider">
=== StyledCellLabelProvider and OwnerDrawLabelProvider
		
			It is possible to use a
			<code>StyledCellLabelProvider</code>
			for a very flexible styling of your text.
			<code>StyledCellLabelProvider</code>
			extends
			<code>CellLabelProvider</code>
			and allows you to style the text which is displayed in the cell.
		
		
			The following example shows how to use a
			<code>StyledCellLabelProvider</code>.
			In this example a portion of a pre-defined text is highlighted.
		

		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/snippets/style.java" />
			</programlisting>
		
		
			As a result the number "15" will be highlighted as depicted in
			the following screenshot.
		
		
image::styledcelllabelprovider10.png"
						scale="60" />
				</imageobject>
				<textobject>
					<phrase>Screenshot of a styledLabelProvider,pdfwidth=60%]
		
		
			The
			<code>OwnerDrawLabelProvider</code>
			class is a label provider that handles custom draws.
		
		
			The following example draws a text and an
			image into the cell.
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/snippets/OwnerDrawLabelProvider.java" />
			</programlisting>
		
		
image::ownerdrawviewer10.png[OwnerDrawLabelProvider example,pdfwidth=60%]
		
	

[[jfacetable_hideshow">
=== Table column menu and hiding columns
		
			You can add a
			menu
			to your table. This
			menu can get a menu entry
			for each column. This allow you to add arbitrary popup actions to
			your columns.
		
		
			You can use it, for example, to hide and show
			columns based on
			the
			width
			setting as demonstrated in the following code snippet.
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/showhide/View.java" />
			</programlisting>
		
	

[[jfacetable_tooltips">
=== Tooltips for viewers
		
			You can
			use tooltips for the cells of the
			viewer. To achieve this,
			you have to activate the tooltips for a viewer.
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/tooltips/activate.java" />
			</programlisting>
		
		
			In your
			<code>CellLabelProvider</code>
			you specify the related methods for displaying the tooltip.
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/tooltips/CellEditor.java" />
			</programlisting>
		
	

[[jfacetable_lazycontentprovider">
=== Virtual tables with LazyContentProvider
		
			If you have a huge number of lines which you want to display in the
			table, you can use a
			<code>LazyContentProvider</code>.
			This provider allows you to fetch the data when they are needed
			instead of loading everything into memory. As a result of the lazy
			loading you gain a better memory footprint and improve the
			performance for a large set of data. The
			following code demonstrates
			its usage.
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/lazycontent/ContentProvider.java" />
			</programlisting>
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/lazycontent/Lazy.java" />
			</programlisting>
		
	

[[jfacetable_alternativeimplementations">
=== Alternative table implementations
		
			It is possible to use other table implementations. Most notable is
			the
			http://www.eclipse.org/nattable/">NatTable
			implementation which is a flexible and powerful framework for
			creating tables, grids and trees that show great performance for a
			huge number of rows and columns.
		
	

