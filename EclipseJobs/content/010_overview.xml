
	<title>Eclipse background processing
[[eclipsejobs_uithread">
=== Main thread
		<indexterm>
			<primary>SWTException - Invalid thread access</primary>
		</indexterm>
		
			An Eclipse RCP application runs in one process but can create
			multiple threads.
		
		
			By default the Eclipse framework uses a single
			thread
			to run all the
			code
			instructions. This
			thread
			runs the event
			loop for the application
			and is
			the only thread
			that is allowed to interact
			with the user
			interface (UI).
			It
			is
			called the
			_main thread_
			. Sometimes it is also called the
			_UI thread_,
			but this is a misnomer as it handles all events not only the ui
			events.
		
		
			If another
			thread
			tries to update the UI,
			the Eclipse
			framework throws an
			<code>SWTException</code>
			exception.
		
		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/invalid/error.txt" />
			</programlisting>
		
		
			All events in the user interface
			are executed one after another.
			If you
			perform a long running operation in the main thread, the
			application
			does not respond to user
			interaction during the execution
			time of this
			operation.
		
		
			Blocking the user interaction is considered a bad practice.
			Therefore
			it is
			important to perform all long
			running
			operations in a
			separate thread. Long running operations are, for example,
			network or
			file
			access.
		
		
			As only the main thread is allowed to modify the user interface,
			the
			Eclipse framework provides ways for a
			thread
			to synchronize itself
			with
			the main thread. It also provides
			the
			Eclipse Jobs
			framework
			which
			allows you to run operations in the
			background and providing
			feedback
			of the job status
			to the Eclipse
			platform.
		
	


[[eclipsejobs_uisynchronize">
=== Using dependency injection and UISynchronize
		<indexterm>
			<primary>UISynchronize</primary>
		</indexterm>
		
			The
			<code>org.eclipse.e4.ui.di</code>
			plug-in contains the
			<code>UISynchronize</code>
			class. An instance of this class can
			be injected into an Eclipse
			application via dependency injection.
		
		
			<code>UISynchronize</code>
			provides the
			<code>syncExec()</code>
			and
			<code>asyncExec()</code>
			methods to synchronize with the main thread.
		
	
[[eclipsejobs_jobs">
=== Eclipse Jobs API
		<indexterm>
			<primary>Job (Concurrency)</primary>
		</indexterm>
		<indexterm>
			<primary>Concurrency</primary>
			<secondary>Job</secondary>
		</indexterm>
		
			The Eclipse Jobs API provides support for running background
			processes and providing feedback
			about the progress of the
			<code>Job</code>
			.
		

		
			The important parts of the
			Job
			API are:
			<itemizedlist>
				<listitem>
					IJobManager - schedules jobs    
				</listitem>
				<listitem>
					Job - the individual task to perform   
				</listitem>
				<listitem>
					IProgressMonitor - interface to communicate information about
						the status of your Job.
					
				</listitem>
			</itemizedlist>
		
		
			The creation and scheduling of a
			<code>Job</code>
			is demonstrated in the following code snippet.
		

		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/jobs/example.txt" />
			</programlisting>
		
		
			If you want to update the user interface from a
			<code>Job</code>,
			you need to synchronize the corresponding action with the user
			interface similar to the direct usage of threads.
		
	

[[eclipsejobs_prio">
=== Priorities of Jobs
		
			You can set the
			<code>Job</code>
			priority via the
			<code>job.setPriority()</code>
			method. The
			<code>Job</code>
			class contains predefined priorities, e.g.
			<code>Job.SHORT</code>
			,
			<code>Job.LONG</code>
			,
			<code>Job.BUILD</code>
			and
			<code>Job.DECORATE</code>
			.
		
		
			The Eclipse job scheduler will use these priorities to determine in
			which
			order
			the
			<code>Jobs</code>
			are scheduled. For example,
			jobs
			with the priority
			<code>Job.SHORT</code>
			are scheduled before jobs with the
			<code>Job.LONG</code>
			priority
			.
			Check the
			JavaDoc of
			the
			<code>Job</code>
			class for details.
		

	
[[busyindicator">
=== Blocking the UI and providing feedback
		
			Sometimes
			you simply want
			to give the user the feedback that
			something
			is running
			without using threads.
		
		
			The easiest
			way to provide feedback is to change
			the
			cursor via the
			<code>BusyIndicator.showWhile()</code>
			method call.
		
		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/simple/Busy.java" />
			</programlisting>
		
		
			If this code is executed, the cursor will change to a
			busy
			indicator
			until the
			<code>Runnable</code>
			is done.
		

	
