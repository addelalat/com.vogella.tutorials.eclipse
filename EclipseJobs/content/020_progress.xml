
	<title>Reporting Progress
[[eclipsejobs_submonitor">
=== IProgressMonitor and the SubMonitor
		<indexterm>
			<primary>Progress reporting</primary>
		</indexterm>
		<indexterm>
			<primary>SubMonitor</primary>
		</indexterm>
		<indexterm>
			<primary>IProgressMonitor</primary>
		</indexterm>
		
			An instance of an
			<code>IProgressMonitor</code>
			is passed to the run method of a
			<code>Job</code>
			and can be used to monitor the
			progress of the job. When methods inside the job need to report
			feedback on the
			progress, a child of the
			<code>Submonitor</code>
			is passed rather than passing the actual SubMonitor. It is good practice to convert the
			<code>IProgressMonitor</code>
			always
			to a
			<code>SubMonitor</code>
			before using it. This allows to use a consistent API for process reporting of child processes and the main process.
			A
			<code>SubMonitor</code>
			can be created similar to this:
			<code>SubMonitor subMonitor = SubMonitor.convert(monitor, 3);</code>
		


		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="../examples/jobs/monitor.java" />
			</programlisting>
		

		
			When using a
			<code>SubMonitor</code>
			it is not necessary to call the
			<code>beginTask()</code>
			method or the
			<code>done()</code>
			method, since this is done implicitly by the
			<code>SubMonitor</code>
			implementation.
		
	

[[eclipsejobs_submonitor_conditional">
=== Taking conditions during progress into account
		In some cases the amount of work
			depends on conditions, which
			should also be properly reported.
		
		
			This can be done by using the
			<code>setWorkRemaining()</code>
			method of the
			<code>SubMonitor</code>
			.
		

		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="../examples/jobs/monitorCondition.java" />
			</programlisting>
		

		
			In case the code in the
			<code>taskNeedsPreconfiguration()</code>
			if block is run, the
			<code>setWorkRemaining()</code>
			method actually does nothing. Only in case the code of the if block
			is skipped it ensures that the process monitoring
			is done properly.
		

		
			Another use case for using
			<code>setWorkRemaining()</code>
			is when the actual work is determined later. See
			<code>workOnTask</code>
			method.
		

		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text"
					href="../examples/jobs/monitorLoopRemainingWork.java" />
			</programlisting>
		

		
			For the loop in the
			<code>workOnTask</code>
			a new child
			<code>SubMonitor</code>
			, which is supposed to do 80 % of the work, is created. Later on the
			actual remaining work for this
			<code>SubMonitor</code>
			is set by the
			<code>setWorkRemaining()</code>
			.
		
	

[[eclipsejobs_progress4x">
=== Reporting progress in Eclipse RCP applications
		
			In Eclipse applications you can report progress by implementing the
			<code>IProgressMonitor</code>
			interface.
		
		
			You can, for example, add a tool control
			to a toolbar in your
			application model. This tool control
			can
			implement the
			<code>IProgressMonitor</code>
			interface to show the progress.
		
		This is demonstrated in the following example. 

		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text"
					href="../examples/progressbar/ProgressMonitorControl.java" />
			</programlisting>
		


		
			This new element can be accessed via the model service and used as an
			<code>IProgressMonitor</code>
			for the job.
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text"
					href="../examples/progressbar/setProgressMonitor.java" />
			</programlisting>
		

		<tip>
			A more advanced implementation could, for example, implement a
				progress
				monitoring OSGi Service and report
				progress to the user
				interface via the
				event service.
			
		</tip>

	


