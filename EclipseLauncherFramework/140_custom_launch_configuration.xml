== How a launch can be triggered
	Three different ways to trigger a launch exist.
	
		
			*
				Pass a launch configuration to an `﻿ILaunchConfigurationDelegate`, which runs
					the launch configuration
			
			*
				Use an `﻿ILaunchShortcut` and determine with an IEditorPart how a
					launch should be done
			
			*
				Use an `﻿ILaunchShortcut` and determine with an ISelection how a
					launch should be done
			
		
	
	<section>
=== Creating a new launch configuration type
		﻿The `org.eclipse.debug.core` plugin provides the
				`﻿org.eclipse.debug.core.launchConfigurationTypes` extension point, where
			a new launch configuration type can be added.
		The extension point can be configured as follows.
		
[source,xml]
----
include::res/custom_launch/launchConfigurationTypes.xml[]
----
		
		The different `modes` are `ILaunchManager.RUN_MODE`,
				`ILaunchManager.DEBUG_MODE` and
			`ILaunchManager.PROFILE_MODE`.
		You can set one or more of these modes, as depicted in the programlisting above.
		The `delegate` must be an implementation of the
				﻿`ILaunchConfigurationDelegate` interface, which contains just one
			method.
		This method is responsible for the actual launch. The
				`ILaunchConfiguration` contains launching attributes, which can be read
			by using one the its `getAttribute` methods.
		Therefore we also specify an interface with key constants for the custom attributes:
		
[source,java]
----
include::res/custom_launch/SampleLaunchConfigurationAttributes.java[]
----
		
		The `LaunchConfigurationDelegate` implementation, which works with this attribute may look like this:
		
[source,java]
----
include::res/custom_launch/SampleLaunchConfiguration.java[]
----
		
		Usually a `ILaunchConfigurationDelegate` is invoked by the UI of
                ﻿`org.eclipse.debug.ui`, which is covered in <xref
                linkend="eclipsecustomlaunchconfigurationui"/>.
	
	<section>
=== Using the ﻿ILaunchShortcut for ISelections and IEditorParts
		In some cases, one would rather create a default launch configuration from an
				`ISelection` or an `IEditorPart`, than manually configuring a
			launch configuration.
		With this approach it is up to the programmer to determine how a launch should be done
			according the current `ISelection` or `IEditorPart`.
		Such an `ILaunchShortcut` can be defined with the
				`﻿org.eclipse.debug.ui.launchShortcuts` extension point.
				
[source,xml]
----
include::res/custom_launch/launchShortcut.xml[]
----
		
		The referenced `﻿LaunchShortcut` class must implement
				﻿`ILaunchShortcut`.
		
[source,java]
----
include::res/custom_launch/LaunchShortcut.java[]
----
		
        After implementing this, you can run the <guimenuitem>Sample Shortcut</guimenuitem>
            from a editor's popup menu or on a ISelection, such as a Java class file.
		
image::run_as_sample_shortcut.png[]
		
	

