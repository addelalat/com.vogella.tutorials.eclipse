<section id="buildeclipse" role="wrapper">
	<title>Creating a custom Eclipse IDE build</title>

	
	<section id="buildeclipse_introduction">
		<title>Building the Eclipse IDE</title>
		<indexterm>
			<primary>Eclipse IDE</primary>
			<secondary>custom build</secondary>
		</indexterm>
		<para>
			Eclipse uses a Maven based build system for automated build
			using the Maven Tycho plug-in. Using this build
			system you can create your custom build of the
			Eclipse IDE. If you building the Eclipse IDE from the current master
			branch you get an
			IDE
			based
			on
			the latest developments of the Eclipse development team.
		</para>
		<para>
			This effort is
			part of the
			Common Build
			Infrastructure (CBI) project which provide tools to simplify and
			standardize the
			Eclipse build process.
		</para>
		<para>
			The
			results of
			this
			build
			are archive
			files for the different
			platforms,
			which include
			everything to run an Eclipse IDE.
		</para>

	</section>
	<section id="buildeclipse_requirements">
		<title>Requirements</title>
		<para>
			As the build continuously changes, the
			results
			and
			requirement of
			the
			build might be slightly changed at the time you
			read
			this. See
			<xref linkend="buildeclipse_additions_questions" />
			for finding additional information.
		</para>
		<para>
			Depending on your network connection and your machine power the build of the Eclipse IDE takes around 2 hours on
			a Core i5 machine with
			SSD, so of course time is required for this.
			Also, approximately 25
			Gigs
			of free space and 4 Gigs
			of RAM are required on the
			hardware-side.
			Building of an Eclipse IDE
			is possible on Windows, OS X
			and Linux
			based
			distributions. This tutorial is tested with Linux.
		</para>
		<para>
			On the software-side the following software is required:
			<itemizedlist>
				<listitem>Git</listitem>
				<listitem>Maven Version 3.3.1</listitem>
				<listitem>Oracle 1.8 JDK or higher</listitem>
			</itemizedlist>
		</para>

	</section>

	<section id="buildeclipse_load_source">
		<title>Cloning the SDK repository</title>
		<para>
			You download the newest version of the source code by cloning
			the
			following
			repository
			and it's submodules via Git.
		</para>
		<para>
			<programlisting language="bourne">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/ide/clone.txt" />
			</programlisting>
		</para>
	</section>


	<section id="buildeclipse_run">
		<title>Building the Eclipse IDE</title>

		<para>You start the build with the following command.  </para>
		<para>
			<programlisting language="bourne">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/ide/build.txt" />
			</programlisting>
		</para>
		<para>
			If you receive
			<code>java.lang.OutOfMemoryError</code>
			error during the Maven build, you should increase the memory which is available for the build.
		</para>
		<para>
			<programlisting language="bourne">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/ide/maven_memory.txt" />
			</programlisting>
		</para>
		<para>
			If the build is successful, the Eclipse SDK is packaged as archive
			files
			for all supported platforms. These packages
			can be found in the
			Git
			repository in the following folder:
			<programlisting language="bourne">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/ide/path_product.txt" />
			</programlisting>
		</para>
	</section>

	<section id="buildeclipse_cleanupstepss">
		<title>Cleanup before the next build</title>
		<para>
			To ensure that the repository is clean and up to date we execute
			the following Git commands.
		</para>
		<para>
			<programlisting language="bourne">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/ide/clean.txt" />
			</programlisting>
		</para>
		<para>
			The build requires that the version numbers of each single
			Maven artifacts and it's Eclipse plug-ins are in
			sync. But sometimes
			(this is rare these days)
			developers forget to update the Maven
			version
			numbers. In this case the
			build complains about a version
			mismatch. Run the following command to correct
			existing
			inconsistencies.
		</para>
		<para>
			<programlisting language="bourne">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/ide/maven_update_pom.txt" />
			</programlisting>
		</para>
	</section>
</section>
