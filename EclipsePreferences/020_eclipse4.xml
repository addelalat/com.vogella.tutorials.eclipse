
	<title>Preferences and dependency injection

	<indexterm>
		<primary>Preferences</primary>
		<secondary>Dependency injection</secondary>
	</indexterm>
	<indexterm>
		<primary>IEclipsePreference</primary>
		<seealso>Preferences</seealso>
	</indexterm>
	
		The Eclipse platform allows you to use dependency injection for
		preferences handling.
		To access preference you use the
		<code>@Preference</code>
		annotation as qualifier for the dependency injection annotation. This means that
		<code>@Preference</code>
		must be used together with
		<code>@Inject</code>
		or one of the other annotations which implies dependency injection,
		e.g., the
		<code>@Execute</code>
		annotation.
	
	
		The
		<code>@Preference</code>
		annotation allows you to specify the
		<parameter>nodePath</parameter>
		and the
		<parameter>value</parameter>
		as optional parameters.
	

	
		The
		<parameter>nodePath</parameter>
		is the file name
		used to save the
		preference values to disk.
		By default
		this is
		the
		Bundle-SymbolicName of the plug-in. The
		<parameter>value</parameter>
		parameter specifies the preference key for the value which should be
		injected.
	

	
		Eclipse can also inject the
		<code>IEclipsePreference</code>
		object. You can use this object for storing values. If you use the
		_value_
		parameter, Eclipse injects the value directly. Use the
		_value_
		parameter for read access, while for storing or changing values, use
		the
		<code>IEclipsePreference</code>
		object.
	

	
		The following code snippet demonstrates how to put values into
		the preferences store. Please note that
		<code>@Preference</code>
		is used in combination with
		<code>@Execute</code>
		.
	
	
		<programlisting language="java">
			<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/eclipse4access/put.txt" />
		</programlisting>
	


	
		The next snippet demonstrates the read access of preference
		values. This time the preference annotation is used a
		qualifier for
		<code>@Inject</code>
		.
	

	
		<programlisting language="java">
			<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/eclipse4access/listen.txt" />
		</programlisting>
	
	
		The Eclipse platform automatically tracks the values and re-injects
		them
		into fields and methods if they change.
		Eclipse
		tracks
		changes of
		preferences
		in the
		<code>InstanceScope</code>
		scope.
		Preference values
		in the
		<code>ConfigurationScope</code>
		and
		<code>DefaultScope</code>
		are not tracked.
	

	
		If you use the injected
		<code>IEclipsePreference</code>
		to store new preference values, these
		values are stored in the instance
		scope.
	


