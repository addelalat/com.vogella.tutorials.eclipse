== The Architecture of Eclipse

=== Architecture of Eclipse based applications
		
		
		
			An Eclipse application consists of individual software
			components. The Eclipse IDE can be viewed as a special
			Eclipse
			application with the focus on supporting software development.
		

		
			The
			core components of the
			Eclipse IDE
			are depicted in the
			following graphic. The intention of the graphic is to
			demonstrate the
			general
			concept, the displayed
			relationships are not
			100% accurate.
		

		
			<mediaobject>
				<imageobject>
					<imagedata scale="30" fileref="images/architecture10.png[Important Eclipse IDE components,pdfwidth=60%]
		

		The most important Eclipse components of this graphic are
			described in
			the next section. On top of these base
			components, the
			Eclipse IDE adds additional
			components
			which are important for an IDE
			application, for example,
			the Java
			development tools (JDT) or version
			control support (EGit).
		

		
			An
			Eclipse RCP application typically uses the same base
			components of the
			Eclipse platform and adds additional
			application
			specific components as depicted in the following graphic.
		

		
			<mediaobject>
				<imageobject>
					<imagedata scale="30" fileref="images/architecture20.png[Typical components of an Eclipse RCP application,pdfwidth=60%]
		
	

=== Core components of the Eclipse platform
		
		
			_OSGi_
			is a specification to describe a modular approach to develop component-based Java applications. The programming model
			of OSGi allows you to
			define
			dynamic
			software components, i.e.,
			OSGi
			services.
			_Equinox_
			is
			one
			implementation of the OSGi specification and is used
			by the
			Eclipse
			platform as its runtime. This
			Equinox
			runtime
			provides the
			necessary API's and
			framework to
			run a modular
			Eclipse
			application.
		
		
			_SWT_
			is the standard user interface component library used by
			Eclipse.
			_JFace_
			provides some convenient APIs on top of SWT. The
			_workbench_
			provides
			the
			framework for the application. It is
			responsible for
			displaying all other user interface components.
		
		
			_EMF_
			is the Eclipse Modeling Framework which provides functionality to
			model a data model and to use this data model at
			runtime.
		

	


=== Eclipse API and internal API
		<indexterm>
			<primary>Provisional API</primary>
			<see>Internal API</see>
		</indexterm>
		

		
			An OSGi runtime allows the developer to mark Java packages as public, provisional or internal APIs. The internal
			API is private, therefore not visible. The provisional API are to test non-finalized APIs, therefore are visible but
			non-stable. The public API, or simply API, are the visible and stable API, that can be reused by other components.
		
		
image::osgi_api_definition_overview.png" scale="20[API definition in Eclipse,pdfwidth=60%]
		


		The Eclipse platform project marks packages either as public API
			or as provisional API, to make all Java classes
			accessible
			to Eclipse
			developers. If the Eclipse platform project releases an
			API, the
			platform project plans to keep
			this API stable for as long
			as
			possible.
		
		
			If API is internal but accessible, i.e., marked as provisional,
			the
			platform team can change this API in the
			future.
			If you use
			such
			API,
			you must be
			prepared that you might have to
			make some
			adjustments to
			your
			application in a future
			Eclipse release.
		
		
			If you use unreleased API, you see a
			_Discouraged access: The ...is not API (restriction on
				required project ...)
			_
			warning in the Java editor.
		
		TIP:
			
				You can turn
				off these warnings for your workspace via
				menu:
					<guimenu>Window</guimenu>
					<guisubmenu>Preferences</guisubmenu>
					<guisubmenu>Java</guisubmenu>
					<guisubmenu>Compiler</guisubmenu>
					<guisubmenu>Errors/Warnings</guisubmenu>
				</menuchoice>
				and by setting the
				_Discouraged reference (access rules)_
				flag
				to
				_Ignore_
				.
			
			
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/warnings10.png" scale="30" />
					</imageobject>
					<textobject>
						<phrase>Turning of the Eclipse warnings</phrase>
					</textobject>
				</mediaobject>
			
			
				Alternatively you can turn off these warnings on a per project
				basis,
				via right-click on the project
				menu:
					<guimenu>Properties</guimenu>
					<guisubmenu>Java Compiler </guisubmenu>
				</menuchoice>
				and afterwards use the same path as for accessing the global
				settings.
				You might
				have
				to activate the
				_Enable project specific settings_
				checkbox at the top of the Error/Warnings preference page.
			
		</tip>
	



=== Important configuration files for Eclipse plug-ins
		
		
		
		
			An Eclipse plug-in has the following main configuration files. These
			files are defining the API, and the dependencies
			of the plug-in.
			<itemizedlist>
				<listitem>
					
						_MANIFEST.MF_
						- contains the OSGi configuration information.
					
				</listitem>
				<listitem>
					
						_plugin.xml_
						- optional configuration file, contains information about Eclipse
						specific
						extension mechanisms.
					
				</listitem>
			</itemizedlist>

		

		
			An Eclipse plug-in defines its meta data, like its unique identifier, its exported API and its dependencies via the
			_MANIFEST.MF_
			file.
		
		
			The
			_plugin.xml_
			file provides the possibility to create and contribute to
			Eclipse
			specific
			API. You can add
			_extension points_
			and
			_extensions_
			in this file.
			_Extension-points_
			define interfaces for other
			plug-ins to contribute functionality.
			_Extensions_
			contribute
			functionality to these interfaces. Functionality can be
			code
			and non-code based. For example a plug-in might
			contain help
			content.
		


	




