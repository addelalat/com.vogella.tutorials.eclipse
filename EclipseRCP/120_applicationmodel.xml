
== Eclipse 4 application model

=== What is the application model?
		

		

		
			The Eclipse platform uses an abstract description, called the
			_application model_
			,
			to
			describe the structure of an application. This
			application
			model
			contains the visual
			elements as well as some
			non-visual
			elements of
			the
			application.
		

		
			The visual parts are, for example,
			windows, parts (views and
			editors),
			menus, toolbars, etc. Examples for
			non-visual
			components are
			handlers,
			commands
			and
			key bindings.
		

		
			Each model element has
			attributes which describe
			its current
			state, e.g.
			the
			size
			and
			the
			position of a
			window. The
			application model
			also expresses the relationship of the
			model elements via a hierarchy.

		
		  
            The individual user interface widgets, which are displayed in a
            part,
            are not defined via the application model,
            i.e., the
            content
            of
            the
            part
            is still defined
            by
            your
            source code.

            If the application model was a house,
            it would describe the
            available
            rooms (parts) and their arrangement
            (perspectives,
            part
            stacks,
            part sash containers),
            but not the furniture of the
            rooms. This
            is illustrated
            by the
            following
            image.
        
        
            <mediaobject>
                <imageobject>
                    <imagedata fileref="images/modeledworkbench10.gif" scale="60" />
                </imageobject>
                <textobject>
                    <phrase>Limits of the modeled workbench</phrase>
                </textobject>
            </mediaobject>
        

		
			The base of the application
			model is
			typically defined
			as a
			static file.
			By default, it is called
			`Application.e4xmi`
			and located in the main directory of the plug-in which
			defines the
			product extension.
			This file is read at application
			startup and is used to
			construct the initial application model. Changes made by the user are
			persisted and re-applied
			at startup.
		
		
			The application model is extensible, e.g., other plug-ins can
			contribute
			to it via
			_model processors_
			and
			_model fragments_
			.
		

	



=== Connecting model elements to classes and resources
		<indexterm>
			<primary>Class URI</primary>
			<secondary>bundleclass://</secondary>
		</indexterm>
		
		<indexterm>
			<primary>Class URI</primary>
			<secondary>platform:/plugin/</secondary>
		</indexterm>
		

		
			Model elements can point to a class or to a static resource via
			a
			Uniform
			Resource
			Identifier (URI). For this
			purpose
			Eclipse defines two
			URI patterns. Eclipse instantiates the referred objects or resources in most cases lazily.
			For
			example,
			the
			classes for a part are
			instantiated when
			the part gets visible.
		
		

			The following table describes the support URI
			patterns.
			The
			example
			assumes
			that the bundle is called
			_test_
			to have a short name.
		
		<table frame='all'>
	=== URI pattern
			<tgroup cols='2' align='left' colsep='1' rowsep='1'>
				<colspec colname='c1' colwidth="2*" />
				<colspec colname='c2' colwidth="3*" />
				<thead>
					<row>
						<entry>Pattern</entry>
						<entry>Description</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>
							
								<emphasis>bundleclass://</emphasis>
								BSN/package.classname
							
							
							Example:
							bundleclass://test/test.parts.MySavePart
							
						</entry>
						<entry>
							
								Identifier for a Java class.
							
							
								It consists of the
								following
								parts:
								<emphasis>bundleclass://</emphasis>
								is a fixed prefix,
								BSN stands for Bundle-SymbolicName and is
								defined in a configuration file called
								_MANIFEST.MF_
								file. The Bundle-SymbolicName is followed by a '/' and the fully
								qualified classname.
							
						</entry>
					</row>
					<row>
						<entry>
							
								<emphasis>platform:/plugin/</emphasis>
								BSN/path/filename.extension
							

							
							Example:
							
								platform:/plugin/test/icons/save_edit.gif
							
						</entry>
						<entry>
							
								Used to identify resources.
							
							
								Identifier for a resource in a plug-in.
								<emphasis>platform:/plugin/</emphasis>
								is a
								fixed prefix, followed by the
								BSN stands for
								Bundle-SymbolicName as defined in the
								_MANIFEST.MF_
								file, followed by the
								path
								to the file and the filename.
							
						</entry>
					</row>
				</tbody>
			</tgroup>
		</table>


		
			For example a part, have
			a
			_Class URI_
			attribute
			which points to a Java class via the
			`bundleclass://`
			URI.
			This
			class
			provides the
			behavior of the
			part. The corresponding
			object is created by the Eclipse framework.
			Using the
			house/rooms
			metaphor
			from
			earlier, the class is
			responsible for
			defining the
			furnishings,
			the
			layout of the room and how
			the
			interactive
			objects
			behave.
		

		
image::classuri10.png[,pdfwidth=60%]
		
		
			An example for a static resource reference is the
			the
			_Icon URI_
			attribute of a part. This attribute
			can point to an icon that is used for the part.
		
	

    
        <title>Runtime application model
        
            At runtime of the application the created set of model objects is called the
            _runtime application model_
            .
            This runtime application model is dynamic, i.e., you can change the
            model
            objects and
            its
            attributes and these changes
            are reflected in your
            application.
            The
            Eclipse platform has change listeners registered on
            the
            model
            objects
            and updates the
            user interface whenever you change
            relevant
            attributes.
        
    

