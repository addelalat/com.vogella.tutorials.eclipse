
== User interface model elements
	
		The following model elements represents the basic elements which
		you use to create the user interface of your
		application.
	

=== Window
		

		
			Eclipse applications consist of one or more windows.
			Typically,
			an application has only one
			window,
			but you are not
			limited
			to that,
			e.g., if you want to support multiple connected monitors.
		
		
image::e4window10.png[Eclipse application showing 2 windows,pdfwidth=60%]
		
	

	<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="040a_eclipseui_parts.adoc[]



=== Available part containers


		
		

		<indexterm>
			<primary>Part sash container</primary>
			<secondary>Layout weight</secondary>
		</indexterm>

		
			Parts
			can be directly assigned to a
			window
			or a perspective. They can
			also be grouped and arranged via additional model
			elements, i.e.,
			via part
			stack (
			_Part Stack_
			) or via part sash container (
			_Part Sash Container_
			) elements.
		

		
			A part stack contains a stack of parts showing the content of
			one
			part while displaying only the headers of the
			other parts. One
			part
			is active and
			the
			user
			can
			switch to another
			part
			by
			selecting the
			corresponding
			tab.
		
		
			A part sash container
			displays all its children at the same time
			either
			horizontally or
			vertically aligned.
		
		
			The following screenshot shows a simple Eclipse application
			layout using
			two part sash container
			and three
			part
			stacks.
		

		
image::e4uicomponents10.png[An example arrangement of Parts in an Eclipse application,pdfwidth=60%]
		

		
			On the top of this layout there is a horizontal
			part sash
			container
			which contains another
			part sash container
			and
			one
			part
			stacks. The part sash container on the next level contains two part
			stacks. The
			hierarchy is depicted in the
			following graphic.
		

		
image::e4uicomponents20.png" scale="60[The hierarchy of Parts using PartStacks and
						PartSashcontainers.
					,pdfwidth=60%]
		


		
			You can use the
			_Container Data_
			attribute on a child of a part sash container
			to assign a layout
			weight.
			This layout weight is interpreted as the relative space the
			corresponding child element should get assigned in
			the
			part sash container.
			The setting is depicted in the following
			screenshot.
		
		
image::containerdata20.png[Container data for layouting,pdfwidth=60%]
		
		
			If you set the
			_Container Data_
			for one element, you must define it for
			all the other elements, too.
			Otherwise
			the missing values are interpreted as
			very high and these
			elements
			take
			up all available space.
		
		TIP:
			
				The initial total of all the container data values is
				maintained when elements in the sash are moved. In order
				to allow
				fine grained/smooth dragging this total must be similar to the
				screen resolution. A too low value (i.e., 50 /
				50) causes the part
				to
				be moved multiple pixels per sash unit, which the user will
				realize
				as a jerky movement.
				Therefore, use a
				sufficient high
				value,
				e.g.,
				10000.
			
		</tip>
	


=== Perspective
		

		
			A
			perspective
			is an optional container for a set of
			parts.
			Perspectives can be used to
			store different arrangements of parts. For
			example, the Eclipse IDE
			uses them to layout the views appropriate to
			the task (development,
			debugging, review, ...) the developer wants to
			perform.
		
		
			You can place
			perspectives
			in
			a perspective stack of the
			application
			model.
			Switching
			perspectives
			can be done via the
			part
			service
			provided by the Eclipse platform.
		
	


