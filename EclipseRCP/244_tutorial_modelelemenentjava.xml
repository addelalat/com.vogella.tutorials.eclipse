== Exercise: Connect Java classes with the parts

=== Create a new package and some Java classes
		
			Create the
			`com.example.e4.rcp.todo.parts`
			package in the application plug-in.
		
		
			Create three Java classes called
			_TodoOverviewPart_
			,
			_TodoDetailsPart_
			and
			_PlaygroundPart_
			in this package.
		
		TIP:
			
				You can create the classes by clicking on the
				_Class URI_
				hyperlink in the detail pane of the model editor for the part. This also
				connects the created class to the model
				object. If you do this, you
				can skip
				<xref linkend="tutorial_modelelementsclasses" />
				of this exercise.
			
		
		
			The following code shows the
			`TodoDetailsPart`
			class. All classes
			should not
			extend
			another
			class, nor do they
			implement
			any
			interface.
		

		
[source,java]
----
include::res/start/TodoDetailsPart.java[]
----
		
	

=== Connect the Java classes with your parts
		
			Open the
			_Application.e4xmi_
			file and connect the class with the
			corresponding part model element.
			You can do
			this via
			the
			<property>Class URI</property>
			property
			of
			the
			part
			model element.
		

		The following table gives an overview of which elements should
			be
			connected.

.Table Title
|===

		=== Mapping Java classes with part model element
				<tgroup cols='2' align='left' colsep='1' rowsep='1'>
					<colspec colname='c1' colwidth="1*" />
					<colspec colname='c2' colwidth="2*" />
					
						
|Class
|Part ID suffix
						
					
					
						
|TodoOverviewPart
|*.todooverview
						
						
|TodoDetailsPart
|*.tododetails
						
						
|PlaygroundPart
|*.playground
						
					
				
|===
		
		
			The Eclipse 4 model editor allows you to search for an existing
			class
			via the
			_Find..._
			button. The initial list of
			_Contribution Classes_
			is empty, start typing in the
			_Class Name_
			field to see the results.
		

		
image::tutorial_model60.png[Finding a model class in the Application model]
		
		The following screenshot shows the result for the overview part.
		

		
image::tutorial_model62.png[Finding a model class in the Application model]
		
	

=== Validating

		 Run your application. It should start, but you should see no
			difference in the user interface.
		

		
			To validate that the model objects are created by the Eclipse runtime
			create a no-argument constructor for one of the
			classes and add a
			`System.out.println()`
			statement.

			Afterwards verify that the constructor is called, once you
			start the
			application.
		
	


