<section id="tutorial_menu" role="wrapper">
	<title>Exercise: Adding menus</title>
	<section id="uicomponents_overview">
		<title>Target of this exercise</title>
		<para>In this exercise you create commands and handlers for your
			application. Afterwards you will create menu entries
			using
			these commands.
		</para>
	</section>
	<section id="tutorial_menu_command">
		<title>Create command model elements</title>
		<para>

			Open
			the
			<filename>Application.e4xmi</filename>
			file of your
			<code>com.example.e4.rcp.todo</code>
			plug-in and select the
			<guilabel>Commands</guilabel>
			entry. This selection is highlighted in the following screenshot.
		</para>
		<para>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/commands10.png" scale="50" />
				</imageobject>
				<textobject>
					<phrase>Adding commands to your application</phrase>
				</textobject>
			</mediaobject>
		</para>
		<para>
			Via the
			<guibutton>Add...</guibutton>
			button
			you can create new commands. The name and the ID are
			the
			important
			fields. Create the following
			commands.
		</para>
		<para>
			<table frame='all'>
				<title>Commands</title>
				<tgroup cols='2' align='left' colsep='1' rowsep='1'>
					<colspec colname='c1' />
					<colspec colname='c2' />
					<thead>
						<row>
							<entry>ID</entry>
							<entry>Name</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>org.eclipse.ui.file.saveAll</entry>
							<entry>Save</entry>
						</row>
						<row>
							<entry>
								org.eclipse.ui.file.exit
							</entry>
							<entry>Exit</entry>
						</row>
						<row>
							<entry>com.example.e4.rcp.todo.command.new</entry>
							<entry>New Todo</entry>
						</row>
						<row>
							<entry>com.example.e4.rcp.todo.command.remove</entry>
							<entry>Remove Todo</entry>
						</row>
						<row>
							<entry>com.example.e4.rcp.todo.command.test</entry>
							<entry>For testing</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
		</para>

	</section>

	<section id="tutorial_menu_handlerclasses">
		<title>Creating the handler classes</title>
		<para>
			Create the
			<code>com.example.e4.rcp.todo.handlers</code>
			package for your handler classes.
		</para>
		<para>
			All handler classes implement an
			<code>execute()</code>
			method annotated with
			<code>@Execute</code>
			.
		</para>

		<para>
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/snippets/SaveAllHandler.java" />
			</programlisting>
		</para>

		<para>Using this template for all classes, implement the following
			classes.
		</para>
		<itemizedlist>
			<listitem>
				<para>SaveAllHandler</para>
			</listitem>
			<listitem>
				<para>ExitHandler</para>
			</listitem>
			<listitem>
				<para>NewTodoHandler</para>
			</listitem>
			<listitem>
				<para>RemoveTodoHandler</para>
			</listitem>

			<listitem>
				<para>TestHandler</para>
			</listitem>
		</itemizedlist>

	</section>
	<section id="tutorial_menu_handlers">
		<title>Creating handler model elements</title>

		<para>
			Select the application-scoped
			<guilabel>Handlers</guilabel>
			entry
			in your application model and create
			the handlers from the
			following
			table for your commands. For the definition of handlers the
			ID, command and class are the relevant information.
		</para>
		<para>
			Use the
			<code>com.example.e4.rcp.todo.handler</code>
			prefix for all IDs of the handlers.
		</para>
		<para>

			<table frame='all'>
				<title>Handlers</title>
				<tgroup cols='3' align='left' colsep='1' rowsep='1'>
					<colspec colname='c1' colwidth="1*" />
					<colspec colname='c2' colwidth="2*" />
					<colspec colname='c3' colwidth="2*" />
					<thead>
						<row>
							<entry>Handler ID</entry>
							<entry>Command</entry>
							<entry>Class</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>.saveall</entry>
							<entry>Save</entry>
							<entry>SaveAllHandler</entry>
						</row>
						<row>
							<entry>
								.exit
							</entry>
							<entry>Exit</entry>
							<entry>ExitHandler</entry>
						</row>
						<row>
							<entry>.new</entry>
							<entry>New Todo</entry>
							<entry>NewTodoHandler</entry>
						</row>
						<row>
							<entry>.remove</entry>
							<entry>Remove Todo</entry>
							<entry>RemoveTodoHandler</entry>
						</row>
						<row>
							<entry>.test</entry>
							<entry>For testing</entry>
							<entry>TestHandler</entry>
						</row>
					</tbody>
				</tgroup>
			</table>

		</para>

		<para>
			The application model editor shows both the name and the ID of
			the
			command. The class URI follows the
			<code>bundleclass://</code>
			schema, the table only defines the class name to make the table more
			readable. For example, for the save handler this looks like the
			following:
		</para>
		<para>
			<programlisting language="text">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/snippets/bundleclass.txt" />
			</programlisting>
		</para>


		<para>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/handler10.png"/>
				</imageobject>
				<textobject>
					<phrase>Defining a handler in Eclipse 4</phrase>
				</textobject>
			</mediaobject>
		</para>

	</section>
	<section id="tutorial_menu_menu">
		<title>Adding a menu</title>

		<para>
			In your
			<filename>Application.e4xmi</filename>
			file select your
			<guilabel>TrimmedWindow</guilabel>
			entry in the model and flag the
			<guilabel>Main Menu</guilabel>
			attribute.
		</para>

		<para>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/menu04.png"/>
				</imageobject>
			</mediaobject>
		</para>
		<para>
			Assign the
			<code>org.eclipse.ui.main.menu</code>
			ID to your main menu.
		</para>
		<warning>
			<para>Ensure that this ID of the main menu is correct. You use it
				later to contribute
				another menu entry via another plug-in.
			</para>
		</warning>
		<para>
			Add two menus, one with the name
			"File"
			and the other one with
			the name
			"Edit"
			in the
			<parameter>Label</parameter>
			attribute.
		</para>
		<para>
			Also set the
			<wordasword>org.eclipse.ui.file.menu</wordasword>
			ID for the
			File
			menu. Use
			<wordasword>com.example.e4.rcp.todo.menu.edit</wordasword>
			as ID for the
			Edit
			menu.
		</para>
		<para>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/commands20.png" scale="50" />
				</imageobject>
				<textobject>
					<phrase>Creating a menu</phrase>
				</textobject>
			</mediaobject>
		</para>
		<para>
			Add a
			<guilabel>Handled MenuItem</guilabel>
			model element
			to the
			File
			menu. This item should point to the
			<wordasword>Save</wordasword>
			command via the
			<parameter>Command</parameter>
			attribute.
		</para>
		<para>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/commands30.png" scale="30" />
				</imageobject>
				<textobject>
					<phrase>Adding a menu item to the menu</phrase>
				</textobject>
			</mediaobject>
		</para>

		<para>
			Add a
			<guilabel>Separator</guilabel>
			after the Save menu item and after that add an entry for the Exit
			command.
		</para>
		<para>
			Add all other commands to the
			Edit
			menu.
		</para>

	</section>
	
	<section id="tutorial_menu_close">
		<title>Implement a handler class for exit</title>
		<para>
			To test if your handler is working, change your
			<code>ExitHandler</code>
			class, so that it closes your application, once selected.
		</para>
		<para>
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/command/ExitHandler.java" />
			</programlisting>
		</para>
	</section>

	<section id="tutorial_menu_validate">
		<title>Validating</title>
		<para>
			Validate that your save handler is called if you select Save
			from the
			menu.
		</para>
		<para>
			Also check that you can exit the application via the
			<guilabel>Exit</guilabel>
			menu entry.
		</para>
	</section>

	<section id="tutorial_menu_macissue">
		<title>Possible issue: Exit menu entry on a MacOS</title>
		<para>If you use the "org.eclipse.ui.file.exit" ID for your exit
			command, the Eclipse framework tries to map the exit command to its
			default menu location on the MacOS. If you don't see your exit menu,
			in its defined position, check this location.
		</para>
	</section>



</section>