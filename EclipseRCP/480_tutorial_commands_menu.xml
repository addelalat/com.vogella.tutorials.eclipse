== Exercise: Adding menus

=== Target of this exercise
		In this exercise you create commands and handlers for your
			application. Afterwards you will create menu entries
			using
			these commands.
		
	

=== Create command model elements
		

			Open
			the
			_Application.e4xmi_
			file of your
			`com.example.e4.rcp.todo`
			plug-in and select the
			_Commands_
			entry. This selection is highlighted in the following screenshot.
		
		
image::commands10.png" scale="50[Adding commands to your application,pdfwidth=60%]
		
		
			Via the
			_Add..._
			button
			you can create new commands. The name and the ID are
			the
			important
			fields. Create the following
			commands.
		
		
			<table frame='all'>
		=== Commands
				<tgroup cols='2' align='left' colsep='1' rowsep='1'>
					<colspec colname='c1' />
					<colspec colname='c2' />
					<thead>
						<row>
							<entry>ID</entry>
							<entry>Name</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>org.eclipse.ui.file.saveAll</entry>
							<entry>Save</entry>
						</row>
						<row>
							<entry>
								org.eclipse.ui.file.exit
							</entry>
							<entry>Exit</entry>
						</row>
						<row>
							<entry>com.example.e4.rcp.todo.command.new</entry>
							<entry>New Todo</entry>
						</row>
						<row>
							<entry>com.example.e4.rcp.todo.command.remove</entry>
							<entry>Remove Todo</entry>
						</row>
						<row>
							<entry>com.example.e4.rcp.todo.command.test</entry>
							<entry>For testing</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
		

	


=== Creating the handler classes
		
			Create the
			`com.example.e4.rcp.todo.handlers`
			package for your handler classes.
		
		
			All handler classes implement an
			`execute()`
			method annotated with
			`@Execute`
			.
		

		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/snippets/SaveAllHandler.java[]
----
		

		Using this template for all classes, implement the following
			classes.
		
		<itemizedlist>
			<listitem>
				SaveAllHandler
			</listitem>
			<listitem>
				ExitHandler
			</listitem>
			<listitem>
				NewTodoHandler
			</listitem>
			<listitem>
				RemoveTodoHandler
			</listitem>

			<listitem>
				TestHandler
			</listitem>
		</itemizedlist>

	

=== Creating handler model elements

		
			Select the application-scoped
			_Handlers_
			entry
			in your application model and create
			the handlers from the
			following
			table for your commands. For the definition of handlers the
			ID, command and class are the relevant information.
		
		
			Use the
			`com.example.e4.rcp.todo.handler`
			prefix for all IDs of the handlers.
		
		

			<table frame='all'>
		=== Handlers
				<tgroup cols='3' align='left' colsep='1' rowsep='1'>
					<colspec colname='c1' colwidth="1*" />
					<colspec colname='c2' colwidth="2*" />
					<colspec colname='c3' colwidth="2*" />
					<thead>
						<row>
							<entry>Handler ID</entry>
							<entry>Command</entry>
							<entry>Class</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>.saveall</entry>
							<entry>Save</entry>
							<entry>SaveAllHandler</entry>
						</row>
						<row>
							<entry>
								.exit
							</entry>
							<entry>Exit</entry>
							<entry>ExitHandler</entry>
						</row>
						<row>
							<entry>.new</entry>
							<entry>New Todo</entry>
							<entry>NewTodoHandler</entry>
						</row>
						<row>
							<entry>.remove</entry>
							<entry>Remove Todo</entry>
							<entry>RemoveTodoHandler</entry>
						</row>
						<row>
							<entry>.test</entry>
							<entry>For testing</entry>
							<entry>TestHandler</entry>
						</row>
					</tbody>
				</tgroup>
			</table>

		

		
			The application model editor shows both the name and the ID of
			the
			command. The class URI follows the
			`bundleclass://`
			schema, the table only defines the class name to make the table more
			readable. For example, for the save handler this looks like the
			following:
		
		
			<programlisting language="text">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/snippets/bundleclass.txt[]
----
		


		
image::handler10.png[Defining a handler in Eclipse 4,pdfwidth=60%]
		

	

=== Adding a menu

		
			In your
			_Application.e4xmi_
			file select your
			_TrimmedWindow_
			entry in the model and flag the
			_Main Menu_
			attribute.
		

		
image::menu04.png"/>
				</imageobject>
			</mediaobject>
		
		
			Assign the
			`org.eclipse.ui.main.menu`
			ID to your main menu.
		
		<warning>
			Ensure that this ID of the main menu is correct. You use it
				later to contribute
				another menu entry via another plug-in.
			
		</warning>
		
			Add two menus, one with the name
			"File"
			and the other one with
			the name
			"Edit"
			in the
			_Label_
			attribute.
		
		
			Also set the
			_org.eclipse.ui.file.menu_
			ID for the
			File
			menu. Use
			_com.example.e4.rcp.todo.menu.edit_
			as ID for the
			Edit
			menu.
		
		
image::commands20.png" scale="50[Creating a menu,pdfwidth=60%]
		
		
			Add a
			_Handled MenuItem_
			model element
			to the
			File
			menu. This item should point to the
			_Save_
			command via the
			_Command_
			attribute.
		
		
image::commands30.png" scale="30[Adding a menu item to the menu,pdfwidth=60%]
		

		
			Add a
			_Separator_
			after the Save menu item and after that add an entry for the Exit
			command.
		
		
			Add all other commands to the
			Edit
			menu.
		

	
	

=== Implement a handler class for exit
		
			To test if your handler is working, change your
			`ExitHandler`
			class, so that it closes your application, once selected.
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/command/ExitHandler.java[]
----
		
	


=== Validating
		
			Validate that your save handler is called if you select Save
			from the
			menu.
		
		
			Also check that you can exit the application via the
			_Exit_
			menu entry.
		
	


=== Possible issue: Exit menu entry on a MacOS
		If you use the "org.eclipse.ui.file.exit" ID for your exit
			command, the Eclipse framework tries to map the exit command to its
			default menu location on the MacOS. If you don't see your exit menu,
			in its defined position, check this location.
		
	



