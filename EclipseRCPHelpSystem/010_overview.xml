<section id="help">
	<title>Eclipse Help</title>
	<section id="help_overview">
		<title>Overview</title>
		<para>
			Eclipse has a build-in help system which allows to start and
			access
			the help system directly from your Eclipse RCP application. The
			Eclipse help system is based on HTML, the "org.eclipse.help.toc"
			extension points and additional XML files which point to the HTML
			files.
		</para>
		<para>
			Via the extension point you describe the first level structure
			and point to XML files. These XML files contain references to the
			relevant HTML files.
		</para>
		<para>
			Typically help content is delivered via separate plug-ins. To
			use help
			in your Eclipse RCP project either add the following plug-ins and
			their dependencies to your
			product:

			<itemizedlist>
				<listitem>
					<para>org.eclipse.help.ui
					</para>
				</listitem>
				<listitem>
					<para>org.eclipse.help.webapp   </para>
				</listitem>
				<listitem>
					<para>org.eclipse.equinox.http.jetty   </para>
				</listitem>
			</itemizedlist>

			or if you product is feature based add the
			<code>org.eclipse.help</code>
			feature
			and
			<code>org.eclipse.ui.forms</code>
			plug-in to your product
			configuration file.
		</para>
		<para>
			Eclipse defines several predefined commands which you can use in your
			RCP application.
			<itemizedlist>
				<listitem>
					<para>"org.eclipse.ui.help.displayHelp" - Opens the help    </para>
				</listitem>
				<listitem>
					<para>"org.eclipse.ui.help.helpSearch" - Open the Search
					</para>
				</listitem>
				<listitem>
					<para>"org.eclipse.ui.help.dynamicHelp" - Opens the Help specific
						for the current selection if this is configured in the application
					</para>
				</listitem>
			</itemizedlist>
		</para>
	</section>


	<section id="help_plugin">
		<title>Extension point</title>
		<para>The following shows an example of an extension for
			"org.eclipse.help.toc". The toc entry which has the primary="true"
			flag set will be treated as a main entry in the help, all others will
			be treated as subtopics. Topics not flagged as "primary" will not
			show up in the help hierarchy unless they are linked to from at least
			one
			primary toc file. The file attribute points to the XML file which
			describes the content.
		</para>
		<para>
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/plugin/plugin.xml" />
			</programlisting>
		</para>
		<para> The primary toc file defines anchor points to which other toc
			files can contribute content. For example the following "toc.xml"
			defines two anchor points "gettingstarted" and "samples". This
			approach is called "bottom-up composition". Eclipse help files can
			also be build with a "top-down nesting" approach but this tutorial
			not only use "bottom-up composition". "Bottom-up composition" allow
			that the top level toc does not know who is extending its anchors.
			New plug-ins could add new content to these anchors without the need
			to change the primary toc. This concept is very close to the
			extension point mechanism in Eclipse.
		</para>

		<para>
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/plugin/toc.txt" />
			</programlisting>
		</para>
		<para>The following shows the non primary ""tocgettingstarted.xml"
			file. Via the href attribute this toc file links the chapters to
			actual HTML files. The "link_to" attribute points to the anchors of
			the primary toc.
		</para>
		<para>
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/plugin/tocgettingstarted.txt" />
			</programlisting>
		</para>
	</section>
	<section id="help_i18n">
		<title>Internationalization</title>
		<para>To support several languages in your help plug-in place the
			content into a special directory into your plug-in called
			"nl/language/country" thereby country is optional. For example to
			provide English and German content use "nl/en" and "nl/de".
		</para>
		<para> The help system will first search in the "nl/language/country"
			directory, afterwards in the "nl/language" directory and if it
			does
			not find anything there then it searches in the root folder of
			the
			plug-in directory.
		</para>
		<para> Typically translations of help content are provides via
			Fragment projects for the primary help plug-in. At runtime the host
			plug-in and its fragments are merged to one.
		</para>
	</section>
	<section id="help_generating">
		<title>Generating Eclipse Help</title>
		<para>Writing the HTML and XML files for the Eclipse help can be time
			consuming. One frequently used approach is to write Docbook files.
			Docbook source files can be converted into PDF, HTML and
			Eclipse help
			files via the Docbook XSLT stylesheets.
		</para>
	</section>
	<section id="help_contextsensitive">
		<title>Context sensitive help</title>
		<para>You can add context sensitive help to your application via the
			extension point "org.eclipse.help.contexts". This extension point
			defines a file for a certain plug-in.
		</para>

		<para>
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/context/extension.txt" />
			</programlisting>
		</para>
		<para> This file defines Id's and links to the HTML pages of the help
			system. The file can be maintained with the specialized "Context
			Help
			Editor".
		</para>
		<para>
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/context/contextDefinitionFile.xml" />
			</programlisting>
		</para>
		<para> To assign these id to your SWT controls you can use the
			following code:
		</para>
		<para>
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/context/assignId.txt" />
			</programlisting>
		</para>
		<para> If the user opens the dynamic help via the command
			"org.eclipse.ui.help.dynamicHelp" then the corresponding help is
			displayed.
		</para>

	</section>
	<section id="help_activehelp">
		<title>ActiveHelp</title>
		<para>You can link from the help to Eclipse commands. This feature is
			called ActiveHelp and requires that you add a small JavaScript
			snippet
			to your HTML code. You find an example for how to use this in
			the
			Eclipse help. Search for "Active Help".
		</para>
	</section>
</section>