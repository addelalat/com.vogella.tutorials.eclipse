<section id="convertjars">
	<title>Automatic conversion of JARS to OSGi bundles
	In order to convert JARS to OSGi bundles several solutions exist.
	<section>
		<title>Orbit receipts
		
			The Orbit project hosts the Orbit receipts project which allows to convert JARs from Maven to OSGi bundles. Clone the
			Git repo
			from the following URL
			<ulink url="https://git.eclipse.org/r/orbit/orbit-recipes"></ulink>
			and see the README.md for how to use it. Also see https://github.com/eclipse/ebr for a description of the
			<wordasword>Eclipse Bundle Recipes</wordasword>
			project.
		
	</section>
	<section>
		<title>All in one with p2-maven-plugin
		The p2-maven-plugin can be used to generate OSGi bundles out of JARs and creates a p2
			updatesite, which contains
			the converted OSGi JARs.
		
		
			In the following sample
			<code>slf4j-log4j12</code>
			in version 1.7.10 and all of its
			dependencies will be converted to OSGi bundles and a p2 updatesite will be
			created.
		
		
			<programlisting language="xml">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/p2-maven-plugin/pom.xml" />
			</programlisting>
		
		
			By using the
			<code>mvn clean p2:site</code>
			goal this resulting p2 repository will be
			created:
		
		
			<mediaobject>
				<imageobject>
					<imagedata fileref="./images/p2-maven-plugin.png" />
				</imageobject>
			</mediaobject>
		
		
			Here you can see that also
			<code>log4j_1.2.17</code>
			and
			<code>slf4j.api_1.7.10</code>
			are converted and can be obtained by using the created p2 updatesite.
		
		
			<mediaobject>
				<imageobject>
					<imagedata fileref="./images/p2-maven-plugin-updatesite.png" />
				</imageobject>
			</mediaobject>
		
		In this case the p2 repository targets the file system. But of curse you can also
			embed the conversion into a
			deployment build.
		
		
			In the following sample the p2-maven-plugin is added to the
			<property>package</property>
			phase and the
			<property>site</property>
			goal is executed. Then the p2 updatesite is
			archived to one zip file, which is then uploaded to a repository manager.
		
		
			<programlisting language="xml">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/p2-maven-plugin/pom-scm.xml" />
			</programlisting>
		
		
			With the pom.xml above you just need to invoke
			<code>mvn clean deploy</code>
			and the zip
			file will be deployed to your Nexus installation.
		
		
			In order to use this p2 updatesite inside this zip file you can create a virtual
			repository on Nexus and use the ï»¿
			<emphasis>Tycho/Nexus Unzip Plugin</emphasis>
			. See
			<ulink url="https://wiki.eclipse.org/Tycho/Nexus_Unzip_Plugin">Tycho/Nexus Unzip
				Plugin
			</ulink>
			, if you want to know use it.
		
		
			For more information concerning the p2-maven-plugin see
			<ulink url="http://projects.reficio.org/p2-maven-plugin" />
			.
		
	</section>

</section>