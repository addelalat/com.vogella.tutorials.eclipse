== Eclipse Zest

=== Overview
		
			Eclipse Zest is a visualization toolkit for graphs. It is based
			on http://www.vogella.com/tutorials/SWT/article.html"> SWT
			/ Draw2D. Zest supports the viewer concept from
			http://www.vogella.com/tutorials/EclipseJFace/article.html"> JFace Viewers
			and
			therefore
			allows to separate the model from the graphical
			representation of the
			model.
			This article assumes that you are already
			familiar with
http://www.vogella.com/tutorials/RichClientPlatform/article.html"> Eclipse RCP
			or
			http://www.vogella.com/tutorials/EclipsePlugin/article.html"> Eclipse Plugin development
			.
		
	

=== Components
		
			Eclipse Zest has the following components:
			<itemizedlist>
				<listitem>GraphNode - Node in the graph with the properties
					
				</listitem>
				<listitem>
					GraphConnections - Arrow / Edge of the graph which
						connections to two nodes
					
				</listitem>
				<listitem>
					GraphContainer - Use for a graph within a graph
					
				</listitem>
				<listitem>Graph - holds the other elements (nodes, connections,
						container) 
				</listitem>
			</itemizedlist>
		
	

=== Layout Manager
		
			Eclipse Zest provides graph layout managers. A graph
			layout
			manager
			determines how the nodes (and the arrows) of a graph
			are
			arranged on
			the screen. The following layout managers are provided:

			<table frame='all'>
		=== Layout Manager
				<tgroup cols='2' align='left' colsep='1' rowsep='1'>
					<colspec colname='c1' />
					<colspec colname='c2' />
					<thead>
						<row>
							<entry>Layout Manager </entry>
							<entry>Description</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>TreeLayoutAlgorithm</entry>
							<entry>Graph is displayed in the form of a
								vertical tree</entry>
						</row>
						<row>
							<entry>HorizontalTreeLayoutAlgorithm</entry>
							<entry>Similar to TreeLayoutAlgorithm
								but layout is horizontal
							</entry>
						</row>
						<row>
							<entry>RadialLayoutAlgorithm</entry>
							<entry>Root is in the center, the others
								nodes are placed around
								this node</entry>
						</row>
						<row>
							<entry>GridLayoutAlgorithm</entry>
							<entry></entry>
						</row>
						<row>
							<entry>SpringLayoutAlgorithm</entry>
							<entry>Layout the graph so that
								all connections should have
								approx. the same length and that the
								edges overlap minimal
							</entry>
						</row>
						<row>
							<entry>HorizontalShift</entry>
							<entry>Moves overlapping nodes to the right</entry>
						</row>
						<row>
							<entry>CompositeLayoutAlgorithm</entry>
							<entry>Combines other layout algorithms,
								for example
								HorizontalShift can be the second layout algorithm to
								move nodes
								which were still overlapping if another algorithm is
								used</entry>
						</row>
					</tbody>
				</tgroup>
			</table>

		
	

=== Filter
		 You can also define filters (org.eclipse.zest.layouts.Filter)
			on the layout managers via the method setFilter(filter). This defines
			which nodes
			and connections should be displayed. The filter receives
			an
			LayoutItem,
			the actual graph element can be received with the method
			getGraphData(). 
		

	
