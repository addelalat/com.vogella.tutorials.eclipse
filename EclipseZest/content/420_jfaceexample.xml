<section id="jfaceexample">
	<title>Zest and JFace Example</title>
	<section id="jfaceexample_project">
		<title>Create Project</title>
		<para>
			Create a new RCP application "de.vogella.zest.jface".
			Use the "
			RCP application with a view" as a template. Add the zest
			dependencies
			to your MANIFEST.MF. Change the Perspective.java to the
			following (we
			do not want a
			stand-alone view).</para>
			
		<para>
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/jface/Perspective.java" />
			</programlisting>
		</para>
	</section>

	<section id="jfaceexample_model">
		<title>Model</title>
		<para> Create the following model. Please note that the model can be
			anything as long as you can
			logically convert it into a connected Graph. </para>

		<para>
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/jface/MyNode.java" />
			</programlisting>
		</para>

		<para>
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/jface/MyConnection.java" />
			</programlisting>
		</para>

		<para> Also build this class which provides an instance of the data
			model. </para>
		<para>
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/jface/NodeModelContentProvider.java" />
			</programlisting>
		</para>

	</section>
	<section id="jfaceexample_provides">
		<title>Providers</title>
		<para>Create the following content and label providers. </para>

		<para>
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/jface/ZestNodeContentProvider.java" />
			</programlisting>
		</para>
		<para>
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/jface/ZestLabelProvider.java" />
			</programlisting>
		</para>
	</section>
	<section id="jfaceexample_view">
		<title>View</title>

		<para> Change the view to the following.</para>
		<para>
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/jface/View.java" />
			</programlisting>
		</para>
		<para> The result should look like the following.
		</para>

		<para>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/ZestFinal10.gif" />
					
				</imageobject>
			</mediaobject>
		</para>
	</section>
	<section id="jfaceexample_filter">
		<title>Filter</title>

		<para> You can define a filter on the viewer via setFilters();
		</para>
		<para> For example define the following filter.</para>
		<para>
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/jface/NodeFilter.java" />
			</programlisting>
		</para>
		<para> Apply the filter to the view to filter all elements.</para>
		<para>
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/jface/ViewFilter.java" />
			</programlisting>
		</para>
		<para>
			<tip> You can also define a filter on the layout so that certain
				elements are ignore then calculating the layout. Method
				isObjectFiltered(LayoutItem item). Use item.getGraphData() to get
				the underlying object
				(GraphNode or GraphConnection).
			</tip>
		</para>

	</section>


</section>