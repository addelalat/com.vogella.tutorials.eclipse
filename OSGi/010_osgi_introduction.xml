<section id="osgiintro" role="wrapper">
	<title>Introduction into software modularity with OSGi</title>
	<section id="osgiintro_softwaremodularity">
		<title>What is software modularity?</title>
		<para>
			An application consists of different parts, these are typically
			called
			<wordasword>software components</wordasword>
			or
			<wordasword>software modules</wordasword>
			.
		</para>
		<para>
			These components
			interact with each other via an
			Application
			Programming Interface (API). The API is
			defined as a
			set of
			classes and
			methods which can be used from other components. A
			component also has
			a set of classes and methods
			which are
			considered as
			internal to the
			software component.

		</para>
		<para>If a component uses an API from another component, it has a
			dependency to the
			other component, i.e., it requires
			the other
			component exists and works
			correctly.
		</para>
		<para>
			A
			component which
			is
			used
			by other
			components should
			try to
			keep its
			API
			stable
			to avoid
			that a
			change
			affects other
			components. But it
			should
			be
			free to
			change its
			internal
			implementation.
		</para>
		<para>Java, in its current version (Java 8), provides no structured way
			to
			describe software component dependencies.
			Java only supports the usage
			of access modifiers, but every public class can be called from
			another software component.
			What is desired is a way to explicitly define
			the API of a software component. The OSGi specification
			fills
			this gap.
		</para>
	</section>
	<section id="osgiintro_overview">
		<title>The OSGi specification and OSGi implementations</title>

		<indexterm>
			<primary>OSGi</primary>
		</indexterm>
		<indexterm>
			<primary>Bundle</primary>
		</indexterm>
				<indexterm>
			<primary>Equinox</primary>
		</indexterm>
		<indexterm>
			<primary>Knopflerfish OSGi</primary>
		</indexterm>
		<indexterm>
			<primary>Apache Felix</primary>
		</indexterm>

		
		<para>
			OSGi
			is a set of specifications which, in its
			core specification,
			defines a
			component and
			service model for
			Java. A
			practical advantage of
			OSGi is
			that
			every
			software component can
			define its API via a set of
			exported Java
			packages and that
			every component can specify its
			required
			dependencies.
		</para>

		<para>
			The components and
			services can be
			dynamically installed,
			activated, de-activated,
			updated
			and
			de-installed.
		</para>

		<para>The OSGi specification has several implementations, for example
			Eclipse Equinox,
			Knopflerfish OSGi
			or Apache Felix.
		</para>
		<para>Eclipse Equinox is the reference
			implementation of the
			base OSGi
			specification.
			It is also the runtime environment
			on which
			Eclipse
			applications
			are based.
		</para>

	</section>

	<section id="osgiintro_bundleplugin">
		<title>Plug-in or bundles as software component</title>
		<indexterm>
			<primary>Bundle vs. plug-in</primary>
		</indexterm>
		<indexterm>
			<primary>Plug-in vs. bundle</primary>
		</indexterm>
		<indexterm>
			<primary>Bundle</primary>
		</indexterm>

		<para>
			The OSGi specification defines a
			bundle as the
			smallest
			unit of
			modularization, i.e., in OSGi a software component is
			a
			bundle.
			The
			Eclipse programming model typically calls them
			<wordasword>plug-in</wordasword>
			but these
			terms
			are
			interchangeable. A
			valid plug-in
			is always a valid
			bundle
			and
			a valid bundle is always a valid plug-in.
			In this $book the
			usage of
			<wordasword>plug-in</wordasword>
			is preferred,
			to be consistent with the terminology of
			Eclipse plug-in
			development.
		</para>
		<para>
			A
			plug-in
			is a cohesive, self-contained unit, which explicitly
			defines its
			dependencies to other components and
			services. It also
			defines its
			API via Java packages.
		</para>




	</section>

	<section id="simpleplugin">
		<title>Naming convention: simple plug-in</title>
		<indexterm>
			<primary>Simple plug-in</primary>
		</indexterm>

		<para>
			A plug-in can be generated by Eclipse via the
			<menuchoice>
				<guimenu>File</guimenu>
				<guisubmenu>New</guisubmenu>
				<guisubmenu>Other...</guisubmenu>
				<guisubmenu>Plug-In Development</guisubmenu>
				<guisubmenu>Plug-In Project</guisubmenu>
			</menuchoice>
			menu entry. The corresponding wizard allows specifying
			several options.
			This $book calls
			plug-ins generated
			with the
			following
			options
			a
			<wordasword>simple plug-in</wordasword>
			or
			<wordasword>simple bundle</wordasword>
			.
			<itemizedlist>
				<listitem>
					<para>No Activator</para>
				</listitem>
				<listitem>
					<para>No contributions to the user interface
					</para>
				</listitem>
				<listitem>
					<para>Not a rich client application</para>
				</listitem>
				<listitem>
					<para>Generated without a template</para>
				</listitem>
			</itemizedlist>
		</para>

	</section>

</section>