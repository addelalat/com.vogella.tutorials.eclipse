
== OSGi metadata


=== The manifest file (MANIFEST.MF)
		
		
		
		
		
		
		
		
		
			Technically OSGi plug-ins
			are
			_.jar_
			files with additional meta
			information.
			This meta
			information is stored
			in the
			_META-INF/MANIFEST.MF_
			file. This file is called the
			_manifest_
			file and
			is part of the standard Java
			specification and
			OSGi adds
			additional
			metadata to it. According to the Java
			specification, any
			Java
			runtime
			must
			ignore
			unknown metadata. Therefore,
			plug-ins can be
			used
			without
			restrictions in other
			Java
			environments.
		
		
			The following listing
			is
			an example
			for a manifest file.
		
		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/bundles/MANIFEST.MF[]
----
		

		
			The following table gives an explanation of the identifiers
			in the
			manifest
			file. For additional information on the
			unique
			identifier see
			<xref linkend="osgiarch_identifier" />
			and for information on the version schema which is typically used in
			OSGi see
			<xref linkend="osgiarch_semanticversions" />
			.
		
		<table frame='all'>
	=== OSGi identifiers in the manifest file
			<tgroup cols='2' align='left' colsep='1' rowsep='1'>
				<colspec colname='c1' colwidth="2*" />
				<colspec colname='c2' colwidth="4*" />
				<thead>
					<row>
						<entry>Identifier</entry>
						<entry>Description</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>Bundle-Name</entry>
						<entry>Short description of the plug-in.</entry>
					</row>
					<row>
						<entry>Bundle-SymbolicName</entry>
						<entry>
							
								The unique identifier of the plug-in. If this plug-in is using
								the
								extension point functionality of Eclipse,
								it must be marked as
								Singleton. You do this by adding the following
								statement after the Bundle-SymbolicName
								identifier:
							
							
								`; singleton:=true`
							
						</entry>
					</row>
					<row>
						<entry>Bundle-Version</entry>
						<entry>Defines the plug-in version and must be incremented if
							a new
							version of the plug-in is published.
						</entry>
					</row>
					<row>
						<entry>
							Bundle-Activator
						</entry>
						<entry>
							Defines an optional activator class which implements the
							`BundleActivator`
							interface. An instance of this class is created when the plug-in
							gets activated. Its
							`start()`
							and
							`stop()`
							methods are called whenever
							the plug-in
							is
							started or
							stopped. An
							OSGi
							activator can be used to configure the plug-in
							during
							startup. The execution of an activator
							increases the startup time of the
							application, therefore this functionality should be used carefully.
						</entry>
					</row>
					<row>
						<entry>Bundle-RequiredExecutionEnvironment (BREE)</entry>
						<entry>Specify which Java version is required to run the plug-in.
							If
							this
							requirement is not fulfilled, then the OSGi
							runtime does
							not
							load
							the
							plug-in.
						</entry>
					</row>
					<row>
						<entry>Bundle-ActivationPolicy</entry>
						<entry>
							Setting this to
							_lazy_
							will tell the OSGi runtime that this
							plug-in should only be
							activated if one of its components, i.e.
							classes and
							interfaces
							are used by other plug-ins. If not set, the Equinox runtime does
							not activate the plug-in, i.e.,
							services provided by this plug-in
							are not available.
						</entry>
					</row>
					<row>
						<entry>Bundle-ClassPath</entry>
						<entry>
							The Bundle-ClassPath specifies where to load classes from
							the
							bundle. The default is '.' which allows classes to be
							loaded from
							the root of the bundle. You can also add JAR files to
							it, these
							are called
							_nested JAR files_
							.
						</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
	


=== Bundle-SymbolicName and Version
		

		
			Each plug-in has a symbolic name which is defined via the
			`Bundle-SymbolicName`
			property. The name starts by convention
			with the reverse domain
			name
			of
			the plug-in author, e.g., if you own the
			"example.com" domain
			then the
			symbolic name would start with
			"com.example".
		
		
			Each plug-in has also a version number in the
			`Bundle-Version`
			property.
		
		
			The
			`Bundle-Version`
			and the
			`Bundle-SymbolicName`
			uniquely
			identifies
			a plug-in.
		
	

=== Semantic Versioning with OSGi
		
			OSGi recommends to use a
			_<![CDATA[<major>.<minor>.<patch>]]>_
			schema for the
			version number which is defined via the
			`Bundle-Version`
			field identifier. If you change your plug-in code you increase the
			version according to the following rule set.
			<itemizedlist>
				<listitem>
					
						_<![CDATA[<patch>]]>_
						is increased if all changes are backwards compatible.
					
				</listitem>
				<listitem>
					
						_<![CDATA[<minor>]]>_
						is increased if public API has changed but all changes are
						backwards compatible.
					
				</listitem>
				<listitem>
					
						_<![CDATA[<major>]]>_
						is increased if changes are not backwards compatible.
					
				</listitem>
			</itemizedlist>
		
		
			For more information on this version scheme see the
			https://wiki.eclipse.org/Version_Numbering">Eclipse Version Numbering Wiki
			.
		

	


