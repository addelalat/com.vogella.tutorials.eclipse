
	<title>Using native code in OSGI
	
		OSGi provides support for resolving and loading shared libraries in Java applications. A plug-in
		can
		specify these
		its
		shared libraries dependencies and associated platform requirements in their manifest file via the
		Bundle-NativeCode
		header.
		This
		header value is then used when loading a DLL through the
		<code>System.loadLibrary()</code>
		method call.
	
	

		While you could use native code without this header, its usage has two advantages.

		<itemizedlist>
			<listitem>
				a plug-in does not resolve if there is no matching clause for the current platform. If you donâ€™t include the
					optional specifier (the trailing asterisk), this avoids an
					UnsatisfiedLinkError.
				
			</listitem>
			<listitem>
				 OSGi resolves the library name, e.g., "mydll" to the appropriate DLLs for the platform,
					and
					manages
					the loading
					and unloading of the shared library
				
			</listitem>

		</itemizedlist>
	
	
		To make your native library available you have to load it via a call of
		<code>System.libraryLoad()</code>
		, OSGi handles shared libraries lazy, e.g., it does not eagerly load them.
	


