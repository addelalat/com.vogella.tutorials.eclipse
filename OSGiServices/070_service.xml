
== OSGi Services

=== What are OSGi services?
		<indexterm>
			<primary>OSGi</primary>
			<secondary>Services</secondary>
		</indexterm>
		<indexterm>
			<primary>Services (OSGi)</primary>
			<seealso>Eclipse services</seealso>
		</indexterm>
		
		
		
			A
			_service_
			in OSGi is defined by a standard Java class or an
			interface.
			The first step to define an OSGi service is to define the
			class
			or interface for which you want to provide a
			service.
			This is called the
			_service interface_
			.
		
		As a second step you write the implementation
			class for the service interface.
		
		
			You can
			register services implementations and consume existing services via the OSGi
			runtime.
			OSGi provides
			a
			central
			_service registry_
			for this purpose.
		

		
			A
			service
			can be dynamically started and stopped,
			and plug-ins
			which use
			services
			must be able to handle this dynamic
			behavior.
			The
			plug-ins can
			register
			listeners
			to be informed if a service
			is
			started
			or
			stopped.
		
		During the declaration of a service it is possible to specify
			key / values which can be used to configure the
			service.
		
		
			It is possible to define a service ranking for a service via a
			service
			property.
			OSGi
			assigns by default a
			value of
			zero as the service
			ranking. The higher the ranking the better. Frameworks like the
			Eclipse dependency injection
			framework automatically inject the
			service with the highest service ranking.
		
		
			The
			`Constants`
			class from the
			`org.osgi.framework`
			package defines the
			_service.ranking_
			value via the
			`Constants.SERVICE_RANKING`
			constant. This constant can be used to
			set the
			integer property of the
			service
			ranking.
		

	

=== Life cycle status for providing services
		
			To provide a service a plug-in needs to be in the
			`ACTIVE`
			life cycle status of OSGi.
		
		
			This requires that the service plug-in has the
			_Activate this plug-in when one of its classes is loaded_
			flag set in the
			manifest
			file.
		
		
image::osgi_dsservices_activateflag10.png" scale="40[Activate flag for services,pdfwidth=60%]
		
	

=== Best practices for defining services
		
			It is good practice to define a
			service
			via a plug-in
			which
			only
			contains the interface definition. Another
			plug-in
			would provide
			the
			implementation for this service. This allows
			you to
			change
			the
			implementation of the service via a
			different plug-in.
		
	


