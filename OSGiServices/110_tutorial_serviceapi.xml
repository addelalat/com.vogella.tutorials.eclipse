== Tutorial: Using the OSGi service API
	
		In the following we will
		define and
		consume a service. Our service
		will
		return "famous quotes".
	

=== Define the service interface
		
			Create a plug-in project "de.vogella.osgi.quote" and the package
			"de.vogella.osgi.quote". Do not use a
			template. You do not need an
			activator. Afterwards select the MANIFEST.MF and the
			_Runtime_
			tab.
			Add
			"de.vogella.osgi.quote" to the exported packages.
		
		
image::firstservice10.gif[]

				
			
		
		Create the following interface "IQuoteService".
		
[source,java]
----
include::res/service/IQuoteService.java[]
----
		
	

=== Create service
		 We will now define a bundle which will provide the service.
		
		 Create a plug-in project "de.vogella.osgi.quoteservice". Do not
			use a template.
		
		 Select the MANIFEST.MF and dependecy tab. Add
			"de.vogella.osgi.quote" to the required plugins.
		
		
image::firstservice20.gif[]

				
			
		
		 Create the following class "QuoteService".
		
[source,java]
----
include::res/service/QuoteService.java[]
----
		
		 Register the service in the class Activator.
		
[source,java]
----
include::res/service/ActivatorService.java[]
----
		
	

=== Install service bundles
		 Export your bundles and install them on your server. Start the
			service bundle.
		
		
image::firstservice30.gif[]

				
			
		
		
			TIP:Nothing fancy happens, as we are not yet consuming our
				service.
			
		
	

=== Use your service
		Create a new plug-in "de.vogella.osgi.quoteconsumer". Add
			also a
			dependency to the package "de.vogella.osgi.quote".
		
		
image::firstservice35.gif[]

				
			
		
		
			TIP: Please note that we have added the dependency against the
				package NOT against the plugin. This way we later replace the
				service with a different implementation.
			
		
		 Lets register directly to the service and use it.
		
[source,java]
----
include::res/service/ActivatorConsument.java[]
----
		
		Export this bundle, install it and start and stop it.
			Everything
			work. But if you stop the service bundle then your receive
			an error.
		
		
image::firstservice40.gif[]

				
			
		
		 The reason for this is that OSGi is a very dynamic environment
			and service may be registered and de-registered any time. The next
			chapter will use a service tracker to improve this.
		
	

=== Use your service with a service tracker
		 Declare a package dependency to the package
			"org.osgi.util.tracker" in your bundle.
		
		 To use this define the following class
			"MyQuoteServiceTrackerCustomizer"
		
		
[source,java]
----
include::res/service/MyQuoteServiceTrackerCustomizer.java[]
----
		
		 You also need to register a service tracker in your activator
			of your serviceconsumer.
		
		
[source,java]
----
include::res/service/ActivatorServiceTracker.java[]
----
		
		 Export your bundle again. Start the OSGi console. Use the
			update command or the install command to get the new version of your
			bundle and start it. Once you start your service the tracker will be
			called and the consumer bundle will start writing messages to the
			console. Stop the service and verify that the consumer does not use
			the service anymore.
		
	

